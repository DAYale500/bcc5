









File: lib/navigation/main_scaffold.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
// import '../utils/logger.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class MainScaffold extends StatelessWidget {
  final int branchIndex;
  final Widget child;
  final PreferredSizeWidget? appBar;
  final GlobalKey? harborKey;
  final GlobalKey? bnbLessonsKey;
  final GlobalKey? bnbPartsKey;
  final GlobalKey? bnbToolsKey;
  final GlobalKey? bnbFlashcardsKey;

  const MainScaffold({
    super.key,
    required this.branchIndex,
    required this.child,
    this.appBar,
    this.harborKey,
    this.bnbLessonsKey, // ‚úÖ
    this.bnbPartsKey, // ‚úÖ
    this.bnbToolsKey, // ‚úÖ
    this.bnbFlashcardsKey, // ‚úÖ
  });

  void _onItemTapped(BuildContext context, int index) {
    if (index == branchIndex) return;

    // logger.i('üß≠ BNB tapped tab $index ‚Äî switching via GoRouter');

    final routes = ['/', '/lessons', '/parts', '/tools', '/flashcards'];
    final destination = routes[index];

    context.go(
      destination,
      extra: {
        'transitionKey': UniqueKey(),
        'detailRoute': DetailRoute.branch,
        'slideFrom': SlideDirection.none,
      },
    );
  }

  GlobalKey? _getBNBKey(int index) {
    switch (index) {
      case 1:
        return bnbLessonsKey; // ‚úÖ
      case 2:
        return bnbPartsKey; // ‚úÖ
      case 3:
        return bnbToolsKey; // ‚úÖ
      case 4:
        return bnbFlashcardsKey; // ‚úÖ
      default:
        return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    // logger.d('[Scaffold] tab index: $branchIndex');

    return Scaffold(
      appBar: appBar,
      body: child,
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: branchIndex,
        onTap: (index) => _onItemTapped(context, index),
        type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.anchor_outlined, key: harborKey),
            label: 'Harbor',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.public_outlined, key: _getBNBKey(1)), // ‚úÖ
            label: 'Courses',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.sailing_outlined, key: _getBNBKey(2)), // ‚úÖ
            label: 'Parts',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.build, key: _getBNBKey(3)), // ‚úÖ
            label: 'Tools',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.quiz_outlined, key: _getBNBKey(4)), // ‚úÖ
            label: 'Drills',
          ),
        ],
      ),
    );
  }
}










File: lib/navigation/app_router.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/screens/paths/path_item_screen.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/screens/landing_screen/landing_screen.dart';
import 'package:bcc5/screens/lessons/lesson_module_screen.dart';
import 'package:bcc5/screens/lessons/lesson_item_screen.dart';
import 'package:bcc5/screens/lessons/lesson_detail_screen.dart';
import 'package:bcc5/screens/parts/part_zone_screen.dart';
import 'package:bcc5/screens/parts/part_item_screen.dart';
import 'package:bcc5/screens/parts/part_detail_screen.dart';
import 'package:bcc5/screens/tools/tool_bag_screen.dart';
import 'package:bcc5/screens/tools/tool_item_screen.dart';
import 'package:bcc5/screens/tools/tool_detail_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_category_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_item_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_detail_screen.dart';
import 'package:bcc5/screens/paths/path_chapter_screen.dart';
// import 'package:bcc5/screens/paths/path_item_screen.dart';
import 'package:bcc5/utils/transition_manager.dart';

final appRouter = GoRouter(
  initialLocation: '/',
  routes: [
    // üèÅ Landing
    GoRoute(
      path: '/',
      name: 'landing',
      pageBuilder: (context, state) {
        // logger.d('[Router] Navigated to /landing');

        final showReminder =
            (state.extra as Map<String, dynamic>?)?['showReminder'] as bool? ??
            false;

        // ‚úÖ Onboarding GlobalKeys (created once in this route scope)
        final mobKey = GlobalKey(debugLabel: 'MOBKey');
        final settingsKey = GlobalKey(debugLabel: 'SettingsKey');
        final searchKey = GlobalKey(debugLabel: 'SearchKey');
        final titleKey = GlobalKey(debugLabel: 'TitleKey');
        final harborKey = GlobalKey(debugLabel: 'HarborIconKey');
        final bnbLessonsKey = GlobalKey(debugLabel: 'BNBLessonsKey'); // ‚úÖ
        final bnbPartsKey = GlobalKey(debugLabel: 'BNBPartsKey'); // ‚úÖ
        final bnbToolsKey = GlobalKey(debugLabel: 'BNBToolsKey'); // ‚úÖ
        final bnbFlashcardsKey = GlobalKey(debugLabel: 'BNBFlashcardsKey'); // ‚úÖ
        logger.i(
          'üìò [GoRouter] Building LandingScreen with onboarding keys',
        ); // ‚úÖ

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),

          child: MainScaffold(
            branchIndex: 0,
            harborKey: harborKey,
            bnbLessonsKey: bnbLessonsKey, // ‚úÖ
            bnbPartsKey: bnbPartsKey, // ‚úÖ
            bnbToolsKey: bnbToolsKey, // ‚úÖ
            bnbFlashcardsKey: bnbFlashcardsKey, // ‚úÖ
            child: LandingScreen(
              showReminder: showReminder,
              harborKey: harborKey,
              bnbLessonsKey: bnbLessonsKey, // ‚úÖ
              bnbPartsKey: bnbPartsKey, // ‚úÖ
              bnbToolsKey: bnbToolsKey, // ‚úÖ
              bnbFlashcardsKey: bnbFlashcardsKey, // ‚úÖ

              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üß≠ Learning Paths
    GoRoute(
      path: '/learning-paths/:pathName',
      name: 'learning-path',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 0,
            child: PathChapterScreen(pathName: pathName),
          ),
        );
      },
    ),

    GoRoute(
      path: '/learning-paths/:pathName/items',
      name: 'learning-path-items',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final chapterId = extras['chapterId'] as String?;
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;

        // // ‚úÖ Fix: Fallback GlobalKeys
        // final mobKey =
        //     extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        // final settingsKey =
        //     extras['settingsKey'] as GlobalKey? ??
        //     GlobalKey(debugLabel: 'SettingsKey');
        // final searchKey =
        //     extras['searchKey'] as GlobalKey? ??
        //     GlobalKey(debugLabel: 'SearchKey');
        // final titleKey =
        //     extras['titleKey'] as GlobalKey? ??
        //     GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          child: MainScaffold(
            branchIndex: 0,
            child: PathItemScreen(
              pathName: pathName,
              chapterId: chapterId ?? '',
              // mobKey: mobKey,
              // settingsKey: settingsKey,
              // searchKey: searchKey,
              // titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üìò Lessons
    GoRoute(
      path: '/lessons',
      name: 'lessons',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        // logger.i('üìò Entering LessonModuleScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(branchIndex: 1, child: LessonModuleScreen()),
        );
      },
    ),

    // refactored april 21 1256
    GoRoute(
      path: '/lessons/items',
      name: 'lesson-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {}; // ‚úÖ
        final module = extras['module'] as String?;
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        if (module == null) {
          logger.e('‚ùå Missing module parameter for LessonItemScreen');
          return TransitionManager.buildCustomTransition(
            context: context,
            state: state,
            transitionKey: state.pageKey,
            slideFrom: slideFrom,
            transitionType: transitionType,
            child: MainScaffold(
              branchIndex: 1,
              child:
                  const LessonModuleScreen(), // ‚úÖ Refactored: no keys passed in
            ),
          );
        }

        logger.i(
          'üìò Navigating to LessonItemScreen for module: $module | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 1,
            child: LessonItemScreen(module: module),
          ),
        );
      },
    ),

    GoRoute(
      path: '/lessons/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: LessonDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
            ),
          ),
        );
      },
    ),

    // üß© Parts
    GoRoute(
      path: '/parts',
      name: 'parts',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        // logger.i('üß© Entering PartZoneScreen');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(branchIndex: 2, child: PartZoneScreen()),
        );
      },
    ),

    GoRoute(
      path: '/parts/items',
      name: 'part-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {}; // ‚úÖ
        final zone = extras['zone'] as String? ?? '';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üß© Navigating to PartItemScreen for zone: $zone | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 2,
            child: PartItemScreen(zone: zone),
          ),
        );
      },
    ),

    GoRoute(
      path: '/parts/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: PartDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
            ),
          ),
        );
      },
    ),

    // üõ†Ô∏è Tools
    GoRoute(
      path: '/tools',
      name: 'tools',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        // logger.d('[Router] Navigated to /tools');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(branchIndex: 3, child: ToolBagScreen()),
        );
      },
    ),

    GoRoute(
      path: '/tools/items',
      name: 'tool-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {}; // ‚úÖ
        final toolbag = extras['toolbag'] as String? ?? '';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üõ†Ô∏è Navigating to ToolItemScreen for toolbag: $toolbag | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 3,
            child: ToolItemScreen(toolbag: toolbag),
          ),
        );
      },
    ),

    GoRoute(
      path: '/tools/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: ToolDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
            ),
          ),
        );
      },
    ),

    // üÉè Flashcards
    // üÉè Flashcards
    GoRoute(
      path: '/flashcards',
      name: 'flashcards',
      pageBuilder: (context, state) {
        // logger.i('üìá Entering FlashcardCategoryScreen');

        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.left;
        final transitionType =
            extras['transitionType'] as TransitionType? ?? TransitionType.slide;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: const MainScaffold(
            branchIndex: 4,
            child: FlashcardCategoryScreen(),
          ),
        );
      },
    ),

    GoRoute(
      path: '/flashcards/items',
      name: 'flashcardItems',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final category = extras['category'] as String? ?? 'all';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üìá Navigating to FlashcardItemScreen for category: $category | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 4,
            child: FlashcardItemScreen(category: category),
          ),
        );
      },
    ),

    GoRoute(
      path: '/flashcards/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;

        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex =
            extras['currentIndex'] ?? extras['startIndex'] ?? 0;
        final branchIndex = extras['branchIndex'] ?? 4;
        final backDestination = extras['backDestination'] ?? '/';
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        // logger.i('üÉè Entering FlashcardDetailScreen with extra: $extras');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: FlashcardDetailScreen(
              key: ValueKey(currentIndex),
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
            ),
          ),
        );
      },
    ),
  ],
);










File: lib/navigation/detail_route.dart
// lib/navigation/detail_route.dart

enum DetailRoute { path, branch, search }










File: lib/navigation/scaffold_helpers.dart
import 'package:flutter/material.dart';
import 'main_scaffold.dart';

/// Wraps any screen with the MainScaffold layout,
/// ensuring the BottomNavigationBar remains visible.
///
/// [branchIndex] determines which BNB tab is highlighted.
/// [child] is the content screen to render inside the scaffold.
Widget withBNB({required int branchIndex, required Widget child}) {
  return MainScaffold(branchIndex: branchIndex, child: child);
}










File: lib/bcc5_app.dart
// üìÑ lib/bcc5_app.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/app_router.dart';

class Bcc5App extends StatelessWidget {
  final bool showReminder;

  const Bcc5App({super.key, required this.showReminder});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'BCC5 Sailing App',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      routerConfig: appRouter, // You may need to inject showReminder into this
    );
  }
}










File: lib/utils/location_helper.dart
import 'package:geolocator/geolocator.dart';
import 'package:bcc5/utils/logger.dart';

Future<Position?> getCurrentLocation() async {
  bool serviceEnabled;
  LocationPermission permission;

  serviceEnabled = await Geolocator.isLocationServiceEnabled();
  if (!serviceEnabled) {
    logger.w('üì° Location services are disabled.');
    return null;
  }

  permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied) {
    permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied) {
      logger.w('‚ùå Location permission denied.');
      return null;
    }
  }

  if (permission == LocationPermission.deniedForever) {
    logger.e('üö´ Location permissions are permanently denied.');
    return null;
  }

  final position = await Geolocator.getCurrentPosition();
  // logger.i('üìç Got location: ${position.latitude}, ${position.longitude}');
  return position;
}

String formatToMarineCoord(
  double decimal, {
  required bool isLat,
  bool full = false,
}) {
  final direction =
      isLat ? (decimal >= 0 ? 'N' : 'S') : (decimal >= 0 ? 'E' : 'W');

  final abs = decimal.abs();
  final degrees = abs.floor();
  final minutesDecimal = (abs - degrees) * 60;

  if (full) {
    final fullMinutes = minutesDecimal.floor();
    final seconds = ((minutesDecimal - fullMinutes) * 60).toStringAsFixed(1);
    return '$degrees¬∞$fullMinutes\'$seconds"$direction';
  } else {
    final minutes = minutesDecimal.toStringAsFixed(3).padLeft(6, '0');
    return '$direction $degrees¬∞ $minutes\'';
  }
}










File: lib/utils/id_parser.dart
// üü† lib/utils/id_parser.dart

/// Extracts the [type] from a content ID, e.g. 'lesson' from 'lesson_docking_1.00'
String getTypeFromId(String id) {
  final parts = id.split('_');
  return parts.isNotEmpty ? parts[0] : 'unknown';
}

/// Extracts the [group] from a content ID, e.g. 'docking' from 'lesson_docking_1.00'
String getGroupFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 2 ? parts[1] : 'unknown';
}

/// Extracts the [sequence number] from a content ID, e.g. '1.00' from 'lesson_docking_1.00'
String getSequenceFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 3 ? parts[2] : 'unknown';
}










File: lib/utils/tour_manager.dart
// class TourManager {
//   static const _hasSeenLandingTourKey = 'hasSeenLandingTour';

//   static Future<bool> hasSeenLandingTour() async {
//     final prefs = await SharedPreferences.getInstance();
//     return prefs.getBool(_hasSeenLandingTourKey) ?? false;
//   }

//   static Future<void> markLandingTourSeen() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setBool(_hasSeenLandingTourKey, true);
//   }

//   static Future<void> resetLandingTour() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.remove(_hasSeenLandingTourKey);
//   }
// }










File: lib/utils/radio_helper.dart
// üìÑ lib/utils/radio_helper.dart

import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/settings_manager.dart';

String formatPhonetic(String name) {
  final nato = {
    'a': 'Alpha',
    'b': 'Bravo',
    'c': 'Charlie',
    'd': 'Delta',
    'e': 'Echo',
    'f': 'Foxtrot',
    'g': 'Golf',
    'h': 'Hotel',
    'i': 'India',
    'j': 'Juliet',
    'k': 'Kilo',
    'l': 'Lima',
    'm': 'Mike',
    'n': 'November',
    'o': 'Oscar',
    'p': 'Papa',
    'q': 'Quebec',
    'r': 'Romeo',
    's': 'Sierra',
    't': 'Tango',
    'u': 'Uniform',
    'v': 'Victor',
    'w': 'Whiskey',
    'x': 'X-ray',
    'y': 'Yankee',
    'z': 'Zulu',
  };

  return name
      .toLowerCase()
      .split('')
      .map((char) {
        if (nato.containsKey(char)) return nato[char]!;
        if (RegExp(r'[0-9]').hasMatch(char)) return char; // numbers stay as-is
        return char.toUpperCase(); // fallback for symbols
      })
      .join(' ');
}

String formatSoulsOnboard(int adults, int children) {
  if (adults == 0 && children == 0) {
    return 'Total number of people onboard is unknown.';
  }
  if (adults > 0 && children == 0) {
    return 'We have $adults adult${adults > 1 ? 's' : ''} onboard.';
  }
  if (adults == 0 && children > 0) {
    return 'We have $children child${children > 1 ? 'ren' : ''} onboard.';
  }
  return 'We have $adults adult${adults > 1 ? 's' : ''} and $children child${children > 1 ? 'ren' : ''} onboard.';
}

String formatGPSForRadio(double lat, double lon, GPSDisplayFormat format) {
  switch (format) {
    case GPSDisplayFormat.marineCompact:
      return '${_speakMarineCoord(lat, isLat: true)}\n'
          '${_speakMarineCoord(lon, isLat: false)}';

    case GPSDisplayFormat.marineFull:
      return '${_speakMarineCoord(lat, isLat: true, full: true)}\n'
          '${_speakMarineCoord(lon, isLat: false, full: true)}';

    case GPSDisplayFormat.decimal:
      return 'Latitude: ${lat.toStringAsFixed(5)} degrees\n'
          'Longitude: ${lon.toStringAsFixed(5)} degrees';
  }
}

String _speakMarineCoord(
  double decimal, {
  required bool isLat,
  bool full = false,
}) {
  final direction =
      isLat
          ? (decimal >= 0 ? 'North' : 'South')
          : (decimal >= 0 ? 'East' : 'West');

  final abs = decimal.abs();
  final degrees = abs.floor();
  final minutesDecimal = (abs - degrees) * 60;

  final spokenDegrees = _speakDigits(degrees.toString());

  if (full) {
    final minutes = minutesDecimal.floor();
    final seconds = ((minutesDecimal - minutes) * 60).round();
    final spokenMinutes = _speakDigits(minutes.toString());
    final spokenSeconds = _speakDigits(seconds.toString());
    return '$spokenDegrees degrees, $spokenMinutes minutes, $spokenSeconds seconds $direction';
  } else {
    final parts = minutesDecimal.toStringAsFixed(3).split('.');
    final spokenMinutesWhole = _speakDigits(parts[0]);
    final spokenMinutesDecimal = _speakDigits(parts[1]);
    return '$spokenDegrees degrees decimal $spokenMinutesWhole decimal $spokenMinutesDecimal minutes $direction';
  }
}

String _speakDigits(String numberStr) {
  const digitWords = [
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
  ];

  return numberStr
      .split('')
      .map((char) => digitWords[int.parse(char)])
      .join('-');
}

// Future<String> buildPhoneticVesselIntro() async {
//   final boatName = await SettingsManager.getBoatName();
//   final type = await SettingsManager.getVesselType();
//   final fullName = "$type $boatName".trim();
//   final phonetic = formatPhonetic(fullName);
//   return 'This is $type $phonetic.';
// }

Future<String> buildPhoneticVesselIntro() async {
  final boatName = await SettingsManager.getBoatName();
  final type = await SettingsManager.getVesselType();

  if (boatName.isEmpty || type.isEmpty) {
    logger.w('‚ö†Ô∏è Missing boat name or vessel type in buildPhoneticVesselIntro');
  }

  final fullName = boatName.trim();
  final phonetic = formatPhonetic(fullName);

  return 'This is the $type $fullName, $fullName, $fullName: $phonetic';
}

String getPluralizedUnit(String unit, String length) {
  final isSingular = length == '1';

  if (unit == 'meters') {
    return isSingular ? 'meter' : 'meters';
  } else {
    return isSingular ? 'foot' : 'feet';
  }
}

Future<String> buildSpokenVesselDescription() async {
  final length = (await SettingsManager.getVesselLength()).trim();
  final type = (await SettingsManager.getVesselType()).trim();
  final description = (await SettingsManager.getVesselDescription()).trim();
  final unit =
      (await SettingsManager.getUnitPreference())
          .trim()
          .toLowerCase(); // 'feet' or 'meters'

  if (length.isEmpty || type.isEmpty) {
    logger.w(
      '‚ö†Ô∏è Missing vessel length or type in buildSpokenVesselDescription',
    );
  }

  final unitLabel = unit == 'meters' ? 'meter' : 'foot';
  final hyphenated = '$length-$unitLabel $type';

  if (description.isNotEmpty) {
    return 'We are a $hyphenated, with ${description.trim()}.';
  } else {
    return 'We are a $hyphenated.';
  }
}

String formatSpokenDigits(String input) {
  final digits = input.replaceAll(RegExp(r'[^0-9]'), '');
  return digits.split('').map(_digitToWord).join('-');
}

String _digitToWord(String d) {
  const map = {
    '0': 'zero',
    '1': 'one',
    '2': 'two',
    '3': 'three',
    '4': 'four',
    '5': 'five',
    '6': 'six',
    '7': 'seven',
    '8': 'eight',
    '9': 'nine',
  };
  return map[d] ?? d;
}










File: lib/utils/transition_manager.dart
import 'dart:ui';

import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/resume_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class TransitionManager {
  static void goToDetailScreen({
    required BuildContext context,
    required RenderItemType screenType,
    required List<RenderItem> renderItems,
    required int currentIndex,
    required int branchIndex,
    required String backDestination,
    required Map<String, dynamic>? backExtra,
    required DetailRoute detailRoute,
    SlideDirection direction = SlideDirection.none,
    TransitionType transitionType = TransitionType.slide,
    bool replace = false, // ‚úÖ new optional flag
  }) {
    // ‚úÖ Save resume point if navigating within path
    if (detailRoute == DetailRoute.path &&
        currentIndex >= 0 &&
        currentIndex < renderItems.length) {
      final item = renderItems[currentIndex];
      final pathName = backExtra?['pathName'] as String?;
      final chapterId = backExtra?['chapterId'] as String?;
      if (pathName != null && chapterId != null) {
        ResumeManager.saveResumePoint(
          pathName: pathName,
          chapterId: chapterId,
          itemId: item.id,
        );
      }
    }

    final route = _getRouteForScreenType(screenType);
    final transitionKey = UniqueKey().toString();
    final sanitizedBackExtra = {
      ...?_stripGlobalKeys(backExtra),
      'detailRoute': detailRoute,
    };
    // logger.i(
    //   '[TransitionManager] goToDetailScreen ‚Üí '
    //   'type: $screenType | route: $route | index: $currentIndex\n'
    //   '‚Üí detailRoute: $detailRoute | direction: $direction\n'
    //   '‚Üí backDestination: $backDestination | transitionKey: $transitionKey',
    // );

    final extra = {
      'renderItems': renderItems,
      'currentIndex': currentIndex,
      'branchIndex': branchIndex,
      'backDestination': backDestination,
      'backExtra': sanitizedBackExtra,
      'detailRoute': detailRoute,
      'transitionKey': transitionKey,
      'slideFrom': direction,
      'transitionType': transitionType,
    };

    if (replace) {
      context.go(route, extra: extra);
    } else {
      context.push(route, extra: extra);
    }
  }

  static Map<String, dynamic>? _stripGlobalKeys(Map<String, dynamic>? input) {
    if (input == null) return null;
    final copy = Map.of(input);
    copy.removeWhere((key, value) => value is GlobalKey);
    return copy;
  }

  static String _getRouteForScreenType(RenderItemType type) {
    switch (type) {
      case RenderItemType.lesson:
        return '/lessons/detail';
      case RenderItemType.part:
        return '/parts/detail';
      case RenderItemType.tool:
        return '/tools/detail';
      case RenderItemType.flashcard:
        return '/flashcards/detail';
    }
  }

  /// Route-level transition builder for GoRouter `pageBuilder`
  static CustomTransitionPage buildCustomTransition({
    required BuildContext context,
    required GoRouterState state,
    required ValueKey<String> transitionKey,
    required Widget child,
    SlideDirection slideFrom = SlideDirection.none,
    TransitionType transitionType = TransitionType.instant,
  }) {
    final extras = state.extra as Map<String, dynamic>? ?? {};

    // logger.i(
    //   'üß™ [TransitionManager] buildCustomTransition EXTRAS DUMP\n'
    //   ' ‚îú‚îÄ route: ${state.uri.toString()}\n'
    //   ' ‚îú‚îÄ transitionKey: $transitionKey\n'
    //   ' ‚îú‚îÄ detailRoute: ${extras['detailRoute']}\n'
    //   ' ‚îú‚îÄ slideFrom: ${extras['slideFrom']}\n'
    //   ' ‚îú‚îÄ transitionType: ${extras['transitionType']}\n'
    //   ' ‚îú‚îÄ mobKey: ${_safeKey(extras['mobKey'])}\n'
    //   ' ‚îú‚îÄ settingsKey: ${_safeKey(extras['settingsKey'])}\n'
    //   ' ‚îú‚îÄ searchKey: ${_safeKey(extras['searchKey'])}\n'
    //   ' ‚îî‚îÄ titleKey: ${_safeKey(extras['titleKey'])}',
    // );

    // final detailRoute =
    //     extras['detailRoute'] is DetailRoute
    //         ? extras['detailRoute'] as DetailRoute
    //         : DetailRoute.branch;

    final effectiveSlideFrom =
        extras['slideFrom'] is SlideDirection
            ? extras['slideFrom'] as SlideDirection
            : slideFrom;

    final effectiveTransitionType =
        extras['transitionType'] is TransitionType
            ? extras['transitionType'] as TransitionType
            : transitionType;

    // logger.i(
    //   '[TransitionManager] buildCustomTransition ‚Üí '
    //   'detailRoute: $detailRoute | transitionType: $effectiveTransitionType | slideFrom: $effectiveSlideFrom',
    // );

    // ‚úÖ Add these additional transitions into your transitionsBuilder

    return CustomTransitionPage(
      key: transitionKey,
      child: child,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        switch (effectiveTransitionType) {
          case TransitionType.instant:
            return buildInstantTransition(child);

          case TransitionType.slide:
            return buildSlideTransition(child, animation, effectiveSlideFrom);

          case TransitionType.fade:
            return FadeTransition(opacity: animation, child: child);

          case TransitionType.scale:
            return ScaleTransition(
              scale: Tween<double>(begin: 0.9, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.fadeScale:
            return buildScaleFadeTransition(
              child,
              animation,
              secondaryAnimation,
            );

          case TransitionType.rotation:
            return RotationTransition(turns: animation, child: child);

          case TransitionType.slideUp:
            return buildSlideTransition(child, animation, SlideDirection.up);

          case TransitionType.slideDown:
            return buildSlideTransition(child, animation, SlideDirection.down);

          case TransitionType.slideLeft:
            return buildSlideTransition(child, animation, SlideDirection.left);

          case TransitionType.slideRight:
            return buildSlideTransition(child, animation, SlideDirection.right);

          case TransitionType.zoomIn:
            return ScaleTransition(
              scale: Tween<double>(begin: 0.0, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.zoomOut:
            return ScaleTransition(
              scale: Tween<double>(begin: 2.0, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.blurFade:
            return FadeTransition(
              opacity: animation,
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 4, sigmaY: 4),
                child: child,
              ),
            );

          // You can fill in these with actual animations later
          case TransitionType.morph:
          case TransitionType.carousel:
          case TransitionType.sharedAxis:
          case TransitionType.ripple:
          case TransitionType.delayFade:
          case TransitionType.staggered:
          case TransitionType.cube:
          case TransitionType.flip:
          case TransitionType.slide3D:
            logger.w(
              '[TransitionManager] Transition type not yet implemented: $effectiveTransitionType',
            );
            return child;
        }
      },
    );
  }

  // this if for the big extra logger dump that's commented out above
  // static String _safeKey(Object? key) {
  //   if (key is GlobalKey<State<StatefulWidget>>) {
  //     final label = key.toString();
  //     return label.contains("'") ? label.split("'")[1] : label;
  //   }
  //   return key?.toString() ?? 'null';
  // }
}

/// Used for in-group transitions (Next/Previous)
Widget buildScaleFadeTransition(
  Widget child,
  Animation<double> animation,
  Animation<double> secondaryAnimation,
) {
  return ScaleTransition(
    scale: Tween<double>(begin: 0.95, end: 1.0).animate(animation),
    child: FadeTransition(opacity: animation, child: child),
  );
}

/// Used for instant appearance (default)
Widget buildInstantTransition(Widget child) {
  return child;
}

/// Used for initial entry into detail screen via path/search
Widget buildSlideTransition(
  Widget child,
  Animation<double> animation,
  SlideDirection direction,
) {
  late final Offset beginOffset;
  switch (direction) {
    case SlideDirection.right:
      beginOffset = const Offset(1.0, 0.0);
      break;
    case SlideDirection.left:
      beginOffset = const Offset(-1.0, 0.0);
      break;
    case SlideDirection.down:
      beginOffset = const Offset(0.0, 1.0);
      break;
    case SlideDirection.up:
      beginOffset = const Offset(0.0, -1.0);
      break;
    case SlideDirection.none:
      return child;
  }

  return SlideTransition(
    position: Tween<Offset>(
      begin: beginOffset,
      end: Offset.zero,
    ).animate(animation),
    child: child,
  );
}

// leave this comment in: do not remove
// static Map<String, GlobalKey> generateUniqueKeys() => {
//   'mobKey': GlobalKey(),
//   'settingsKey': GlobalKey(),
//   'searchKey': GlobalKey(),
//   'titleKey': GlobalKey(),
// };










File: lib/utils/logger.dart
import 'package:logger/logger.dart';

final logger = Logger(
  printer: PrettyPrinter(
    methodCount: 1,
    colors: true,
    printEmojis: true,
    dateTimeFormat: DateTimeFormat.none, // ‚úÖ Modern replacement for printTime
  ),
);










File: lib/utils/settings_manager.dart
// üìÑ lib/utils/settings_manager.dart

import 'package:shared_preferences/shared_preferences.dart';

enum GPSDisplayFormat {
  marineCompact, // e.g., 37¬∞46.493'N
  decimal, // e.g., 37.7749¬∞, -122.4194¬∞
  marineFull, // e.g., 37¬∞46'29.6"N
}

class SettingsManager {
  // Preference keys
  static const _gpsFormatKey = 'gpsDisplayFormat';
  static const _boatNameKey = 'boatName';
  static const _vesselTypeKey = 'vesselType';
  static const _vesselLengthKey = 'vesselLength';
  static const _vesselDescriptionKey = 'vesselDescription';
  static const _soulsAdultsKey = 'soulsAdults';
  static const _soulsChildrenKey = 'soulsChildren';
  static const _mmsiKey = 'mmsi';
  static const _emergencyContactKey = 'emergencyContact';
  static const _captainPhoneKey = 'captainPhone';
  static const _emergencyReminderEnabledKey = 'emergencyReminderEnabled';

  static Future<void> setGPSDisplayFormat(GPSDisplayFormat format) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_gpsFormatKey, format.index);
  }

  static Future<GPSDisplayFormat> getGPSDisplayFormat() async {
    final prefs = await SharedPreferences.getInstance();
    final index = prefs.getInt(_gpsFormatKey);
    return GPSDisplayFormat.values[index ?? 0]; // Default: marineCompact
  }

  // Emergency Info Reminder
  static Future<bool> getEmergencyReminderEnabled() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_emergencyReminderEnabledKey) ?? true;
  }

  static Future<void> setEmergencyReminderEnabled(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_emergencyReminderEnabledKey, value);
  }

  // Boat Info
  static Future<String> getBoatName() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_boatNameKey) ?? '';
  }

  static Future<void> setBoatName(String name) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_boatNameKey, name);
  }

  static Future<String> getVesselType() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselTypeKey) ?? '';
  }

  static Future<void> setVesselType(String type) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselTypeKey, type);
  }

  static Future<String> getVesselLength() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselLengthKey) ?? '';
  }

  static Future<void> setVesselLength(String length) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselLengthKey, length);
  }

  static Future<String> getVesselDescription() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselDescriptionKey) ?? '';
  }

  static Future<void> setVesselDescription(String description) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselDescriptionKey, description);
  }

  static Future<int> getSoulsAdults() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(_soulsAdultsKey) ?? 0;
  }

  static Future<void> setSoulsAdults(int count) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_soulsAdultsKey, count);
  }

  static Future<int> getSoulsChildren() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(_soulsChildrenKey) ?? 0;
  }

  static Future<void> setSoulsChildren(int count) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_soulsChildrenKey, count);
  }

  static Future<String> getMMSI() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_mmsiKey) ?? '';
  }

  static Future<void> setMMSI(String mmsi) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_mmsiKey, mmsi);
  }

  static Future<String> getEmergencyContact() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_emergencyContactKey) ?? '';
  }

  static Future<void> setEmergencyContact(String phone) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_emergencyContactKey, phone);
  }

  static Future<String> getCaptainPhone() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_captainPhoneKey) ?? '';
  }

  static Future<void> setCaptainPhone(String phone) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_captainPhoneKey, phone);
  }

  static const _emergencyInfoReviewedKey = 'emergencyInfoReviewedAt';

  static Future<String?> getEmergencyInfoReviewedAt() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_emergencyInfoReviewedKey);
  }

  static Future<void> setEmergencyInfoReviewedNow() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now().toIso8601String();
    await prefs.setString(_emergencyInfoReviewedKey, now);
  }

  static Future<void> clearEmergencyInfoReviewed() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_emergencyInfoReviewedKey);
  }

  static Future<String> getUnitPreference() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('unitPreference') ?? 'feet'; // default to feet
  }
}










File: lib/utils/resume_manager.dart
import 'package:bcc5/utils/logger.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ResumeManager {
  static const String _prefix = 'resume_';
  static const String _keyPathName = 'resume_path_name';
  static const String _keyChapterId = 'resume_chapter_id';
  static const String _keyItemId = 'resume_item_id';

  static Future<void> saveProgress({
    required String pathName,
    required String chapterId,
    required String itemId,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    final value = '$chapterId|$itemId';
    await prefs.setString(key, value);
  }

  static Future<(String chapterId, String itemId)?> getProgress(
    String pathName,
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    final value = prefs.getString(key);
    if (value == null) return null;

    final parts = value.split('|');
    if (parts.length != 2) return null;

    return (parts[0], parts[1]); // chapterId, itemId
  }

  static Future<void> clearProgress(String pathName) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    await prefs.remove(key);
  }

  static Future<void> clearResumePoint() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_keyPathName);
    await prefs.remove(_keyChapterId);
    await prefs.remove(_keyItemId);
  }

  static Future<void> saveResumePoint({
    required String pathName,
    required String chapterId,
    required String itemId,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_keyPathName, pathName);
    await prefs.setString(_keyChapterId, chapterId);
    await prefs.setString(_keyItemId, itemId);
    logger.i('üíæ Saved resume point ‚Üí $pathName / $chapterId / $itemId');
  }

  static Future<Map<String, String>?> getResumePoint() async {
    final prefs = await SharedPreferences.getInstance();

    final pathName = prefs.getString(_keyPathName);
    final chapterId = prefs.getString(_keyChapterId);
    final itemId = prefs.getString(_keyItemId);

    if (pathName == null || chapterId == null || itemId == null) {
      return null;
    }

    return {'pathName': pathName, 'chapterId': chapterId, 'itemId': itemId};
  }
}










File: lib/utils/render_item_helpers.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/utils/logger.dart';

List<RenderItem> buildRenderItems({required List<String> ids}) {
  // if (ids.length > 2) {
  //   logger.d('[Render] ${ids.length} item IDs: $ids');
  // }
  final items = <RenderItem>[];
  final invalidIds = <String>[];

  for (final id in ids) {
    final item = getContentObject(id);
    if (item != null) {
      // logger.d('‚úÖ Built RenderItem ‚Üí id: ${item.id}, type: ${item.type}');
      items.add(item);
    } else {
      logger.w('‚ùå Failed to resolve RenderItem for id: $id');
      invalidIds.add(id);
    }
  }

  if (invalidIds.isNotEmpty) {
    logger.w('‚ö†Ô∏è Invalid RenderItem IDs: $invalidIds');
  }

  return items;
}

RenderItem? getContentObject(String id) {
  if (id.startsWith('lesson_')) {
    final lesson = LessonRepositoryIndex.getLessonById(id);
    if (lesson != null) {
      return RenderItem(
        type: RenderItemType.lesson,
        id: lesson.id,
        title: lesson.title,
        content: lesson.content,
        flashcards: lesson.flashcards,
      );
    }
  }

  if (id.startsWith('part_')) {
    final part = PartRepositoryIndex.getPartById(id);
    if (part != null) {
      return RenderItem(
        type: RenderItemType.part,
        id: part.id,
        title: part.title,
        content: part.content,
        flashcards: part.flashcards,
      );
    }
  }

  if (id.startsWith('tool_')) {
    final tool = ToolRepositoryIndex.getToolById(id);
    if (tool != null) {
      return RenderItem(
        type: RenderItemType.tool,
        id: tool.id,
        title: tool.title,
        content: tool.content,
        flashcards: tool.flashcards,
      );
    }
  }

  if (id.startsWith('flashcard_')) {
    final flashcard =
        LessonRepositoryIndex.getFlashcardById(id) ??
        PartRepositoryIndex.getFlashcardById(id) ??
        ToolRepositoryIndex.getFlashcardById(id);

    if (flashcard != null) {
      return RenderItem(
        type: RenderItemType.flashcard,
        id: flashcard.id,
        title: flashcard.title,
        content: flashcard.sideA + ContentBlock.dividerList() + flashcard.sideB,
        flashcards: [flashcard],
      );
    }
  }

  logger.w('‚ùå getContentObject ‚Üí no match for id: $id');
  return null;
}










File: lib/utils/string_extensions.dart
extension TitleCaseExtension on String {
  String toTitleCase() {
    return split(' ')
        .map(
          (word) =>
              word.isEmpty
                  ? word
                  : word[0].toUpperCase() + word.substring(1).toLowerCase(),
        )
        .join(' ');
  }
}










File: lib/screens/tools/tool_bag_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:go_router/go_router.dart';

class ToolBagScreen extends StatelessWidget {
  ToolBagScreen({super.key});

  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final toolbags = ToolRepositoryIndex.getToolbagNames();
    logger.i('üü¶ Displaying ToolsScreen');

    return Stack(
      fit: StackFit.expand,
      children: [
        // AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Tools',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),
        Positioned(
          top: appBarOffset + 26,
          left: 16,
          right: 16,
          child: Text(
            'Tool Bags',
            style: AppTheme.branchBreadcrumbStyle,
            textAlign: TextAlign.left,
          ),
        ),

        // "Choose a Toolbag" title
        Positioned(
          top: appBarOffset + 48,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Which toolbag do you need?',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // Button list
        Positioned.fill(
          top: appBarOffset + 100,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: ListView.builder(
              itemCount: toolbags.length,
              itemBuilder: (context, index) {
                final toolbag = toolbags[index];
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: GroupButton(
                    label: toolbag.toTitleCase(),
                    onTap: () {
                      logger.d('üõ†Ô∏è Selected toolbag: $toolbag');

                      final tools = ToolRepositoryIndex.getToolsForBag(toolbag);
                      final renderItems = buildRenderItems(
                        ids: tools.map((tool) => tool.id).toList(),
                      );

                      if (renderItems.isEmpty) {
                        logger.w(
                          '‚ö†Ô∏è No tools found in selected toolbag: $toolbag',
                        );
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('No tools found in this toolbag.'),
                          ),
                        );
                        return;
                      }

                      // ‚úÖ This is the fix: navigate to ToolItemScreen
                      context.push(
                        '/tools/items',
                        extra: {
                          'toolbag': toolbag,
                          'transitionKey':
                              'tool_items_${toolbag}_${DateTime.now().millisecondsSinceEpoch}',
                          'slideFrom': SlideDirection.right,
                          'transitionType': TransitionType.slide,
                          'detailRoute': DetailRoute.branch,
                        },
                      );
                    },
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_item_screen.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/screens/emergency/mob_emergency_screen.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:go_router/go_router.dart';

class ToolItemScreen extends StatefulWidget {
  final String toolbag;
  final bool cameFromMob;

  const ToolItemScreen({
    super.key,
    required this.toolbag,
    this.cameFromMob = false,
  });

  @override
  State<ToolItemScreen> createState() => _ToolItemScreenState();
}

class _ToolItemScreenState extends State<ToolItemScreen> {
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  void _handleBack() {
    if (widget.cameFromMob) {
      logger.i('üîô Back to MOBEmergencyScreen (cameFromMob = true)');
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          fullscreenDialog: true,
          builder: (_) => const MOBEmergencyScreen(),
        ),
      );
    } else if (Navigator.of(context).canPop()) {
      logger.i('üîô Back to previous screen via Navigator');
      Navigator.of(context).pop();
    } else {
      logger.i('üîô Back to ToolBagScreen (fallback)');
      context.go(
        '/tools',
        extra: {
          'transitionKey': UniqueKey().toString(),
          'slideFrom': SlideDirection.left,
          'transitionType': TransitionType.slide,
          'detailRoute': DetailRoute.branch,
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    // logger.i('üõ†Ô∏è ToolItemScreen loaded for toolbag: ${widget.toolbag}');

    return PopScope(
      canPop: !widget.cameFromMob,
      onPopInvokedWithResult: (didPop, _) {
        if (!didPop || widget.cameFromMob) {
          _handleBack(); // ‚¨ÖÔ∏è force fallback logic
        }
      },
      child: _buildContent(context),
    );
  }

  Widget _buildContent(BuildContext context) {
    final tools = ToolRepositoryIndex.getToolsForBag(widget.toolbag);
    final toolIds = tools.map((t) => t.id).toList();
    final renderItems = buildRenderItems(ids: toolIds);
    final toolbagTitle = widget.toolbag.toTitleCase();

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Tools',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: _handleBack,
        ),
        const SizedBox(height: 16),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Align(
            alignment: Alignment.centerLeft,
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: 'Tools',
                    style: AppTheme.branchBreadcrumbStyle,
                  ),
                  const TextSpan(
                    text: ' / ',
                    style: TextStyle(color: Colors.black87),
                  ),
                  TextSpan(
                    text: toolbagTitle,
                    style: AppTheme.groupBreadcrumbStyle,
                  ),
                ],
              ),
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          'Which ${toolbagTitle.replaceFirst(RegExp(r's$'), '')} would you like?',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: GridView.builder(
              itemCount: tools.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final tool = tools[index];
                return ItemButton(
                  label: tool.title,
                  onTap: () {
                    logger.i('üõ†Ô∏è Tapped tool: ${tool.id}');
                    TransitionManager.goToDetailScreen(
                      context: context,
                      screenType: RenderItemType.tool,
                      renderItems: renderItems,
                      currentIndex: index,
                      branchIndex: 3,
                      backDestination: '/tools/items',
                      backExtra: {
                        'toolbag': widget.toolbag,
                        'cameFromMob': widget.cameFromMob,
                        'fromNext': true,
                      },
                      detailRoute: DetailRoute.branch,
                      direction: SlideDirection.right,
                      transitionType: TransitionType.slide,
                      replace: false,
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_detail_screen.dart
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/widgets/navigation/last_group_button.dart';

class ToolDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const ToolDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<ToolDetailScreen> createState() => _ToolDetailScreenState();
}

class _ToolDetailScreenState extends State<ToolDetailScreen> {
  late int currentIndex;
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.tool) {
      logger.w('‚ö†Ô∏è Redirecting from non-tool type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
          replace: true, // ‚úÖ ensures redirect doesn‚Äôt stack
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];

    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra, // ‚úÖ Unchanged, clean
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale,
      replace: true, // ‚úÖ Still correct
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];
    // logger.d('[ToolDetail] AppBar keys assigned.');

    if (item.type != RenderItemType.tool) {
      return const Scaffold(body: SizedBox());
    }

    const toolbagTitle = 'Tools';
    final toolTitle = item.title;
    // final toolbagId = widget.backExtra?['toolbag'] as String?;

    // logger.d('[ToolDetail] Content blocks: ${item.content.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, toolTitle, toolbagTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String toolTitle,
    String toolbagTitle,
  ) {
    // final subtitleText = toolTitle;
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/navigation_lights.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: toolbagTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: mobKey,
                settingsKey: settingsKey,
                searchKey: searchKey,
                titleKey: titleKey,

                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');

                  if (Navigator.of(context).canPop()) {
                    Navigator.of(context).pop();
                  } else {
                    logger.w('‚ö†Ô∏è No pages left to pop. Redirecting manually.');
                    context.go(
                      widget.backDestination,
                      extra: {
                        ...?widget.backExtra,
                        'transitionKey': UniqueKey().toString(),
                        'slideFrom': SlideDirection.left,
                        'transitionType': TransitionType.slide,
                      },
                    );
                  }
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              /// the bottom of insert area
              Padding(
                padding: const EdgeInsets.only(top: 12.0),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text:
                                widget.detailRoute == DetailRoute.path
                                    ? (widget.backExtra?['pathName'] as String?)
                                            ?.toTitleCase() ??
                                        ''
                                    : 'Tools',
                            style: AppTheme.branchBreadcrumbStyle,
                          ),
                          const TextSpan(
                            text: ' / ',
                            style: TextStyle(color: Colors.black87),
                          ),
                          TextSpan(
                            text:
                                widget.detailRoute == DetailRoute.path
                                    ? PathRepositoryIndex.getChapterTitleForPath(
                                          widget.backExtra?['pathName'] ?? '',
                                          widget.backExtra?['chapterId'] ?? '',
                                        )?.toTitleCase() ??
                                        ''
                                    : (widget.backExtra?['toolbag'] as String?)
                                            ?.toTitleCase() ??
                                        '',
                            style: AppTheme.groupBreadcrumbStyle,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),

              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  toolTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on ToolDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on ToolDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
                customNextButton:
                    currentIndex == widget.renderItems.length - 1
                        ? LastGroupButton(
                          type: RenderItemType.tool,
                          detailRoute: widget.detailRoute,
                          backExtra: widget.backExtra,
                          branchIndex: widget.branchIndex,
                          backDestination:
                              widget.detailRoute == DetailRoute.path
                                  ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                  : '/tools/items',
                          label:
                              widget.detailRoute == DetailRoute.path
                                  ? 'chapter'
                                  : 'toolbag',
                          getNextRenderItems: () async {
                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final chapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              if (pathName == null || chapterId == null) {
                                return null;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    chapterId,
                                  );
                              if (nextChapter == null) return null;

                              return buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );
                            } else {
                              final currentToolbag =
                                  widget.backExtra?['toolbag'] as String?;
                              if (currentToolbag == null) return null;

                              final nextToolbag =
                                  ToolRepositoryIndex.getNextToolbag(
                                    currentToolbag,
                                  );
                              if (nextToolbag == null) return null;

                              final tools = ToolRepositoryIndex.getToolsForBag(
                                nextToolbag,
                              );
                              return buildRenderItems(
                                ids: tools.map((e) => e.id).toList(),
                              );
                            }
                          },
                          onNavigateToNextGroup: (renderItems) {
                            if (renderItems.isEmpty) return;

                            final isPath =
                                widget.detailRoute == DetailRoute.path;
                            final nextBackExtra = {
                              if (isPath)
                                'chapterId':
                                    PathRepositoryIndex.getNextChapter(
                                      widget.backExtra?['pathName'],
                                      widget.backExtra?['chapterId'],
                                    )?.id,
                              if (isPath)
                                'pathName': widget.backExtra?['pathName'],
                              if (!isPath)
                                'toolbag': ToolRepositoryIndex.getNextToolbag(
                                  widget.backExtra?['toolbag'],
                                ),
                              if (widget.backExtra?['cameFromMob'] == true)
                                'cameFromMob': true,
                              'branchIndex': widget.branchIndex,
                            };

                            final route =
                                isPath
                                    ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                    : '/tools/items';

                            TransitionManager.goToDetailScreen(
                              context: context,
                              screenType: RenderItemType.tool,
                              renderItems: renderItems,
                              currentIndex: 0,
                              branchIndex: widget.branchIndex,
                              backDestination: route,
                              backExtra: nextBackExtra,
                              detailRoute: widget.detailRoute,
                              direction: SlideDirection.right,
                              replace: true,
                            );
                          },
                          onRestartAtFirstGroup: () {
                            final isPath =
                                widget.detailRoute == DetailRoute.path;

                            if (isPath) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final firstChapter =
                                  pathName == null
                                      ? null
                                      : PathRepositoryIndex.getChaptersForPath(
                                        pathName,
                                      ).first;
                              if (pathName == null || firstChapter == null) {
                                return;
                              }

                              final renderItems = buildRenderItems(
                                ids:
                                    firstChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );

                              if (renderItems.isEmpty) return;

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.tool,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination:
                                    '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                backExtra: {
                                  'pathName': pathName,
                                  'chapterId': firstChapter.id,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            } else {
                              final firstToolbag =
                                  ToolRepositoryIndex.getToolbagNames().first;
                              final firstTools =
                                  ToolRepositoryIndex.getToolsForBag(
                                    firstToolbag,
                                  );
                              final renderItems = buildRenderItems(
                                ids: firstTools.map((e) => e.id).toList(),
                              );

                              if (renderItems.isEmpty) return;

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.tool,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/tools/items',
                                backExtra: {
                                  'toolbag': firstToolbag,
                                  'branchIndex': widget.branchIndex,
                                  if (widget.backExtra?['cameFromMob'] == true)
                                    'cameFromMob': true,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            }
                          },
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_detail_screen.dart
import 'dart:math' as math;
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/flip_card_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';

import 'package:bcc5/widgets/navigation/last_group_button.dart';

class FlashcardDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const FlashcardDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<FlashcardDetailScreen> createState() => _FlashcardDetailScreenState();
}

class _FlashcardDetailScreenState extends State<FlashcardDetailScreen>
    with SingleTickerProviderStateMixin {
  late int currentIndex;
  late AnimationController _controller;
  late Animation<double> _flipAnimation;
  bool showFront = true;

  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    if (widget.renderItems.isEmpty) {
      logger.e('‚ùå FlashcardDetailScreen received empty renderItems');
    } else {
      final item = widget.renderItems[currentIndex];
      logger.i(
        'üü© FlashcardDetailScreen Loaded:\n'
        '  ‚îú‚îÄ index: $currentIndex\n'
        '  ‚îú‚îÄ id: ${item.id}\n'
        '  ‚îú‚îÄ type: ${item.type}\n'
        '  ‚îú‚îÄ renderItems.length: ${widget.renderItems.length}\n'
        '  ‚îú‚îÄ branchIndex: ${widget.branchIndex}\n'
        '  ‚îú‚îÄ backDestination: ${widget.backDestination}\n'
        '  ‚îî‚îÄ backExtra: ${widget.backExtra}',
      );

      if (item.type != RenderItemType.flashcard) {
        logger.w(
          '‚ö†Ô∏è Redirecting from non-flashcard type: ${item.id} (${item.type})',
        );
        WidgetsBinding.instance.addPostFrameCallback((_) {
          TransitionManager.goToDetailScreen(
            context: context,
            screenType: item.type,
            renderItems: widget.renderItems,
            currentIndex: currentIndex,
            branchIndex: widget.branchIndex,
            backDestination: widget.backDestination,
            backExtra: widget.backExtra,
            detailRoute: widget.detailRoute,
            direction: SlideDirection.none,
            replace: true,
          );
        });
      }
    }

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );

    _flipAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOut));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void flipCard() {
    logger.i(showFront ? 'üîÉ Flipping to back' : 'üîÉ Flipping to front');
    setState(() {
      showFront = !showFront;
      _controller.isCompleted || _controller.velocity > 0
          ? _controller.reverse()
          : _controller.forward();
    });
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚õî Invalid navigation attempt: $newIndex');
      return;
    }

    final target = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: target.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale,
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.renderItems.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.flashcard || item.flashcards.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final flashcard = item.flashcards.first;
    final title = flashcard.title;
    final sideA = flashcard.sideA;
    final sideB = flashcard.sideB;
    const categoryTitle = 'Drills';
    // final categoryId = widget.backExtra?['category'] as String?;

    // logger.i(
    //   'üñºÔ∏è Rendering Flashcard:\n'
    //   '  ‚îú‚îÄ title: $title\n'
    //   '  ‚îú‚îÄ sideA: ${sideA.length} blocks\n'
    //   '  ‚îî‚îÄ sideB: ${sideB.length} blocks',
    // );

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/sailboat_cartoon.jpg',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: categoryTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: mobKey,
                settingsKey: settingsKey,
                searchKey: searchKey,
                titleKey: titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide,
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              const SizedBox(height: 12),
              Align(
                alignment: Alignment.centerLeft,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  child: RichText(
                    text: TextSpan(
                      children: [
                        TextSpan(
                          text:
                              widget.detailRoute == DetailRoute.path
                                  ? (widget.backExtra?['pathName'] as String?)
                                          ?.toTitleCase() ??
                                      ''
                                  : 'Drills',
                          style: AppTheme.branchBreadcrumbStyle,
                        ),
                        const TextSpan(
                          text: ' / ',
                          style: TextStyle(color: Colors.black87),
                        ),
                        TextSpan(
                          text:
                              widget.detailRoute == DetailRoute.path
                                  ? PathRepositoryIndex.getChapterTitleForPath(
                                        widget.backExtra?['pathName'] ?? '',
                                        widget.backExtra?['chapterId'] ?? '',
                                      )?.toTitleCase() ??
                                      ''
                                  : (widget.backExtra?['category'] as String?)
                                          ?.toTitleCase() ??
                                      '',
                          style: AppTheme.groupBreadcrumbStyle,
                        ),
                      ],
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 4),
              Text(
                title,
                style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                  color: AppTheme.primaryBlue,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),

              const SizedBox(height: 12),
              Expanded(
                child: Center(
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      Image.asset(
                        'assets/images/index_card.png',
                        width: 360,
                        height: 420,
                        fit: BoxFit.fill,
                      ),
                      SizedBox(
                        width: 360,
                        height: 420,
                        child: AnimatedBuilder(
                          animation: _flipAnimation,
                          builder: (context, child) {
                            final isFront = _flipAnimation.value < 0.5;
                            return Transform(
                              alignment: Alignment.center,
                              transform: Matrix4.rotationY(
                                _flipAnimation.value * math.pi,
                              ),
                              child:
                                  isFront
                                      ? Padding(
                                        padding: const EdgeInsets.only(top: 32),
                                        child: FlipCardWidget(
                                          front: sideA,
                                          back: sideB,
                                          showFront: true,
                                          animation: _flipAnimation,
                                        ),
                                      )
                                      : Transform(
                                        alignment: Alignment.center,
                                        transform: Matrix4.rotationY(math.pi),
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                            top: 32,
                                          ),
                                          child: FlipCardWidget(
                                            front: sideA,
                                            back: sideB,
                                            showFront: false,
                                            animation: _flipAnimation,
                                          ),
                                        ),
                                      ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: ElevatedButton(
                  onPressed: flipCard,
                  style: AppTheme.navigationButton,
                  child: Text(showFront ? 'Flip Over' : 'Flip Back'),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () => _navigateTo(currentIndex - 1),
                onNext: () => _navigateTo(currentIndex + 1),
                customNextButton:
                    currentIndex == widget.renderItems.length - 1
                        ? LastGroupButton(
                          type: RenderItemType.flashcard,
                          detailRoute: widget.detailRoute,
                          backExtra: widget.backExtra,
                          branchIndex: widget.branchIndex,
                          backDestination:
                              widget.detailRoute == DetailRoute.path
                                  ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                  : '/flashcards/items',
                          label:
                              widget.detailRoute == DetailRoute.path
                                  ? 'chapter'
                                  : 'category',
                          getNextRenderItems: () async {
                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final chapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              if (pathName == null || chapterId == null) {
                                return null;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    chapterId,
                                  );
                              if (nextChapter == null) return null;

                              return buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );
                            } else {
                              final currentCategory =
                                  widget.backExtra?['category'] as String?;
                              if (currentCategory == null) return null;

                              final nextCategory = getNextCategory(
                                currentCategory,
                              );
                              if (nextCategory == null) return null;

                              final nextFlashcards = getFlashcardsForCategory(
                                nextCategory,
                              );
                              if (nextFlashcards.isEmpty) return [];

                              return nextFlashcards
                                  .map(RenderItem.fromFlashcard)
                                  .toList();
                            }
                          },
                          onNavigateToNextGroup: (renderItems) {
                            if (renderItems.isEmpty) return;

                            final isPath =
                                widget.detailRoute == DetailRoute.path;
                            final route =
                                isPath
                                    ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                    : '/flashcards/items';

                            final backExtra = {
                              if (isPath)
                                'chapterId':
                                    PathRepositoryIndex.getNextChapter(
                                      widget.backExtra?['pathName'],
                                      widget.backExtra?['chapterId'],
                                    )?.id,
                              if (isPath)
                                'pathName': widget.backExtra?['pathName'],
                              if (!isPath)
                                'category': getNextCategory(
                                  widget.backExtra?['category'],
                                ),
                              'branchIndex': widget.branchIndex,
                            };

                            TransitionManager.goToDetailScreen(
                              context: context,
                              screenType: RenderItemType.flashcard,
                              renderItems: renderItems,
                              currentIndex: 0,
                              branchIndex: widget.branchIndex,
                              backDestination: route,
                              backExtra: backExtra,
                              detailRoute: widget.detailRoute,
                              direction: SlideDirection.right,
                              replace: true,
                            );
                          },
                          onRestartAtFirstGroup: () {
                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final firstChapter =
                                  pathName == null
                                      ? null
                                      : PathRepositoryIndex.getChaptersForPath(
                                        pathName,
                                      ).first;

                              if (pathName == null || firstChapter == null) {
                                return;
                              }

                              final renderItems = buildRenderItems(
                                ids:
                                    firstChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );

                              if (renderItems.isEmpty) return;

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.flashcard,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination:
                                    '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                backExtra: {
                                  'chapterId': firstChapter.id,
                                  'pathName': pathName,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            } else {
                              final firstCategory = getAllCategories().first;
                              final firstFlashcards = getFlashcardsForCategory(
                                firstCategory,
                              );
                              final renderItems =
                                  firstFlashcards
                                      .map((f) => RenderItem.fromFlashcard(f))
                                      .toList();

                              if (renderItems.isEmpty) return;

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.flashcard,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/flashcards/items',
                                backExtra: {
                                  'category': firstCategory,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            }
                          },
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_category_screen.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';

class FlashcardCategoryScreen extends StatelessWidget {
  const FlashcardCategoryScreen({super.key});

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    logger.i('üü¶ Entered FlashcardCategoryScreen');

    final categories = getAllCategories();
    final sorted = [
      ...categories.where((c) => c == 'all' || c == 'random'),
      ...categories.where((c) => c != 'all' && c != 'random'),
    ];
    // logger.i('üìá Sorted flashcard categories: $sorted');

    // üîë Internally managed GlobalKeys
    final mobKey = GlobalKey(debugLabel: 'MOBKey');
    final settingsKey = GlobalKey(debugLabel: 'SettingsKey');
    final searchKey = GlobalKey(debugLabel: 'SearchKey');
    final titleKey = GlobalKey(debugLabel: 'TitleKey');

    return Stack(
      fit: StackFit.expand,
      children: [
        // AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Drills',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),

        // üîΩ Breadcrumb: Insert right here
        const Positioned(
          top: appBarOffset + 30,
          left: 16,
          right: 16,
          child: Text(
            'Drills',
            style: AppTheme.branchBreadcrumbStyle,
            textAlign: TextAlign.left,
          ),
        ),

        // Instruction text
        Positioned(
          top: appBarOffset + 32,
          left: 62,
          right: 62,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 2),
            decoration: BoxDecoration(
              color: Colors.white.withAlpha(217),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Pick a Challenge!',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // Category buttons
        Positioned.fill(
          top: appBarOffset + 100,
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Center(
              child: Wrap(
                spacing: 12,
                runSpacing: 12,
                children:
                    sorted.map((category) {
                      final isSpecial =
                          category == 'all' || category == 'random';
                      final style =
                          isSpecial
                              ? AppTheme.highlightedGroupButtonStyle
                              : ElevatedButton.styleFrom(
                                backgroundColor: AppTheme.groupButtonUnselected,
                                padding: AppTheme.groupButtonPadding,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(
                                    AppTheme.buttonCornerRadius,
                                  ),
                                ),
                              );

                      return SizedBox(
                        width: 160,
                        child: ElevatedButton(
                          onPressed: () {
                            logger.i('üü• Tapped flashcard category: $category');

                            final flashcards = getFlashcardsForCategory(
                              category,
                            );
                            if (flashcards.isEmpty) {
                              logger.w(
                                '‚ö†Ô∏è No flashcards found in category: $category',
                              );
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                    'No flashcards found in this category.',
                                  ),
                                ),
                              );
                              return;
                            }

                            final renderItems =
                                flashcards
                                    .map(RenderItem.fromFlashcard)
                                    .toList();

                            context.push(
                              '/flashcards/detail',
                              extra: {
                                'renderItems': renderItems,
                                'currentIndex': 0,
                                'branchIndex': 4,
                                'backDestination': '/flashcards',
                                'backExtra': {
                                  'category': category,
                                  'branchIndex': 4,
                                },
                                'transitionKey':
                                    'flashcards_detail_${category}_${DateTime.now().millisecondsSinceEpoch}',
                                'slideFrom': SlideDirection.right,
                                'transitionType': TransitionType.slide,
                                'detailRoute': DetailRoute.branch,
                              },
                            );
                          },
                          style: style,
                          child: Text(
                            category.toTitleCase(),
                            style: AppTheme.buttonTextStyle,
                            textAlign: TextAlign.center,
                          ),
                        ),
                      );
                    }).toList(),
              ),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/flashcards/flashcard_item_screen.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class FlashcardItemScreen extends StatelessWidget {
  final String category;

  const FlashcardItemScreen({super.key, required this.category});

  @override
  Widget build(BuildContext context) {
    final mobKey = GlobalKey(debugLabel: 'MOBKey');
    final settingsKey = GlobalKey(debugLabel: 'SettingsKey');
    final searchKey = GlobalKey(debugLabel: 'SearchKey');
    final titleKey = GlobalKey(debugLabel: 'TitleKey');

    logger.i('üü¶ Entered FlashcardItemScreen for category: $category');

    final flashcards = getFlashcardsForCategory(category);
    final renderItems = buildRenderItems(
      ids: flashcards.map((fc) => fc.id).toList(),
    );
    final categoryTitle = category.toTitleCase();

    final appBar = CustomAppBarWidget(
      title: 'Drills',
      showBackButton: true,
      showSearchIcon: true,
      showSettingsIcon: true,
      mobKey: mobKey,
      settingsKey: settingsKey,
      searchKey: searchKey,
      titleKey: titleKey,
      onBack: () {
        logger.i('üîô AppBar back from FlashcardItemScreen');
        context.go(
          '/flashcards',
          extra: {
            'slideFrom': SlideDirection.left,
            'transitionType': TransitionType.slide,
            'detailRoute': DetailRoute.branch,
          },
        );
      },
    );

    if (flashcards.isEmpty) {
      return MainScaffold(
        branchIndex: 4,
        child: Column(
          children: [
            appBar,
            const Expanded(
              child: Center(
                child: Text('No flashcards found for this category.'),
              ),
            ),
          ],
        ),
      );
    }

    return MainScaffold(
      branchIndex: 4,
      child: Column(
        children: [
          appBar,
          const SizedBox(height: 16),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            child: Align(
              alignment: Alignment.centerLeft,
              child: RichText(
                text: TextSpan(
                  children: [
                    TextSpan(
                      text: 'Drills',
                      style: AppTheme.branchBreadcrumbStyle,
                    ),
                    const TextSpan(
                      text: ' / ',
                      style: TextStyle(color: Colors.black87),
                    ),
                    TextSpan(
                      text: categoryTitle,
                      style: AppTheme.groupBreadcrumbStyle,
                    ),
                  ],
                ),
              ),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Dive into a challenge.',
            style: AppTheme.subheadingStyle.copyWith(
              color: AppTheme.primaryBlue,
            ),
            textAlign: TextAlign.center,
          ),

          const SizedBox(height: 16),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: GridView.builder(
                itemCount: flashcards.length,
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  crossAxisSpacing: 4,
                  mainAxisSpacing: 4,
                  childAspectRatio: 2.8,
                ),
                itemBuilder: (context, index) {
                  final card = flashcards[index];
                  logger.i('üìó Rendering flashcard: ${card.title}');

                  return ItemButton(
                    label: card.title,
                    onTap: () {
                      logger.i('üüß Tapped flashcard: ${card.title}');
                      TransitionManager.goToDetailScreen(
                        context: context,
                        screenType: RenderItemType.flashcard,
                        renderItems: renderItems,
                        currentIndex: index,
                        branchIndex: 4,
                        backDestination: '/flashcards/items',
                        backExtra: {'category': category, 'branchIndex': 4},
                        detailRoute: DetailRoute.branch,
                        direction: SlideDirection.right,
                        transitionType: TransitionType.slide,
                        replace: false,
                      );
                    },
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/screens/paths/path_item_screen.dart
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:go_router/go_router.dart';

class PathItemScreen extends StatefulWidget {
  final String pathName;
  final String chapterId;

  const PathItemScreen({
    super.key,
    required this.pathName,
    required this.chapterId,
  });

  @override
  State<PathItemScreen> createState() => _PathItemScreenState();
}

class _PathItemScreenState extends State<PathItemScreen> {
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  Widget build(BuildContext context) {
    logger.i(
      'üìò Building PathItemScreen for path "${widget.pathName}", chapter "${widget.chapterId}"',
    );

    final chapter = PathRepositoryIndex.getChapterById(
      widget.pathName,
      widget.chapterId,
    );

    if (chapter == null) {
      logger.e(
        '‚ùå Could not find chapter for id: "${widget.chapterId}" in path: "${widget.pathName}"',
      );
      return const Center(child: Text('Chapter not found'));
    }

    final sequenceIds = chapter.items.map((e) => e.pathItemId).toList();
    final renderItems = buildRenderItems(ids: sequenceIds);

    logger.i(
      'üü© Found chapter "${chapter.title}" with ${renderItems.length} items',
    );

    return Column(
      children: [
        CustomAppBarWidget(
          title: widget.pathName.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô Returning to PathChapterScreen');
            context.go(
              '/learning-paths/${widget.pathName.replaceAll(' ', '-').toLowerCase()}',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.path,
              },
            );
          },
        ),
        const SizedBox(height: 16),
        Text(
          chapter.title,
          style: AppTheme.headingStyle.copyWith(
            fontSize: 20,
            color: AppTheme.primaryBlue,
          ),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 8),
        Text(
          'Resume your voyage, or chart any path below.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: renderItems.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final renderItem = renderItems[index];
                // final id = renderItem.id;
                final title = renderItem.title;

                // logger.i('üì¶ Rendering button: $id ‚Üí "$title" (index $index)');

                return ItemButton(
                  label: title,
                  onTap: () {
                    logger.i('üü¶ Tapped PathItem ‚Üí $title');

                    TransitionManager.goToDetailScreen(
                      context: context,
                      screenType: renderItem.type,
                      renderItems: renderItems,
                      currentIndex: index,
                      branchIndex: 0,
                      backDestination:
                          '/learning-paths/${widget.pathName.replaceAll(' ', '-').toLowerCase()}/items',
                      backExtra: {
                        'pathName': widget.pathName,
                        'chapterId': widget.chapterId,
                      },
                      detailRoute: DetailRoute.path,
                      direction: SlideDirection.right,
                      transitionType: TransitionType.slide,
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/paths/path_chapter_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/resume_manager.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';

class PathChapterScreen extends StatefulWidget {
  final String pathName;

  const PathChapterScreen({super.key, required this.pathName});

  @override
  State<PathChapterScreen> createState() => _PathChapterScreenState();
}

class _PathChapterScreenState extends State<PathChapterScreen> {
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  Widget build(BuildContext context) {
    final pathName = widget.pathName;
    final chapters = PathRepositoryIndex.getChaptersForPath(pathName);
    final titles = PathRepositoryIndex.getChapterTitles(pathName);

    logger.i(
      'üü¢ Entered PathChapterScreen for "$pathName" with ${chapters.length} chapters',
    );

    return Column(
      children: [
        CustomAppBarWidget(
          title: pathName.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô Back tapped from PathChapterScreen');
            context.go(
              '/',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.path,
              },
            );
          },
        ),
        const SizedBox(height: 20),

        // üöÄ Set Sail and Resume
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              ElevatedButton(
                onPressed: () {
                  if (chapters.isEmpty) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('No chapters found for this path.'),
                      ),
                    );
                    return;
                  }

                  final firstChapter = chapters.first;
                  final renderItems = buildRenderItems(
                    ids: firstChapter.items.map((e) => e.pathItemId).toList(),
                  );

                  if (renderItems.isEmpty) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('This chapter has no items.'),
                      ),
                    );
                    return;
                  }

                  TransitionManager.goToDetailScreen(
                    context: context,
                    screenType: renderItems.first.type,
                    renderItems: renderItems,
                    currentIndex: 0,
                    branchIndex: 0,
                    backDestination:
                        '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                    backExtra: {
                      'pathName': pathName,
                      'chapterId': firstChapter.id,
                    },
                    detailRoute: DetailRoute.path,
                    direction: SlideDirection.right,
                  );
                },
                style: AppTheme.groupRedButtonStyle,
                child: const Text('Set sail on a new course'),
              ),
              const SizedBox(height: 12),
              ElevatedButton(
                onPressed: () async {
                  final resume = await ResumeManager.getResumePoint();

                  if (!context.mounted ||
                      resume == null ||
                      resume['pathName'] != pathName) {
                    if (context.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('No resume point for this path.'),
                        ),
                      );
                    }
                    return;
                  }

                  final chapter = PathRepositoryIndex.getChapterById(
                    pathName,
                    resume['chapterId']!,
                  );
                  if (!context.mounted) return;
                  if (chapter == null) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Saved chapter not found.')),
                    );
                    return;
                  }

                  final index = chapter.items.indexWhere(
                    (i) => i.pathItemId == resume['itemId'],
                  );
                  if (!context.mounted) return;
                  if (index == -1) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Saved item not found.')),
                    );
                    return;
                  }

                  final renderItems = buildRenderItems(
                    ids: chapter.items.map((e) => e.pathItemId).toList(),
                  );

                  TransitionManager.goToDetailScreen(
                    context: context,
                    screenType: renderItems[index].type,
                    renderItems: renderItems,
                    currentIndex: index,
                    branchIndex: 0,
                    backDestination:
                        '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                    backExtra: {
                      'pathName': pathName,
                      'chapterId': resume['chapterId']!,
                    },
                    detailRoute: DetailRoute.path,
                    direction: SlideDirection.right,
                  );
                },
                style: AppTheme.groupRedButtonStyle,
                child: const Text('Resume your voyage'),
              ),
            ],
          ),
        ),
        const SizedBox(height: 28),

        // üåä Chapter List
        if (titles.isEmpty)
          const Expanded(child: Center(child: Text('No chapters found.')))
        else
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: titles.length,
              separatorBuilder: (_, __) => const SizedBox(height: 12),
              itemBuilder: (_, index) {
                final title = titles[index];
                final chapter = chapters[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return GroupButton(
                  label: title,
                  onTap: () {
                    context.push(
                      '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                      extra: {
                        'pathName': pathName,
                        'chapterId': chapter.id,
                        'transitionKey': 'path_items_${chapter.id}_$timestamp',
                        'slideFrom': SlideDirection.right,
                        'transitionType': TransitionType.slide,
                        'detailRoute': DetailRoute.path,
                      },
                    );
                  },
                );
              },
            ),
          ),
      ],
    );
  }
}










File: lib/screens/emergency/mob_emergency_screen.dart
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/screens/emergency/mob_radio_script_modal.dart';
import 'package:bcc5/screens/tools/tool_item_screen.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/location_helper.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/settings_manager.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:bcc5/utils/radio_helper.dart';

class MOBEmergencyScreen extends StatefulWidget {
  const MOBEmergencyScreen({super.key});

  @override
  State<MOBEmergencyScreen> createState() => _MOBEmergencyScreenState();
}

class _MOBEmergencyScreenState extends State<MOBEmergencyScreen> {
  Position? _lockedPosition;
  late DateTime _timestamp;
  GPSDisplayFormat _format = GPSDisplayFormat.marineCompact;

  @override
  void initState() {
    super.initState();
    _timestamp = DateTime.now();
    _loadFormat();
    _lockInitialGPS();
  }

  void _lockInitialGPS() async {
    final pos = await getCurrentLocation();
    if (mounted) {
      setState(() => _lockedPosition = pos);
    }
  }

  void _loadFormat() async {
    final saved = await SettingsManager.getGPSDisplayFormat();
    if (mounted) setState(() => _format = saved);
  }

  void _setFormat(GPSDisplayFormat newFormat) {
    setState(() {
      _format = newFormat;
    });
  }

  void _showRadioScriptModal() async {
    final position = _lockedPosition;
    final lat = position?.latitude ?? 0;
    final lon = position?.longitude ?? 0;

    final gpsSpoken = formatGPSForRadio(lat, lon, _format);
    final intro = await buildPhoneticVesselIntro();
    final description = await buildSpokenVesselDescription();
    final mmsi = await SettingsManager.getMMSI();

    if (!mounted) return;

    WidgetsBinding.instance.addPostFrameCallback((_) {
      showDialog(
        context: context,
        builder:
            (_) => MOBRadioScriptModal(
              intro: intro,
              gpsSpoken: gpsSpoken,
              description: description,
              mmsi: mmsi,
            ),
      );
    });
  }

  void _showDSCInfoModal() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('üö® How to Use DSC'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'If your radio has a red ‚ÄúDistress‚Äù button:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 12),
                const Text(
                  '1. Lift the red safety cover.\n'
                  '2. Press and hold the button underneath for 5 seconds.\n'
                  '3. The radio will send your location, vessel info, and distress call digitally.\n\n'
                  'This can greatly speed up response time and notify nearby vessels as well.',
                ),
                const SizedBox(height: 16),
                ClipRRect(
                  borderRadius: BorderRadius.circular(6),
                  child: Image.asset(
                    'assets/images/DSC_radio.png',
                    fit: BoxFit.cover,
                  ),
                ),
              ],
            ),
          ),
          actions: [
            Padding(
              padding: const EdgeInsets.only(top: 12),
              child: SizedBox(
                height: 44,
                width: double.infinity,
                child: TextButton(
                  style: TextButton.styleFrom(
                    backgroundColor: AppTheme.primaryRed,
                    foregroundColor: Colors.white,
                    shape: const RoundedRectangleBorder(),
                    padding: EdgeInsets.zero,
                  ),
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close', style: TextStyle(fontSize: 16)),
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    logger.i('üö® MOB Emergency Screen opened');

    final formattedTime = _timestamp.toLocal().toString().split('.').first;

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: Colors.red.shade700,
        title: Row(
          children: [
            Icon(MdiIcons.lifebuoy, color: Colors.white, size: 32),
            const SizedBox(width: 12),
            const Text(
              'Man Overboard!',
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.close, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
            tooltip: 'Close',
          ),
        ],
      ),
      body: Builder(
        builder: (context) {
          final position = _lockedPosition;
          String gpsText = 'Unavailable';

          if (position != null) {
            final lat = position.latitude;
            final lon = position.longitude;

            switch (_format) {
              case GPSDisplayFormat.marineCompact:
                gpsText =
                    '${formatToMarineCoord(lat, isLat: true)}   ${formatToMarineCoord(lon, isLat: false)}';
                break;
              case GPSDisplayFormat.decimal:
                gpsText =
                    '${lat.toStringAsFixed(5)}, ${lon.toStringAsFixed(5)}';
                break;
              case GPSDisplayFormat.marineFull:
                gpsText =
                    '${formatToMarineCoord(lat, isLat: true, full: true)}   ${formatToMarineCoord(lon, isLat: false, full: true)}';
                break;
            }
          }

          return Padding(
            padding: const EdgeInsets.all(20),
            child: ListView(
              children: [
                SelectableText(formattedTime),
                const SizedBox(height: 8),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // GPS Text ‚Äî expand first so it takes as much width as possible
                    Expanded(
                      child: SelectableText(
                        gpsText,
                        style: const TextStyle(fontSize: 16),
                      ),
                    ),

                    // Small spacing
                    const SizedBox(width: 4),

                    // Compact dropdown icon (right-aligned, minimal width)
                    ConstrainedBox(
                      constraints: const BoxConstraints(
                        minWidth: 0,
                        maxWidth: 32,
                      ),
                      child: PopupMenuButton<GPSDisplayFormat>(
                        tooltip: 'Change GPS format',
                        padding: EdgeInsets.zero,
                        onSelected: _setFormat,
                        icon: Icon(
                          Icons.arrow_drop_down,
                          color: AppTheme.primaryRed,
                          size: 30,
                        ),
                        itemBuilder:
                            (context) => const [
                              PopupMenuItem(
                                value: GPSDisplayFormat.marineCompact,
                                child: Text('DMM (Marine Style)'),
                              ),
                              PopupMenuItem(
                                value: GPSDisplayFormat.marineFull,
                                child: Text('DMS (Older Charts)'),
                              ),
                              PopupMenuItem(
                                value: GPSDisplayFormat.decimal,
                                child: Text('DD (Decimal)'),
                              ),
                            ],
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 10),
                const Text(
                  'Immediate Onboard Actions:',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                const Text('1. Shout "Man Overboard!" loudly and clearly.'),
                const Text('2. Assign a spotter to maintain visual contact.'),
                const Text('3. Throw flotation devices immediately.'),
                const Text('4. Press MOB on GPS/chartplotter if available.'),
                const Text(
                  '5. Ensure all onboard are wearing PFDs/life jackets.',
                ),
                const Text('6. Radio MAYDAY to Coast Guard.'),

                const SizedBox(height: 6),

                TextButton(
                  style: AppTheme.groupRedButtonStyle,
                  onPressed: _showRadioScriptModal,
                  child: const Text('Ch 16: Radio Script'),
                ),

                const SizedBox(height: 6),

                TextButton(
                  style: AppTheme.groupRedButtonStyle,
                  onPressed: _showDSCInfoModal,
                  child: const Text('DSC Use'),
                ),

                const SizedBox(height: 6),
                const Text(
                  'Continue Rescue:',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 12),
                const Text('7. Note wind and current direction.'),
                const Text(
                  '8. Maneuver vessel back to MOB under control (esp. sails).',
                ),
                const Text('9. Approach from downwind or leeward side.'),
                const Text(
                  '10. Retrieve crew using LifeSling, ladder, swim platform, etc.',
                ),
                const Text(
                  '11. Check injuries; administer first aid if needed.',
                ),
                const Text('12. Notify Coast Guard of status.'),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    OutlinedButton.icon(
                      onPressed: () async {
                        final newPos = await getCurrentLocation();
                        if (!mounted) return;
                        setState(() {
                          _timestamp = DateTime.now();
                          _lockedPosition = newPos;
                        });
                        logger.i(
                          'üìç GPS updated to: ${newPos?.latitude}, ${newPos?.longitude}',
                        );
                      },
                      icon: const Icon(Icons.gps_fixed),
                      label: const Text('Update GPS'),
                    ),
                    OutlinedButton.icon(
                      onPressed: () {
                        setState(() {
                          _lockedPosition = null;
                        });
                        logger.w('üóëÔ∏è GPS coordinate cleared by user.');
                      },
                      icon: const Icon(Icons.delete_forever),
                      label: const Text('Clear GPS'),
                    ),
                  ],
                ),
              ],
            ),
          );
        },
      ),

      bottomNavigationBar: Container(
        color: Colors.orange.shade700,
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20),
        child: SafeArea(
          child: SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange.shade700,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              onPressed: () {
                logger.i('üÜò Other Emergencies button tapped');
                Navigator.of(context).pop(); // ‚úÖ close MOB modal first

                WidgetsBinding.instance.addPostFrameCallback((_) {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder:
                          (_) => MainScaffold(
                            branchIndex: 3,
                            child: ToolItemScreen(
                              toolbag: 'procedures',
                              cameFromMob:
                                  true, // üåü ADDED ‚Äî signals ToolItemScreen to return to MOB
                            ),
                          ),
                    ),
                  );
                });
              },
              child: const Text(
                'Other Emergencies',
                style: TextStyle(
                  fontSize: 24,
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}










File: lib/screens/emergency/mob_radio_script_modal.dart
// üìÑ lib/screens/emergency/mob_radio_script_modal.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class MOBRadioScriptModal extends StatelessWidget {
  final String intro;
  final String gpsSpoken;
  final String description;
  final String mmsi;

  const MOBRadioScriptModal({
    super.key,
    required this.intro,
    required this.gpsSpoken,
    required this.description,
    required this.mmsi,
  });

  @override
  Widget build(BuildContext context) {
    final gpsLines = gpsSpoken.split('\n');

    return AlertDialog(
      title: const Text('Report MAYDAY to the Coast Guard: '),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Ensure radio is on channel 16, press and hold the microphone transmit button while speaking slowly and clearly the following:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),

            // üîä Step-by-step script
            SelectableText(
              '1. Mayday, Mayday, Mayday.\n\n'
              '2. $intro\n\n'
              '3. We have a man overboard at position:\n'
              '‚ÄÉ‚ÄÉ‚Ä¢ ${gpsLines[0]}\n'
              '‚ÄÉ‚ÄÉ‚Ä¢ ${gpsLines[1]}\n\n'
              '4. We are located near [SAY HELPFUL NEARBY LANDMARK IF YOU CAN], üìçe.g., ‚ÄòIn the north bay, two miles east of Pelican Rock.‚Äô\n\n'
              '5. $description\n\n'
              '6. We have four adults and one child onboard, all wearing life jackets.\n\n'
              '7. We need immediate assistance recovering the person in the water.\n\n'
              '8. Over. (LET GO of the microphone button)\n\n'
              '9. Wait for a response from the Coast Guard. If no response, repeat the message.',
              style: AppTheme.textTheme.bodyMedium,
            ),

            const SizedBox(height: 24),
            const Divider(thickness: 10), // separation line
            const SizedBox(height: 12),

            // üìå Optional Details Section
            const Text(
              'Optional Follow-Up Details',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              'You may offer and/or the Coast Guard may ask you about any other relevant details, such as :',
            ),
            const SizedBox(height: 6),
            const Text('- Any injuries onboard.'),
            const Text('- If any flares were fired.'),
            if (mmsi.trim().isNotEmpty) Text('- Your MMSI: ${mmsi.trim()}'),
            const Text(
              '- Typically, they will want to call you if there is cell service. Be prepared to provide your cell phone number. Remember to slowly and clearly.',
            ),
          ],
        ),
      ),
      actions: [
        Padding(
          padding: const EdgeInsets.only(top: 12),
          child: SizedBox(
            height: 44,
            width: double.infinity,
            child: TextButton(
              style: TextButton.styleFrom(
                backgroundColor: AppTheme.primaryRed,
                foregroundColor: Colors.white,
                shape: const RoundedRectangleBorder(),
                padding: EdgeInsets.zero,
              ),
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Close', style: TextStyle(fontSize: 16)),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/landing_screen/landing_screen_tour_wrapper.dart
import 'package:flutter/material.dart';
import 'landing_screen.dart';

class LandingScreenTourWrapper extends StatelessWidget {
  final bool showReminder;
  final GlobalKey harborKey;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  const LandingScreenTourWrapper({
    super.key,
    required this.showReminder,
    required this.harborKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        LandingScreen(
          showReminder: showReminder,
          harborKey: harborKey,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          bnbLessonsKey: GlobalKey(debugLabel: 'BNBLessonsKey'), // ‚úÖ
          bnbPartsKey: GlobalKey(debugLabel: 'BNBPartsKey'), // ‚úÖ
          bnbToolsKey: GlobalKey(debugLabel: 'BNBToolsKey'), // ‚úÖ
          bnbFlashcardsKey: GlobalKey(debugLabel: 'BNBFlashcardsKey'), // ‚úÖ
        ),
        // ‚úÖ Future overlay goes here (TourOverlayManager)
      ],
    );
  }
}










File: lib/screens/landing_screen/landing_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/widgets/settings_modal.dart';
import 'package:bcc5/widgets/tour/tour_controller.dart';
import 'package:bcc5/widgets/tour/tour_overlay_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';

class LandingScreen extends StatelessWidget {
  final bool showReminder;
  final GlobalKey harborKey;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;
  // üö© Add this to hold the controller
  final TourController _tourController = TourController(steps: []);

  // üö© GlobalKeys for onboarding tour steps
  final GlobalKey _keyAppBarTitle = GlobalKey();
  final GlobalKey _keyMOBButton = GlobalKey();
  final GlobalKey _keySettingsIcon = GlobalKey();
  final GlobalKey _keySearchIcon = GlobalKey();
  final GlobalKey _keyBNBLessons = GlobalKey(); // ‚úÖ
  final GlobalKey _keyBNBParts = GlobalKey(); // ‚úÖ
  final GlobalKey _keyBNBTools = GlobalKey(); // ‚úÖ
  final GlobalKey _keyBNBFlashcards = GlobalKey(); // ‚úÖ
  final GlobalKey bnbLessonsKey; // ‚úÖ
  final GlobalKey bnbPartsKey; // ‚úÖ
  final GlobalKey bnbToolsKey; // ‚úÖ
  final GlobalKey bnbFlashcardsKey; // ‚úÖ

  LandingScreen({
    super.key,
    required this.showReminder,
    required this.harborKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
    required this.bnbLessonsKey,
    required this.bnbPartsKey,
    required this.bnbToolsKey,
    required this.bnbFlashcardsKey,
  }) {
    logger.i('üìò [LandingScreen] Constructor called'); // ‚úÖ
  }

  @override
  Widget build(BuildContext context) {
    logger.i('üìò [LandingScreen] build() triggered'); // ‚úÖ

    if (showReminder) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        showDialog(
          context: context,
          builder:
              (_) => AlertDialog(
                title: const Text('Update Vessel Info'),
                content: const Text(
                  'Review your vessel info to ensure emergency details are up to date.',
                ),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text("Info is accurate"),
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                      showSettingsModal(context);
                    },
                    child: const Text("Update Now"),
                  ),
                ],
              ),
        );
      });
    }
    // ‚úÖ Tour steps in desired order
    _tourController.steps.clear();
    _tourController.steps.addAll([
      _keyAppBarTitle,
      _keyMOBButton,
      _keySettingsIcon,
      _keySearchIcon,
      _keyBNBLessons, // ‚úÖ
      _keyBNBParts, // ‚úÖ
      _keyBNBTools, // ‚úÖ
      _keyBNBFlashcards, // ‚úÖ
    ]);
    _tourController.addStep(
      id: 'newCrew',
      key: _tourController.getKeyForStep('newCrew'),
      description: 'Start your training here as a new crewmember.',
    ); // ‚úÖ

    _tourController.addStep(
      id: 'search',
      key: _keySearchIcon,
      description: 'Tap here to search lessons, tools, or flashcards.',
    ); // ‚úÖ

    _tourController.addStep(
      id: 'settings',
      key: _keySettingsIcon,
      description: 'Tap here to adjust your preferences and profile.',
    ); // ‚úÖ

    _tourController.addStep(
      id: 'mob',
      key: _keyMOBButton,
      description: 'In case of emergency, tap here to trigger the MOB alert.',
    ); // ‚úÖ

    _tourController.addStep(
      id: 'bnbLessons',
      key: _tourController.getKeyForStep('bnbLessons'),
      description: 'Tap here to explore safety lessons and core skills.',
    ); // ‚úÖ
    _tourController.addStep(
      id: 'bnbParts',
      key: _tourController.getKeyForStep('bnbParts'),
      description: 'Learn about the different parts of your boat.',
    ); // ‚úÖ
    _tourController.addStep(
      id: 'bnbTools',
      key: _tourController.getKeyForStep('bnbTools'),
      description: 'Find tools to help in common onboard situations.',
    ); // ‚úÖ
    _tourController.addStep(
      id: 'bnbFlashcards',
      key: _tourController.getKeyForStep('bnbFlashcards'),
      description: 'Drill important terms and concepts with flashcards.',
    ); // ‚úÖ

    return TourOverlayManager(
      highlightKey: _tourController.currentKey, // ‚úÖ
      onNext: _tourController.nextStep, // ‚úÖ
      onEnd: _tourController.endTour, // ‚úÖ
      child: Column(
        // ‚úÖ
        children: [
          CustomAppBarWidget(
            title: 'Welcome!',
            mobKey: _keyMOBButton,
            settingsKey: _keySettingsIcon,
            searchKey: _keySearchIcon,
            titleKey: _keyAppBarTitle,
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.only(
                top: 24,
                left: AppTheme.screenPadding,
                right: AppTheme.screenPadding,
                bottom: 80,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // (Tour button, welcome message, etc. remain unchanged)

                  // üöÄ App Tour
                  Center(
                    child: ElevatedButton(
                      onPressed: () {
                        logger.i('üö© Tour Start button tapped');
                        _tourController
                            .reset(); // ‚úÖ This alone will trigger rebuild via notifyListeners()
                      },
                      style: AppTheme.whiteTextButton,
                      child: const Text('App Tour'),
                    ),
                  ),
                  const SizedBox(height: 10),

                  // üìò Welcome Message
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      "Welcome Aboard! Tap below to learn how to be safe, helpful, and enjoy your boating!",
                      style: AppTheme.subheadingStyle.copyWith(
                        color: AppTheme.primaryBlue,
                        fontStyle: FontStyle.italic,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 20),

                  // üß≠ New Crewmembers Button
                  ElevatedButton(
                    key: _tourController.getKeyForStep('newCrew'), // ‚úÖ

                    onPressed: () {
                      logger.i('üìò Navigating to Competent Crew Path');
                      context.go(
                        '/learning-paths/competent-crew',
                        extra: {
                          'slideFrom': SlideDirection.right,
                          'transitionType': TransitionType.slide,
                          'detailRoute': DetailRoute.path,
                          'mobKey': mobKey,
                          'settingsKey': settingsKey,
                          'searchKey': searchKey,
                          'titleKey': titleKey,
                        },
                      );
                    },
                    style: AppTheme.landingPrimaryButton,
                    child: const Text('New Crewmembers'),
                  ),

                  const SizedBox(height: 36),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      "More experienced and returning sailors might find some useful guided lessons in one of these advanced paths",
                      style: AppTheme.subheadingStyle.copyWith(
                        color: AppTheme.primaryBlue,
                        fontStyle: FontStyle.italic,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  const SizedBox(height: 16),

                  // üéØ Advanced Refresher Dropdown
                  Center(
                    child: PopupMenuButton<String>(
                      onSelected: (value) {
                        logger.i('üìò Navigating to $value');
                        context.go(
                          '/learning-paths/$value',
                          extra: {
                            'slideFrom': SlideDirection.right,
                            'transitionType': TransitionType.slide,
                            'detailRoute': DetailRoute.path,
                            'mobKey': mobKey,
                            'settingsKey': settingsKey,
                            'searchKey': searchKey,
                            'titleKey': titleKey,
                          },
                        );
                      },
                      itemBuilder:
                          (context) => const [
                            PopupMenuItem(
                              value: 'knock-the-rust-off',
                              child: Text('Knock the Rust Off'),
                            ),
                            PopupMenuItem(
                              value: 'docking',
                              child: Text('Docking'),
                            ),
                            PopupMenuItem(
                              value: 'transition-demo',
                              child: Text('Anchoring'),
                            ),
                          ],
                      child: Container(
                        constraints: const BoxConstraints(minWidth: 280),
                        padding: const EdgeInsets.symmetric(
                          vertical: 18,
                          horizontal: 32,
                        ),
                        decoration: BoxDecoration(
                          color: AppTheme.primaryRed,
                          borderRadius: BorderRadius.circular(
                            AppTheme.buttonCornerRadius,
                          ),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: const [
                            Text(
                              'Advanced Refreshers',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(width: 8),
                            Icon(Icons.arrow_drop_down, color: Colors.white),
                          ],
                        ),
                      ),
                    ),
                  ),

                  const SizedBox(height: 36),

                  // üìç Footer Hint
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: Text(
                      'Use the icons below to navigate to Self-Guided expeditions: Sailing Courses, Boat Parts, Guidance Tools, and Flashcard Drills.',
                      style: AppTheme.subheadingStyle.copyWith(
                        color: AppTheme.primaryBlue,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    ); // ‚úÖ
  }
}










File: lib/screens/parts/part_item_screen.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';

class PartItemScreen extends StatelessWidget {
  final String zone;

  const PartItemScreen({super.key, required this.zone});

  @override
  Widget build(BuildContext context) {
    final List<PartItem> filteredParts = PartRepositoryIndex.getPartsForZone(
      zone.toLowerCase(),
    );

    final List<String> sequenceIds = filteredParts.map((p) => p.id).toList();
    final List<RenderItem> renderItems = buildRenderItems(ids: sequenceIds);

    // logger.i('üü¶ Displaying PartItemScreen (Zone: $zone)');

    // üîë Local ownership of GlobalKeys
    final mobKey = GlobalKey(debugLabel: 'MOBKey');
    final settingsKey = GlobalKey(debugLabel: 'SettingsKey');
    final searchKey = GlobalKey(debugLabel: 'SearchKey');
    final titleKey = GlobalKey(debugLabel: 'TitleKey');

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Parts',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô AppBar back from PartItemScreen');
            context.go(
              '/parts',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.branch,
              },
            );
          },
        ),
        const SizedBox(height: 16),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Align(
            alignment: Alignment.centerLeft,
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: 'Parts',
                    style: AppTheme.branchBreadcrumbStyle,
                  ),
                  const TextSpan(
                    text: ' / ',
                    style: TextStyle(color: Colors.black87),
                  ),
                  TextSpan(
                    text: zone.toTitleCase(),
                    style: AppTheme.groupBreadcrumbStyle,
                  ),
                ],
              ),
            ),
          ),
        ),

        const SizedBox(height: 12),
        Text(
          'Choose a Part',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
        ),
        const SizedBox(height: 12),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: filteredParts.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final part = filteredParts[index];

                return ItemButton(
                  label: part.title,
                  onTap: () {
                    logger.i('üü• Tapped part: ${part.id}');
                    TransitionManager.goToDetailScreen(
                      context: context,
                      screenType: renderItems[index].type,
                      renderItems: renderItems,
                      currentIndex: index,
                      branchIndex: 2,
                      backDestination: '/parts/items',
                      backExtra: {'zone': zone},
                      detailRoute: DetailRoute.branch,
                      direction: SlideDirection.right,
                      transitionType: TransitionType.slide,
                      replace: false,
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/parts/temp.dart
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart'; // <-- required for DetailRoute

class PartItemScreen extends StatelessWidget {
  final String zone;

  const PartItemScreen({
    super.key,
    required this.zone,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    final List<PartItem> filteredParts = PartRepositoryIndex.getPartsForZone(
      zone.toLowerCase(),
    );

    final List<String> sequenceIds = filteredParts.map((p) => p.id).toList();

    logger.i('üü¶ Displaying PartItemScreen (Zone: $zone)');

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Parts',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô AppBar back from PartItemScreen');
            context.go(
              '/parts',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.branch,
              },
            );
          },
        ),
        const SizedBox(height: 16),
        Text(
          zone.toTitleCase(),
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 12),
        Text(
          'Choose a Part',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
        ),
        const SizedBox(height: 12),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: filteredParts.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final part = filteredParts[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: part.title,
                  onTap: () {
                    logger.i('üü• Tapped part: ${part.id}');
                    context.push(
                      '/parts/detail',
                      extra: {
                        'renderItems': buildRenderItems(ids: sequenceIds),
                        'currentIndex': index,
                        'branchIndex': 2,
                        'backDestination': '/parts/items',
                        'backExtra': {
                          'zone': zone,
                          'mobKey': mobKey,
                          'settingsKey': settingsKey,
                          'searchKey': searchKey,
                          'titleKey': titleKey,
                        },
                        'transitionKey': 'part_${part.id}_$timestamp',
                        'detailRoute': DetailRoute.branch,
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,

                        // ‚úÖ Add missing required keys for PartDetailScreen
                        'mobKey': mobKey,
                        'settingsKey': settingsKey,
                        'searchKey': searchKey,
                        'titleKey': titleKey,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/parts/part_detail_screen.dart
// PartDetailScreen.dart

// ‚úÖ No import changes needed
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:bcc5/widgets/navigation/last_group_button.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';

// import 'package:bcc5/widgets/end_of_group_modal.dart';

class PartDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const PartDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<PartDetailScreen> createState() => _PartDetailScreenState();
}

class _PartDetailScreenState extends State<PartDetailScreen> {
  late int currentIndex;

  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.part) {
      logger.w('‚ö†Ô∏è Redirecting from non-part type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
          replace: true,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale,
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.part) {
      return const Scaffold(body: SizedBox());
    }

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, item.title, 'Parts'),
    );
  }

  Widget _buildScaffold(RenderItem item, String partTitle, String zoneTitle) {
    // final zoneId = widget.backExtra?['zone'] as String?;

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/deck_parts_montage.webp',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: zoneTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: mobKey,
                settingsKey: settingsKey,
                searchKey: searchKey,
                titleKey: titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide,
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),
              Padding(
                padding: const EdgeInsets.only(top: 12.0),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: RichText(
                      text: TextSpan(
                        children: [
                          TextSpan(
                            text:
                                widget.detailRoute == DetailRoute.path
                                    ? (widget.backExtra?['pathName'] as String?)
                                            ?.toTitleCase() ??
                                        ''
                                    : 'Parts',
                            style: AppTheme.branchBreadcrumbStyle,
                          ),
                          const TextSpan(
                            text: ' / ',
                            style: TextStyle(color: Colors.black87),
                          ),
                          TextSpan(
                            text:
                                widget.detailRoute == DetailRoute.path
                                    ? PathRepositoryIndex.getChapterTitleForPath(
                                          widget.backExtra?['pathName'] ?? '',
                                          widget.backExtra?['chapterId'] ?? '',
                                        )?.toTitleCase() ??
                                        ''
                                    : (widget.backExtra?['zone'] as String?)
                                            ?.toTitleCase() ??
                                        '',
                            style: AppTheme.groupBreadcrumbStyle,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),

              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  partTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () => _navigateTo(currentIndex - 1),
                onNext: () => _navigateTo(currentIndex + 1),
                customNextButton:
                    (currentIndex == widget.renderItems.length - 1)
                        ? LastGroupButton(
                          type: RenderItemType.part,
                          detailRoute: widget.detailRoute,
                          backExtra: widget.backExtra,
                          branchIndex: widget.branchIndex,
                          backDestination:
                              widget.detailRoute == DetailRoute.path
                                  ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                  : '/parts/items',
                          label:
                              widget.detailRoute == DetailRoute.path
                                  ? 'chapter'
                                  : 'zone',
                          getNextRenderItems: () async {
                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final chapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              if (pathName == null || chapterId == null) {
                                return null;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    chapterId,
                                  );
                              if (nextChapter == null) return null;

                              return buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );
                            } else {
                              final currentZoneId =
                                  widget.backExtra?['zone'] as String?;
                              if (currentZoneId == null) return null;

                              final nextZoneId =
                                  PartRepositoryIndex.getNextZone(
                                    currentZoneId,
                                  );
                              if (nextZoneId == null) return null;

                              return buildRenderItems(
                                ids:
                                    PartRepositoryIndex.getPartsForZone(
                                      nextZoneId,
                                    ).map((e) => e.id).toList(),
                              );
                            }
                          },
                          onNavigateToNextGroup: (renderItems) {
                            if (renderItems.isEmpty) return;

                            final nextBackExtra = {
                              if (widget.detailRoute == DetailRoute.path)
                                'chapterId':
                                    PathRepositoryIndex.getNextChapter(
                                      widget.backExtra?['pathName'],
                                      widget.backExtra?['chapterId'],
                                    )?.id,
                              if (widget.detailRoute == DetailRoute.path)
                                'pathName': widget.backExtra?['pathName'],
                              if (widget.detailRoute == DetailRoute.branch)
                                'zone': PartRepositoryIndex.getNextZone(
                                  widget.backExtra?['zone'],
                                ),
                              'branchIndex': widget.branchIndex,
                            };

                            final route =
                                widget.detailRoute == DetailRoute.path
                                    ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}/items'
                                    : '/parts/items';

                            TransitionManager.goToDetailScreen(
                              context: context,
                              screenType: RenderItemType.part,
                              renderItems: renderItems,
                              currentIndex: 0,
                              branchIndex: widget.branchIndex,
                              backDestination: route,
                              backExtra: nextBackExtra,
                              detailRoute: widget.detailRoute,
                              direction: SlideDirection.right,
                              replace: true,
                            );
                          },
                          onRestartAtFirstGroup: () {
                            final firstZoneId =
                                PartRepositoryIndex.getZoneNames().first;
                            final firstItems =
                                PartRepositoryIndex.getPartsForZone(
                                  firstZoneId,
                                );
                            final renderItems = buildRenderItems(
                              ids: firstItems.map((p) => p.id).toList(),
                            );

                            if (renderItems.isEmpty) return;

                            TransitionManager.goToDetailScreen(
                              context: context,
                              screenType: RenderItemType.part,
                              renderItems: renderItems,
                              currentIndex: 0,
                              branchIndex: widget.branchIndex,
                              backDestination: '/parts/items',
                              backExtra: {
                                'zone': firstZoneId,
                                'branchIndex': widget.branchIndex,
                              },
                              detailRoute: widget.detailRoute,
                              direction: SlideDirection.right,
                              replace: true,
                            );
                          },
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/parts/part_zone_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';

class PartZoneScreen extends StatelessWidget {
  PartZoneScreen({super.key});

  // ‚úÖ Internal GlobalKeys (no longer passed via constructor)
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  final List<String> zones = const [
    'Sails',
    'Rigging',
    'Deck',
    'Interior',
    'Hull',
  ];

  final Map<String, Offset> zonePositions = const {
    'Deck': Offset(0.17, 0.57),
    'Hull': Offset(0.39, 0.69),
    'Rigging': Offset(0.6, 0.49),
    'Sails': Offset(0.32, 0.49),
    'Interior': Offset(0.7, 0.63),
  };

  final Map<String, String> zoneDescriptions = const {
    'Sails': 'Sails -- Harness the Wind',
    'Rigging': 'Rigging -- Manage the sails',
    'Deck': 'Deck -- Exterior working surface',
    'Interior': 'Interior -- Below-deck area',
    'Hull': 'Hull -- Body of the boat',
  };

  final double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;

    logger.i('üü© Displaying PartZoneScreen with layout polish');

    return Stack(
      fit: StackFit.expand,
      children: [
        // ‚õµ Background
        Opacity(
          opacity: 0.8,
          child: Image.asset(
            'assets/images/boat_overview_tall.png',
            fit: BoxFit.cover,
          ),
        ),

        // üîµ AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Parts',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),
        Positioned(
          top: appBarOffset + 32,
          left: 16,
          right: 16,
          child: Text('Parts', style: AppTheme.branchBreadcrumbStyle),
        ),

        // üß≠ Screen Instruction
        Positioned(
          top: appBarOffset + 52,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Where would you like to explore? Choose a zone that you are interested in to learn more about the parts of a boat.',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // üßæ Zone Legend Box
        Positioned(
          top: appBarOffset + 170,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children:
                  zones.map((zone) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2),
                      child: Text(
                        zoneDescriptions[zone]!,
                        textAlign: TextAlign.center,
                        style: AppTheme.textTheme.bodyLarge?.copyWith(
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    );
                  }).toList(),
            ),
          ),
        ),

        // üìç Positioned Zone Buttons
        ...zones.map((zone) {
          final offset = zonePositions[zone]!;
          final left = offset.dx * screenSize.width;
          final top = offset.dy * screenSize.height + appBarOffset;

          return Positioned(
            left: left,
            top: top,
            child: TextButton(
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 10,
                  vertical: 8,
                ),
                backgroundColor: AppTheme.groupButtonUnselected,
                foregroundColor: Colors.white,
                minimumSize: const Size(0, 40),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onPressed: () {
                logger.i('üü¶ Tapped zone: $zone');
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                context.push(
                  '/parts/items',
                  extra: {
                    'zone': zone,
                    'transitionKey':
                        'part_items_${zone.toLowerCase()}_$timestamp',
                    'slideFrom': SlideDirection.right,
                    'transitionType': TransitionType.slide,
                    'detailRoute': DetailRoute.branch,
                    // üö´ No GlobalKeys passed anymore
                  },
                );
              },
              child: Text(zone, style: const TextStyle(fontSize: 15)),
            ),
          );
        }),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_detail_screen.dart
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

import 'package:bcc5/widgets/navigation/last_group_button.dart';

class LessonDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const LessonDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<LessonDetailScreen> createState() => _LessonDetailScreenState();
}

class _LessonDetailScreenState extends State<LessonDetailScreen> {
  late int currentIndex;

  // üîê Local GlobalKeys preserved for onboarding tour targeting
  // Avoid relying on internal AppBar key generation in this screen
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey');
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey');
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey');
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey');

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.lesson) {
      logger.w(
        '‚ö†Ô∏è Redirecting from non-lesson type: ${item.id} (${item.type})',
      );
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
          replace: true,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final nextItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: nextItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale,
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.lesson) {
      return const Scaffold(body: SizedBox());
    }

    const moduleTitle = 'Courses';
    final lessonTitle = item.title;

    logger.i('üìò LessonDetailScreen: $lessonTitle');
    logger.i('üß© Content blocks: ${item.content.length}');
    logger.i('üß† Flashcards: ${item.flashcards.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, moduleTitle, lessonTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String moduleTitle,
    String lessonTitle,
  ) {
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/boat_overview_new.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: moduleTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: mobKey,
                settingsKey: settingsKey,
                searchKey: searchKey,
                titleKey: titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide,
                    },
                  );
                },
              ),

              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              Padding(
                padding: const EdgeInsets.only(
                  top: 8.0,
                  left: 16.0,
                  right: 16.0,
                ),
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: RichText(
                    text: TextSpan(
                      children: [
                        TextSpan(
                          text:
                              widget.detailRoute == DetailRoute.path
                                  ? (widget.backExtra?['pathName'] as String?)
                                          ?.toTitleCase() ??
                                      ''
                                  : 'Courses',
                          style: AppTheme.branchBreadcrumbStyle,
                        ),
                        const TextSpan(
                          text: ' / ',
                          style: TextStyle(color: Colors.black87),
                        ),
                        TextSpan(
                          text:
                              widget.detailRoute == DetailRoute.path
                                  ? PathRepositoryIndex.getChapterTitleForPath(
                                        widget.backExtra?['pathName'] ?? '',
                                        widget.backExtra?['chapterId'] ?? '',
                                      )?.toTitleCase() ??
                                      ''
                                  : (widget.backExtra?['module'] as String?)
                                          ?.toTitleCase() ??
                                      '',

                          style: AppTheme.groupBreadcrumbStyle,
                        ),
                      ],
                    ),
                  ),
                ),
              ),

              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  lessonTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),

              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on LessonDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  if (currentIndex < widget.renderItems.length - 1) {
                    logger.i('‚û°Ô∏è Next tapped on LessonDetailScreen');
                    _navigateTo(currentIndex + 1);
                  }
                },
                customNextButton:
                    (currentIndex == widget.renderItems.length - 1)
                        ? LastGroupButton(
                          type: RenderItemType.lesson,
                          detailRoute: widget.detailRoute,
                          backExtra: widget.backExtra,
                          branchIndex: widget.branchIndex,
                          backDestination:
                              widget.detailRoute == DetailRoute.path
                                  ? '/learning-paths/${(widget.backExtra?['pathName'] as String).replaceAll(' ', '-').toLowerCase()}'
                                  : '/lessons',
                          label:
                              widget.detailRoute == DetailRoute.path
                                  ? 'chapter'
                                  : 'module',
                          getNextRenderItems: () async {
                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final chapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              if (pathName == null || chapterId == null) {
                                return null;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    chapterId,
                                  );
                              if (nextChapter == null) return null;

                              return buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((e) => e.pathItemId)
                                        .toList(),
                              );
                            } else {
                              final currentModuleId =
                                  widget.backExtra?['module'] as String?;
                              if (currentModuleId == null) return null;

                              final nextModuleId =
                                  LessonRepositoryIndex.getNextModule(
                                    currentModuleId,
                                  );
                              if (nextModuleId == null) return null;

                              final nextLessons =
                                  LessonRepositoryIndex.getLessonsForModule(
                                    nextModuleId,
                                  );
                              return buildRenderItems(
                                ids: nextLessons.map((l) => l.id).toList(),
                              );
                            }
                          },
                          onNavigateToNextGroup: (renderItems) {
                            if (renderItems.isEmpty) return;

                            if (widget.detailRoute == DetailRoute.path) {
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;
                              final chapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              if (pathName == null || chapterId == null) return;

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    chapterId,
                                  );
                              if (nextChapter == null) return;

                              final route =
                                  '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items';

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.lesson,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: route,
                                backExtra: {
                                  'pathName': pathName,
                                  'chapterId': nextChapter.id,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            } else {
                              final nextModuleId =
                                  LessonRepositoryIndex.getNextModule(
                                    widget.backExtra?['module'],
                                  );
                              if (nextModuleId == null) return;

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.lesson,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/lessons/items',
                                backExtra: {
                                  'module': nextModuleId,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                                replace: true,
                              );
                            }
                          },
                          onRestartAtFirstGroup: () {
                            final firstModuleId =
                                LessonRepositoryIndex.getModuleNames().first;
                            final firstLessons =
                                LessonRepositoryIndex.getLessonsForModule(
                                  firstModuleId,
                                );
                            final renderItems = buildRenderItems(
                              ids: firstLessons.map((l) => l.id).toList(),
                            );

                            if (renderItems.isEmpty) return;

                            TransitionManager.goToDetailScreen(
                              context: context,
                              screenType: RenderItemType.lesson,
                              renderItems: renderItems,
                              currentIndex: 0,
                              branchIndex: widget.branchIndex,
                              backDestination: '/lessons/items',
                              backExtra: {
                                'module': firstModuleId,
                                'branchIndex': widget.branchIndex,
                              },
                              detailRoute: widget.detailRoute,
                              direction: SlideDirection.right,
                              replace: true,
                            );
                          },
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/lessons/lesson_item_screen.dart
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/navigation/detail_route.dart';

class LessonItemScreen extends StatelessWidget {
  final String module;

  const LessonItemScreen({super.key, required this.module});

  @override
  Widget build(BuildContext context) {
    // logger.i('üìò LessonItemScreen loaded for module: $module');

    final lessons = LessonRepositoryIndex.getLessonsForModule(module);
    final renderItems = buildRenderItems(
      ids: lessons.map((l) => l.id).toList(),
    );
    final moduleTitle = module.toTitleCase();

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Courses',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          onBack: () {
            logger.i('üîô Back tapped ‚Üí /lessons');
            context.go(
              '/lessons',
              extra: {
                'transitionKey':
                    'return_from_items_${DateTime.now().millisecondsSinceEpoch}',
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
              },
            );
          },
        ),

        // üß≠ Breadcrumb below AppBar
        Padding(
          padding: const EdgeInsets.only(top: 16.0, left: 16.0, right: 16.0),
          child: Align(
            alignment: Alignment.centerLeft,
            child: RichText(
              text: TextSpan(
                children: [
                  TextSpan(
                    text: 'Courses',
                    style: AppTheme.branchBreadcrumbStyle,
                  ),
                  const TextSpan(
                    text: ' / ',
                    style: TextStyle(color: Colors.black87),
                  ),
                  TextSpan(
                    text: moduleTitle,
                    style: AppTheme.groupBreadcrumbStyle,
                  ),
                ],
              ),
            ),
          ),
        ),

        const SizedBox(height: 16),
        Text(
          '$moduleTitle:\nDive in to any course below.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: GridView.builder(
              itemCount: lessons.length,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final lesson = lessons[index];
                return ItemButton(
                  label: lesson.title,
                  onTap: () {
                    logger.i('üìò Tapped lesson: ${lesson.id}');
                    TransitionManager.goToDetailScreen(
                      context: context,
                      screenType: renderItems[index].type,
                      renderItems: renderItems,
                      currentIndex: index,
                      branchIndex: 1,
                      backDestination: '/lessons/items',
                      backExtra: {
                        'module': module,
                        'branchIndex': 1,
                        'detailRoute': DetailRoute.branch,
                      },
                      detailRoute: DetailRoute.branch,
                      direction: SlideDirection.right,
                      transitionType: TransitionType.slide,
                      replace: false,
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_module_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart'; // ‚úÖ for toTitleCase

class LessonModuleScreen extends StatefulWidget {
  // ‚úÖ Converted to StatefulWidget
  const LessonModuleScreen({super.key});

  @override
  State<LessonModuleScreen> createState() => _LessonModuleScreenState(); // ‚úÖ
}

class _LessonModuleScreenState extends State<LessonModuleScreen> {
  // ‚úÖ These keys now belong to LessonModuleScreen
  final GlobalKey mobKey = GlobalKey(debugLabel: 'MOBKey'); // ‚úÖ
  final GlobalKey settingsKey = GlobalKey(debugLabel: 'SettingsKey'); // ‚úÖ
  final GlobalKey searchKey = GlobalKey(debugLabel: 'SearchKey'); // ‚úÖ
  final GlobalKey titleKey = GlobalKey(debugLabel: 'TitleKey'); // ‚úÖ

  @override
  Widget build(BuildContext context) {
    final moduleNames = LessonRepositoryIndex.getModuleNames();
    // logger.i('üü¶ Entered LessonModuleScreen');

    return Scaffold(
      appBar: CustomAppBarWidget(
        title: 'Courses',
        showBackButton: false,
        showSearchIcon: true,
        showSettingsIcon: true,
        mobKey: mobKey,
        settingsKey: settingsKey,
        searchKey: searchKey,
        titleKey: titleKey,
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.only(top: 16.0, left: 16.0, right: 16.0),
            child: Align(
              alignment: Alignment.centerLeft,
              child: Text('Courses', style: AppTheme.branchBreadcrumbStyle),
            ),
          ),

          const SizedBox(height: 16),
          Text(
            'Select a course to embark upon:',
            style: AppTheme.subheadingStyle.copyWith(
              color: AppTheme.primaryBlue,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: moduleNames.length,
              separatorBuilder: (_, __) => const SizedBox(height: 12),
              itemBuilder: (context, index) {
                final moduleName = moduleNames[index];
                final label = moduleName.toTitleCase(); // ‚úÖ Title Case

                return GroupButton(
                  label: label,
                  onTap: () {
                    logger.i('üìò Tapped Module: $moduleName');
                    final timestamp = DateTime.now().millisecondsSinceEpoch;

                    context.push(
                      '/lessons/items',
                      extra: {
                        'module': moduleName,
                        'transitionKey': 'lesson_items_${index}_$timestamp',
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,
                        'detailRoute': DetailRoute.branch,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/main.dart
// lib/main.dart

// üìÑ lib/main.dart

import 'package:flutter/material.dart';
import 'package:bcc5/bcc5_app.dart';
import 'package:bcc5/utils/settings_manager.dart';
import 'package:bcc5/utils/logger.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final showReminder = await _shouldShowEmergencyReminder();

  logger.i('''
üöÄ App Launch | Emergency Reminder: $showReminder
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
''');

  runApp(Bcc5App(showReminder: showReminder));
}

Future<bool> _shouldShowEmergencyReminder() async {
  final enabled = await SettingsManager.getEmergencyReminderEnabled();
  if (!enabled) return false;

  final name = await SettingsManager.getBoatName();
  final type = await SettingsManager.getVesselType();
  final desc = await SettingsManager.getVesselDescription();
  final adults = await SettingsManager.getSoulsAdults();
  final children = await SettingsManager.getSoulsChildren();

  final allFilled =
      name.trim().isNotEmpty &&
      type.trim().isNotEmpty &&
      desc.trim().isNotEmpty &&
      (adults > 0 || children > 0);

  final reviewedAt = await SettingsManager.getEmergencyInfoReviewedAt();
  return !allFilled || reviewedAt == null;
}










File: lib/theme/transition_type.dart
// lib/theme/transition_type.dart

enum TransitionType {
  instant,
  slide,
  fade,
  scale,
  fadeScale,
  rotation, // Rotates in (good for playful or tool-related UIs)
  slideUp, // Slide from bottom to top
  slideDown, // Slide from top to bottom
  slideLeft, // Slide from right to left (RTL friendly)
  slideRight, // Slide from left to right
  slide3D, // Simulated 3D slide with depth transform
  cube, // 3D cube rotation
  flip, // Horizontal or vertical card flip
  zoomIn, // Like scale, but focuses from a small origin point
  zoomOut, // Starts zoomed in, shrinks to position
  blurFade, // Blur in/out while fading
  morph, // Morphing shape (e.g., FAB to full screen)
  carousel, // Swipe-style transition (like page view)
  sharedAxis, // Material motion shared axis (x, y, z)
  ripple, // Expands like a ripple from the center/tap
  delayFade, // Fades in with intentional delay for layered content
  staggered, // Choreographed entry of multiple widgets
}










File: lib/theme/slide_direction.dart
enum SlideDirection { right, left, up, down, none }










File: lib/theme/app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryBlue = Color(0xFF163FE8);
  static const Color primaryRed = Color.fromARGB(255, 255, 0, 0);
  static const Color backgroundColor = Colors.white;
  static const Color darkBackground = Color(0xFF121212);

  static const Color infoColor = primaryBlue;
  static const Color errorColor = primaryRed;
  static const Color successColor = Colors.green;
  static const Color warningColor = Colors.orange;
  static const Color disabledGray = Colors.grey;

  static const double textScaleMultiplier = 1.5;

  static const TextStyle headingStyle = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static final ButtonStyle groupRedButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(vertical: 14),
    textStyle: buttonTextStyle,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );
  static final ButtonStyle whiteTextButton = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
    textStyle: buttonTextStyle.copyWith(
      fontSize: 16,
      fontWeight: FontWeight.w600,
      color: Colors.white,
    ),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );

  static final ButtonStyle largeRedButton = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 32),
    textStyle: const TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.bold,
      color: Colors.white,
    ),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );
  static ButtonStyle get landingPrimaryButton => largeRedButton;

  static const TextStyle subheadingStyle = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle bodyTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.normal,
    color: Colors.black87,
  );

  static const TextStyle buttonTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle captionStyle = TextStyle(
    fontSize: 14,
    color: Colors.grey,
  );

  static const TextStyle branchBreadcrumbStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.bold,
    color: Colors.black87,
  );

  static const TextStyle groupBreadcrumbStyle = TextStyle(
    fontSize: 16,
    fontStyle: FontStyle.italic,
    color: Colors.black87,
  );

  static const TextStyle detailTitleStyle = TextStyle(
    fontSize: 20,
    fontWeight: FontWeight.bold,
    color: primaryBlue,
  );

  static const TextTheme textTheme = TextTheme(
    headlineLarge: headingStyle,
    headlineMedium: subheadingStyle,
    bodyLarge: bodyTextStyle,
    labelLarge: buttonTextStyle,
    bodySmall: captionStyle,
  );

  static final TextTheme scaledTextTheme = TextTheme(
    headlineLarge: headingStyle.copyWith(
      fontSize: headingStyle.fontSize! * textScaleMultiplier,
    ),
    headlineMedium: subheadingStyle.copyWith(
      fontSize: subheadingStyle.fontSize! * textScaleMultiplier,
    ),
    bodyLarge: bodyTextStyle.copyWith(
      fontSize: bodyTextStyle.fontSize! * textScaleMultiplier,
    ),
    labelLarge: buttonTextStyle.copyWith(
      fontSize: buttonTextStyle.fontSize! * textScaleMultiplier,
    ),
    bodySmall: captionStyle.copyWith(
      fontSize: captionStyle.fontSize! * textScaleMultiplier,
    ),
  );

  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    scaffoldBackgroundColor: backgroundColor,
    colorScheme: ColorScheme.fromSeed(seedColor: primaryBlue),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      foregroundColor: Colors.white,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: primaryRed,
      unselectedItemColor: Colors.white70,
      selectedIconTheme: IconThemeData(size: 26),
      unselectedIconTheme: IconThemeData(size: 22),
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
      showUnselectedLabels: true,
    ),
    textTheme: textTheme,
  );

  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: darkBackground,
    colorScheme: ColorScheme.dark(primary: primaryBlue, secondary: primaryRed),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: Colors.white,
      unselectedItemColor: Colors.white70,
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
    ),
    textTheme: textTheme,
  );

  static const double buttonCornerRadius = 12.0;
  static const double cardCornerRadius = 16.0;
  static const double screenPadding = 16.0;

  static const EdgeInsetsGeometry groupButtonPadding = EdgeInsets.symmetric(
    vertical: 14,
    horizontal: 24,
  );

  static const EdgeInsetsGeometry itemButtonPadding = EdgeInsets.symmetric(
    vertical: 10,
    horizontal: 12,
  );

  static const EdgeInsets cardPadding = EdgeInsets.all(12);

  static final ButtonStyle navigationButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
    textStyle: buttonTextStyle,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );

  static final ButtonStyle disabledNavigationButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: Colors.grey.shade400,
        foregroundColor: Colors.white.withAlpha(153),
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        textStyle: buttonTextStyle,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static final ButtonStyle highlightedGroupButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: primaryRed,
        padding: groupButtonPadding,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static Color get groupButtonSelected => primaryBlue.withAlpha(229);
  static Color get groupButtonUnselected => primaryBlue.withAlpha(153);

  static ButtonStyle get navigationButton => navigationButtonStyle;
  static ButtonStyle get disabledNavigationButton =>
      disabledNavigationButtonStyle;
}










File: lib/data/models/content_block.dart
enum ContentBlockType { heading, text, code, bulletList, image, divider }

class ContentBlock {
  final ContentBlockType type;
  final String? text;
  final List<String>? bulletList;
  final String? imagePath;

  const ContentBlock._({
    required this.type,
    this.text,
    this.bulletList,
    this.imagePath,
  });

  // Heading block
  factory ContentBlock.heading(String text) =>
      ContentBlock._(type: ContentBlockType.heading, text: text);

  // Text block
  factory ContentBlock.text(String text) =>
      ContentBlock._(type: ContentBlockType.text, text: text);

  // Code block
  factory ContentBlock.code(String codeText) =>
      ContentBlock._(type: ContentBlockType.code, text: codeText);

  // Bullet list block
  factory ContentBlock.bullets(List<String> bullets) =>
      ContentBlock._(type: ContentBlockType.bulletList, bulletList: bullets);

  // Image block
  factory ContentBlock.image(String imagePath) =>
      ContentBlock._(type: ContentBlockType.image, imagePath: imagePath);

  // Divider block
  factory ContentBlock.divider() =>
      ContentBlock._(type: ContentBlockType.divider);

  // Optional: utility for combining sides with divider
  static List<ContentBlock> dividerList() => [ContentBlock.divider()];

  // Optional convenience getter
  List<String>? get bullets => bulletList;
}










File: lib/data/models/tool_model.dart
// üìÑ lib/data/models/tool_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  const ToolItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });
}










File: lib/data/models/lesson_model.dart
// üìÑ lib/data/models/lesson_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class Lesson {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<String> keywords;
  final List<Flashcard> flashcards;
  final bool isPaid;

  const Lesson({
    required this.id,
    required this.title,
    required this.content,
    required this.keywords,
    required this.flashcards,
    required this.isPaid,
  });
}










File: lib/data/models/part_model.dart
// üü† part_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class PartItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;
  final List<String> keywords;
  final bool isPaid;

  const PartItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
    this.keywords = const [],
    this.isPaid = false,
  });
}

class PartZone {
  final String name; // e.g., "Hull", "Deck"
  final List<PartItem> items;

  const PartZone({required this.name, required this.items});
}










File: lib/data/models/path_model.dart
// üìÑ lib/data/models/path_model.dart

class PathItem {
  final String pathItemId; // e.g., "lesson_dock_1.00", "part_deck_3.00"

  const PathItem({required this.pathItemId});
}

class LearningPathChapter {
  final String id; // e.g., "path_competentCrew_1.00"
  final String title;
  final List<PathItem> items;

  const LearningPathChapter({
    required this.id,
    required this.title,
    required this.items,
  });
}










File: lib/data/models/flashcard_model.dart
// üìÑ lib/data/models/flashcard_model.dart

import 'package:bcc5/data/models/content_block.dart';

class Flashcard {
  final String id;
  final String title;
  final List<ContentBlock> sideA;
  final List<ContentBlock> sideB;
  final bool isPaid;
  final bool showAFirst;

  Flashcard({
    required this.id,
    required this.title,
    List<ContentBlock>? sideA,
    List<ContentBlock>? sideB,
    required this.isPaid,
    required this.showAFirst,
  }) : sideA = sideA ?? [],
       sideB = sideB ?? [];
}










File: lib/data/models/render_item.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

enum RenderItemType { lesson, part, tool, flashcard }

class RenderItem {
  final RenderItemType type;
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  RenderItem({
    required this.type,
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });

  /// Whether this item has any usable content or flashcards
  bool get isResolved => content.isNotEmpty || flashcards.isNotEmpty;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RenderItem && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;

  factory RenderItem.fromFlashcard(Flashcard flashcard) {
    return RenderItem(
      id: flashcard.id,
      type: RenderItemType.flashcard,
      title: flashcard.title,
      content: flashcard.sideA, // or empty list if irrelevant
      flashcards: [flashcard],
    );
  }
}










File: lib/widgets/end_of_group_modal.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/theme/app_theme.dart';

class EndOfGroupModal extends StatelessWidget {
  final String title;
  final String message;
  final String backButtonLabel;
  final String backRoute;
  final Map<String, dynamic>? backExtra;
  final int branchIndex;
  final DetailRoute detailRoute;
  final String? forwardButtonLabel;
  final VoidCallback? onNextGroup;

  const EndOfGroupModal({
    super.key,
    required this.title,
    required this.message,
    required this.backButtonLabel,
    required this.backRoute,
    required this.backExtra,
    required this.branchIndex,
    required this.detailRoute,
    this.forwardButtonLabel,
    this.onNextGroup,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            title,
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 12),
          Text(message, textAlign: TextAlign.center),
          const SizedBox(height: 20),
          if (onNextGroup != null && forwardButtonLabel != null)
            Padding(
              padding: const EdgeInsets.only(bottom: 12),
              child: ElevatedButton(
                // Next or Restart (TOP button)
                onPressed: () {
                  Navigator.of(context).pop();
                  onNextGroup?.call();
                },
                style: AppTheme.navigationButton,
                child: Text(forwardButtonLabel!),
              ),
            ),

          ElevatedButton(
            // Back to List (BOTTOM button)
            onPressed: () {
              Navigator.of(context).pop();
              context.go(
                backRoute,
                extra: {
                  if (backExtra?['zone'] != null) 'zone': backExtra!['zone'],
                  if (backExtra?['module'] != null)
                    'module': backExtra!['module'],
                  if (backExtra?['toolbag'] != null)
                    'toolbag': backExtra!['toolbag'],
                  if (backExtra?['category'] != null)
                    'category': backExtra!['category'],
                  if (backExtra?['chapterId'] != null)
                    'chapterId': backExtra!['chapterId'],
                  if (backExtra?['pathName'] != null)
                    'pathName': backExtra!['pathName'],
                  'branchIndex': branchIndex,
                  'transitionKey': UniqueKey().toString(),
                  'slideFrom': SlideDirection.left,
                  'transitionType': TransitionType.slide,
                  'detailRoute': detailRoute,
                },
              );
            },
            style: AppTheme.navigationButton,
            child: Text(backButtonLabel),
          ),
        ],
      ),
    );
  }
}










File: lib/widgets/item_button.dart
import 'package:bcc5/theme/app_theme.dart';
import 'package:flutter/material.dart';

class ItemButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final Color color;
  final double borderRadius;
  final EdgeInsetsGeometry padding;

  const ItemButton({
    super.key,
    required this.label,
    required this.onTap,
    this.color = AppTheme.primaryRed, // üü† Default to red (DetailButton style)
    this.borderRadius = 12.0, // üü† Default rounded rectangle
    this.padding = const EdgeInsets.symmetric(
      vertical: 12,
      horizontal: 8,
    ), // üü† Default compact padding
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap, // üü† Clean tap handler
      child: Container(
        padding: padding,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        alignment: Alignment.center,
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle.copyWith(color: Colors.white),
        ),
      ),
    );
  }
}










File: lib/widgets/content_block_renderer.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/theme/app_theme.dart';

class ContentBlockRenderer extends StatelessWidget {
  final List<ContentBlock> blocks;

  const ContentBlockRenderer({super.key, required this.blocks});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: 16), // add bottom spacing
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: blocks.map((block) => _renderBlock(context, block)).toList(),
      ),
    );
  }

  Widget _renderBlock(BuildContext context, ContentBlock block) {
    switch (block.type) {
      case ContentBlockType.heading:
        return Padding(
          padding: const EdgeInsets.only(top: 12, bottom: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.headlineMedium,
          ),
        );

      case ContentBlockType.text:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.bodyLarge,
          ),
        );

      case ContentBlockType.code:
        return Container(
          margin: const EdgeInsets.symmetric(vertical: 4),
          padding: const EdgeInsets.all(8),
          color: Colors.grey.shade200,
          child: Text(
            block.text ?? '',
            style: const TextStyle(fontFamily: 'monospace'),
          ),
        );

      case ContentBlockType.bulletList:
        final bullets = block.bullets ?? [];
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children:
              bullets.map((b) {
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('‚Ä¢ ', style: TextStyle(fontSize: 16)),
                      Expanded(child: Text(b)),
                    ],
                  ),
                );
              }).toList(),
        );

      case ContentBlockType.image:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Image.asset(
            block.imagePath ?? 'assets/images/fallback_image.jpeg',
            fit: BoxFit.cover,
          ),
        );

      case ContentBlockType.divider:
        return const Divider(thickness: 2);
    }
  }
}










File: lib/widgets/search_modal.dart
// üìÑ lib/widgets/search_modal.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';

// üö´ No need to import flashcards until keyword support is added

class SearchResult {
  final String id;
  final String title;
  final RenderItemType type;

  SearchResult({required this.id, required this.title, required this.type});
}

class SearchModal extends StatefulWidget {
  const SearchModal({super.key});

  @override
  State<SearchModal> createState() => _SearchModalState();
}

class _SearchModalState extends State<SearchModal> {
  final TextEditingController _controller = TextEditingController();
  late List<SearchResult> _allResults;
  List<SearchResult> _filteredResults = [];

  @override
  void initState() {
    super.initState();
    _allResults = _buildSearchIndex();
    _filteredResults = _allResults;
  }

  List<SearchResult> _buildSearchIndex() {
    final results = <SearchResult>[];

    for (final lesson in LessonRepositoryIndex.getAllLessons()) {
      for (final keyword in lesson.keywords) {
        results.add(
          SearchResult(
            id: lesson.id,
            title: keyword,
            type: RenderItemType.lesson,
          ),
        );
      }
    }

    for (final part in PartRepositoryIndex.getAllParts()) {
      for (final keyword in part.keywords) {
        results.add(
          SearchResult(id: part.id, title: keyword, type: RenderItemType.part),
        );
      }
    }

    // üöß Flashcard keywords not yet available in model
    // Future-proof logic:
    // for (final flashcard in FlashcardRepository.getAllFlashcards()) {
    //   for (final keyword in flashcard.keywords ?? []) {
    //     results.add(SearchResult(
    //       id: flashcard.id,
    //       title: keyword,
    //       type: RenderItemType.flashcard,
    //     ));
    //   }
    // }

    return results;
  }

  void _onSearchChanged(String query) {
    setState(() {
      _filteredResults =
          _allResults
              .where((r) => r.title.toLowerCase().contains(query.toLowerCase()))
              .toList();
    });
  }

  void _navigateToResult(SearchResult result) {
    final renderItems = buildRenderItems(ids: [result.id]);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final extra = {
      'renderItems': renderItems,
      'currentIndex': 0,
      'branchIndex': 0,
      'backDestination': '/',
      'transitionKey': 'search_${result.id}_$timestamp',
    };

    switch (result.type) {
      case RenderItemType.lesson:
        context.go('/lessons/detail', extra: extra);
        break;
      case RenderItemType.part:
        context.go('/parts/detail', extra: extra);
        break;
      case RenderItemType.tool:
        context.go('/tools/detail', extra: extra);
        break;
      case RenderItemType.flashcard:
        context.go('/flashcards/detail', extra: extra);
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.white,
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _controller,
              onChanged: _onSearchChanged,
              decoration: const InputDecoration(
                labelText: 'Search...',
                border: OutlineInputBorder(),
              ),
            ),
          ),
          Expanded(
            child: ListView.separated(
              itemCount: _filteredResults.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (context, index) {
                final result = _filteredResults[index];
                return ListTile(
                  title: Text(result.title),
                  subtitle: Text(result.type.name),
                  onTap: () => _navigateToResult(result),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/widgets/disabled_item_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class DisabledItemButton extends StatelessWidget {
  final String label;

  const DisabledItemButton({super.key, required this.label});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: AppTheme.itemButtonPadding,
      decoration: BoxDecoration(
        color: Colors.grey.shade400,
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
      alignment: Alignment.center,
      child: Text(
        label,
        textAlign: TextAlign.center,
        style: AppTheme.buttonTextStyle.copyWith(
          color: Colors.white.withAlpha(153), // ‚úÖ No error
        ),
      ),
    );
  }
}










File: lib/widgets/navigation/last_group_button.dart
// lib/widgets/navigation/last_group_button.dart

import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/widgets/end_of_group_modal.dart';

class LastGroupButton extends StatefulWidget {
  final RenderItemType type;
  final DetailRoute detailRoute;
  final Map<String, dynamic>? backExtra;
  final int branchIndex;
  final String backDestination;
  final String label;
  final Future<List<RenderItem>?> Function() getNextRenderItems;
  final void Function(List<RenderItem> renderItems)? onNavigateToNextGroup;
  final VoidCallback? onRestartAtFirstGroup;

  const LastGroupButton({
    super.key,
    required this.type,
    required this.detailRoute,
    required this.backExtra,
    required this.branchIndex,
    required this.backDestination,
    required this.label,
    required this.getNextRenderItems,
    this.onNavigateToNextGroup,
    this.onRestartAtFirstGroup,
  });

  @override
  State<LastGroupButton> createState() => _LastGroupButtonState();
}

class _LastGroupButtonState extends State<LastGroupButton> {
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () async {
        logger.i('‚è≠Ô∏è LastGroupButton tapped (${widget.label})');

        final renderItems = await widget.getNextRenderItems();

        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (!mounted) return;

          _showEndOfGroupModal(context, renderItems ?? []);
        });
      },
      style: AppTheme.navigationButton,
      child: Text('Next ${widget.label.toTitleCase()}'),
    );
  }

  void _showEndOfGroupModal(
    BuildContext context,
    List<RenderItem> renderItems,
  ) {
    final isPath = widget.detailRoute == DetailRoute.path;
    final pathName = widget.backExtra?['pathName'] as String?;
    final chapterId = widget.backExtra?['chapterId'] as String?;

    final nextChapter =
        (isPath && pathName != null && chapterId != null)
            ? PathRepositoryIndex.getNextChapter(pathName, chapterId)
            : null;

    final hasNextGroup = renderItems.isNotEmpty;

    final backRoute =
        isPath
            ? (nextChapter != null
                ? '/learning-paths/${pathName!.toLowerCase().replaceAll(' ', '-')}'
                : '/')
            : widget.backDestination;

    final backLabel =
        isPath
            ? (nextChapter != null
                ? 'Back to ${pathName!.toTitleCase()} Chapters'
                : 'üéâ Congrats! Return to Home')
            : 'Back to ${_pluralize(widget.label.toTitleCase())}';

    final forwardLabel =
        isPath
            ? (nextChapter != null
                ? 'Next ${pathName!.toTitleCase()} Chapter'
                : 'Restart ${pathName!.toTitleCase()}')
            : (hasNextGroup
                ? 'Next ${widget.label.toTitleCase()}'
                : 'Start Over at Beginning');

    final backExtra = {
      if (isPath && pathName != null) 'pathName': pathName,
      if (isPath && nextChapter != null) 'chapterId': chapterId,
      if (!isPath && widget.backExtra != null) ...widget.backExtra!,
      'branchIndex': widget.branchIndex,
      'transitionKey': UniqueKey().toString(),
      'slideFrom': SlideDirection.left,
      'transitionType': TransitionType.slide,
      'detailRoute': widget.detailRoute,
    };

    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      builder:
          (_) => EndOfGroupModal(
            title:
                nextChapter != null || hasNextGroup
                    ? 'üìò End of this ${widget.label}'
                    : 'üéâ You‚Äôve completed all ${_pluralize(widget.label)}!',
            message:
                nextChapter != null || hasNextGroup
                    ? 'Nice job! Would you like to return to the main list or begin the next ${widget.label}?'
                    : 'You‚Äôve completed the full path! Return to home or restart the first ${widget.label}.',
            backButtonLabel: backLabel,
            backRoute: backRoute,
            forwardButtonLabel: forwardLabel,
            onNextGroup:
                (nextChapter != null || hasNextGroup)
                    ? () => widget.onNavigateToNextGroup?.call(renderItems)
                    : widget.onRestartAtFirstGroup,
            backExtra: backExtra,
            branchIndex: widget.branchIndex,
            detailRoute: widget.detailRoute,
          ),
    );
  }

  // String _normalizeToTopLevelRoute(String route) {
  //   if (route.startsWith('/learning-paths') && route.contains('/items')) {
  //     return route.replaceAll('/items', '');
  //   }
  //   if (route.endsWith('/items')) {
  //     return route.replaceAll('/items', '');
  //   }
  //   return route;
  // }

  String _pluralize(String word) => word.endsWith('s') ? word : '${word}s';
}










File: lib/widgets/mob_modal.dart
import 'package:bcc5/screens/emergency/mob_emergency_screen.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:bcc5/utils/location_helper.dart';

void showMOBModal(BuildContext context) {
  final now = DateTime.now();
  final formattedTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(now);

  final navigator = Navigator.of(context); // ‚úÖ capture immediately
  getCurrentLocation().then((position) {
    final gpsText =
        position != null
            ? '${position.latitude}, ${position.longitude}'
            : 'Unavailable';

    logger.i('üö® MOB Modal triggered at $formattedTime with coords: $gpsText');

    navigator.push(
      MaterialPageRoute(
        fullscreenDialog: true,
        builder: (_) => const MOBEmergencyScreen(),
      ),
    );
  });
}










File: lib/widgets/custom_app_bar_widget.dart
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/mob_modal.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/search_modal.dart'; // üîç Search Modal
import 'package:bcc5/widgets/settings_modal.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart'; // ‚öôÔ∏è Settings Modal

class CustomAppBarWidget extends StatelessWidget
    implements PreferredSizeWidget {
  final String title;
  final bool showBackButton;
  final bool showSearchIcon;
  final bool showSettingsIcon;
  final VoidCallback? onBack;
  final VoidCallback? onSearchTap;
  final VoidCallback? onSettingsTap;

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  CustomAppBarWidget({
    super.key,
    required this.title,
    this.showBackButton = false,
    this.showSearchIcon = true,
    this.showSettingsIcon = true,
    this.onBack,
    this.onSearchTap,
    this.onSettingsTap,
    GlobalKey? mobKey,
    GlobalKey? settingsKey,
    GlobalKey? searchKey,
    GlobalKey? titleKey,
  }) : mobKey = mobKey ?? GlobalKey(debugLabel: 'MOBKey'),
       settingsKey = settingsKey ?? GlobalKey(debugLabel: 'SettingsKey'),
       searchKey = searchKey ?? GlobalKey(debugLabel: 'SearchKey'),
       titleKey = titleKey ?? GlobalKey(debugLabel: 'TitleKey');

  /// MOB Icon opens a modal via `showDialog(...)`.
  /// ‚ö†Ô∏è Do not replace with `Navigator.push(...)`
  /// unless you explicitly track and restore navigation state.
  ///
  /// The current design allows users to:
  /// - Tap the MOB icon
  /// - Navigate deeper (e.g. to procedures screen)
  /// - Tap back ‚Üí returns to MOB modal
  /// - Close modal ‚Üí returns to originating screen
  ///
  /// If you change this behavior, test for:
  /// üîÅ Stack restoration
  /// üîô Correct screen on modal close

  @override
  Widget build(BuildContext context) {
    // logger.d(
    //   '[AppBar] title: "$title" | back: $showBackButton | search: $showSearchIcon | settings: $showSettingsIcon',
    // );

    return AppBar(
      backgroundColor: AppTheme.primaryBlue,
      centerTitle: false,
      elevation: 0,
      automaticallyImplyLeading: false,
      title: Row(
        children: [
          // LEFT: Back, Search, Settings
          if (showBackButton)
            IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed:
                  onBack ??
                  () {
                    if (Navigator.of(context).canPop()) {
                      Navigator.of(context).pop();
                    } else {
                      context.go('/');
                    }
                  },
            ),
          if (showSearchIcon)
            Builder(
              builder:
                  (innerContext) => IconButton(
                    key: searchKey,
                    icon: const Icon(Icons.search),
                    onPressed:
                        onSearchTap ??
                        () {
                          showDialog(
                            context: innerContext,
                            builder: (_) => const SearchModal(),
                          );
                        },
                  ),
            ),

          if (showSettingsIcon)
            Builder(
              builder:
                  (innerContext) => IconButton(
                    key: settingsKey,
                    icon: const Icon(Icons.settings),
                    onPressed:
                        onSettingsTap ??
                        () {
                          showSettingsModal(innerContext);
                        },
                  ),
            ),

          // CENTER: Title
          Expanded(
            child: Text(
              title,
              key: titleKey,
              style: AppTheme.headingStyle,
              textAlign: TextAlign.center,
            ),
          ),

          // RIGHT: Life Ring (MOB)
          Builder(
            builder:
                (innerContext) => IconButton(
                  key: mobKey,
                  icon: Icon(MdiIcons.lifebuoy, size: 40, color: Colors.red),
                  tooltip: 'Man Overboard',
                  onPressed: () {
                    logger.i('üÜò MOB button tapped');
                    showMOBModal(innerContext);
                  },
                ),
          ),
        ],
      ),
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}










File: lib/widgets/group_picker_dropdown.dart
// üìÑ lib/widgets/group_picker_dropdown.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupPickerDropdown extends StatelessWidget {
  final String label; // e.g., 'Module' or 'Chapter'
  final String selectedId;
  final List<String> ids;
  final Map<String, String> idToTitle;
  final ValueChanged<String> onChanged;

  const GroupPickerDropdown({
    super.key,
    required this.label,
    required this.selectedId,
    required this.ids,
    required this.idToTitle,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return DropdownButtonHideUnderline(
      child: DropdownButton<String>(
        value: selectedId,
        icon: const Icon(Icons.arrow_drop_down),
        borderRadius: BorderRadius.circular(12),
        style: AppTheme.scaledTextTheme.bodyLarge,
        dropdownColor: Colors.white,
        onChanged: (value) {
          if (value != null) onChanged(value);
        },
        items:
            ids.map((id) {
              return DropdownMenuItem<String>(
                value: id,
                child: Text(idToTitle[id] ?? id),
              );
            }).toList(),
      ),
    );
  }
}










File: lib/widgets/navigation_buttons.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class NavigationButtons extends StatefulWidget {
  final bool isPreviousEnabled;
  final bool isNextEnabled;
  final VoidCallback onPrevious;
  final VoidCallback onNext;
  final Widget? customNextButton;

  const NavigationButtons({
    super.key,
    required this.isPreviousEnabled,
    required this.isNextEnabled,
    required this.onPrevious,
    required this.onNext,
    this.customNextButton, // ‚úÖ new
  });

  @override
  State<NavigationButtons> createState() => _NavigationButtonsState();
}

class _NavigationButtonsState extends State<NavigationButtons> {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 6, sigmaY: 6),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.0),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                SizedBox(
                  height: 48,
                  child: ElevatedButton.icon(
                    onPressed:
                        widget.isPreviousEnabled ? widget.onPrevious : null,
                    icon: const Icon(Icons.arrow_back),
                    label: const Text('Previous'),
                    style: AppTheme.navigationButton,
                  ),
                ),
                SizedBox(
                  height: 48,
                  child:
                      widget.customNextButton ??
                      ElevatedButton(
                        onPressed: widget.isNextEnabled ? widget.onNext : null,
                        style: AppTheme.navigationButton,
                        child: Row(
                          children: const [
                            Text('Next'),
                            SizedBox(width: 8),
                            Icon(Icons.arrow_forward),
                          ],
                        ),
                      ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}










File: lib/widgets/group_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final bool isSelected;

  const GroupButton({
    super.key,
    required this.label,
    required this.onTap,
    this.isSelected = false,
  });

  @override
  Widget build(BuildContext context) {
    final backgroundColor =
        isSelected
            ? AppTheme.groupButtonSelected
            : AppTheme.groupButtonUnselected;

    return FractionallySizedBox(
      widthFactor: 0.6,
      child: ElevatedButton(
        onPressed: onTap,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          padding: AppTheme.groupButtonPadding,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
          ),
        ),
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle,
        ),
      ),
    );
  }
}










File: lib/widgets/settings_modal.dart
// lib/widgets/settings_modal.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/resume_manager.dart'; // ‚úÖ Needed for reset
import 'package:bcc5/utils/settings_manager.dart';
import 'package:bcc5/utils/radio_helper.dart';

void showSettingsModal(BuildContext context) {
  showDialog(
    context: context,
    barrierDismissible: true,
    builder: (BuildContext context) {
      return Dialog(
        insetPadding: const EdgeInsets.fromLTRB(16, 40, 16, 40),
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: LayoutBuilder(
          builder: (context, constraints) {
            return SizedBox(
              height: constraints.maxHeight,
              width: constraints.maxWidth,
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Settings', style: AppTheme.headingStyle),
                        const SizedBox(height: 12),
                        const Divider(),
                      ],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Expanded(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: ListView(
                        children: [
                          _settingSwitch('Dark Mode', false),

                          // üìú Boat Name w/ Phonetic Preview
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Boat Name',
                                  style: AppTheme.textTheme.bodyLarge,
                                ),
                                const SizedBox(height: 4),
                                FutureBuilder<String>(
                                  future: SettingsManager.getBoatName(),
                                  builder: (context, snapshot) {
                                    final controller = TextEditingController(
                                      text: snapshot.data ?? '',
                                    );
                                    return StatefulBuilder(
                                      builder: (context, setModalState) {
                                        return Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            TextField(
                                              controller: controller,
                                              decoration: const InputDecoration(
                                                border: OutlineInputBorder(),
                                                hintText: 'Enter boat name...',
                                              ),
                                              onChanged: (value) async {
                                                await SettingsManager.setBoatName(
                                                  value,
                                                );
                                                setModalState(() {});
                                              },
                                            ),
                                            const SizedBox(height: 6),
                                            Text(
                                              'Phonetic: ${formatPhonetic(controller.text)}',
                                              style: AppTheme
                                                  .textTheme
                                                  .bodySmall!
                                                  .copyWith(
                                                    color: Colors.grey[700],
                                                  ),
                                            ),
                                          ],
                                        );
                                      },
                                    );
                                  },
                                ),
                              ],
                            ),
                          ),

                          _settingSwitch('Show Tour Wizard', true),

                          _settingButton(context, 'Legal & Privacy Docs'),
                          _settingDropdown('Units', ['Meters', 'Feet'], 'Feet'),
                          _settingDropdown('Wave Height', [
                            'Feet',
                            'Meters',
                          ], 'Feet'),
                          _settingDropdown('Temperature', [
                            'Fahrenheit',
                            'Celsius',
                          ], 'Fahrenheit'),

                          StatefulBuilder(
                            builder: (context, setState) {
                              return FutureBuilder<GPSDisplayFormat>(
                                future: SettingsManager.getGPSDisplayFormat(),
                                builder: (context, snapshot) {
                                  final current =
                                      snapshot.data ??
                                      GPSDisplayFormat.marineCompact;
                                  return _settingEnumDropdown(
                                    'GPS Format',
                                    {
                                      'DMM (Marine Style)':
                                          GPSDisplayFormat.marineCompact,
                                      'DMS (Older Charts)':
                                          GPSDisplayFormat.marineFull,
                                      'DD (Decimal)': GPSDisplayFormat.decimal,
                                    },
                                    current,
                                    (newFormat) async {
                                      await SettingsManager.setGPSDisplayFormat(
                                        newFormat,
                                      );
                                      setState(() {});
                                    },
                                  );
                                },
                              );
                            },
                          ),

                          const Divider(height: 24),
                          const SizedBox(height: 8),
                          Text(
                            'üö® Emergency Info',
                            style: AppTheme.textTheme.titleMedium,
                          ),
                          const SizedBox(height: 4),

                          FutureBuilder<String>(
                            future: SettingsManager.getVesselType(),
                            builder: (context, snapshot) {
                              final current = snapshot.data ?? '';
                              final controller = TextEditingController(
                                text: current,
                              );
                              final options = [
                                'Sailing Vessel',
                                'Motor Vessel',
                                'Catamaran',
                                'Other',
                              ];

                              return Padding(
                                padding: const EdgeInsets.symmetric(
                                  vertical: 4,
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text('Vessel Type'),
                                    const SizedBox(height: 4),
                                    DropdownButtonFormField<String>(
                                      value:
                                          options.contains(current)
                                              ? current
                                              : 'Other',
                                      items:
                                          options
                                              .map(
                                                (type) => DropdownMenuItem(
                                                  value: type,
                                                  child: Text(type),
                                                ),
                                              )
                                              .toList(),
                                      onChanged: (value) {
                                        if (value == 'Other') {
                                          controller.text = '';
                                        } else {
                                          controller.text = value!;
                                          SettingsManager.setVesselType(value);
                                        }
                                      },
                                    ),
                                    const SizedBox(height: 6),
                                    if (controller.text.isEmpty ||
                                        controller.text == 'Other')
                                      TextField(
                                        controller: controller,
                                        decoration: const InputDecoration(
                                          hintText: 'Enter vessel type',
                                          border: OutlineInputBorder(),
                                        ),
                                        onChanged:
                                            (value) =>
                                                SettingsManager.setVesselType(
                                                  value,
                                                ),
                                      ),
                                  ],
                                ),
                              );
                            },
                          ),

                          _settingTextField(
                            label: 'Vessel Length',
                            initialValueFuture:
                                SettingsManager.getVesselLength(),
                            onChanged: SettingsManager.setVesselLength,
                          ),
                          _settingTextField(
                            label:
                                'Vessel Description (e.g., ‚Äúsail number 56788‚Äù)',
                            initialValueFuture:
                                SettingsManager.getVesselDescription(),
                            onChanged: SettingsManager.setVesselDescription,
                          ),
                          _settingIntField(
                            label: 'Souls Onboard (Adults)',
                            initialValueFuture:
                                SettingsManager.getSoulsAdults(),
                            onChanged: SettingsManager.setSoulsAdults,
                          ),
                          _settingIntField(
                            label: 'Souls Onboard (Children)',
                            initialValueFuture:
                                SettingsManager.getSoulsChildren(),
                            onChanged: SettingsManager.setSoulsChildren,
                          ),
                          _settingTextField(
                            label: 'MMSI (optional)',
                            initialValueFuture: SettingsManager.getMMSI(),
                            onChanged: SettingsManager.setMMSI,
                          ),
                          _settingTextField(
                            label: 'Emergency Contact Phone',
                            initialValueFuture:
                                SettingsManager.getEmergencyContact(),
                            onChanged: SettingsManager.setEmergencyContact,
                          ),
                          _settingTextField(
                            label: "Captain's Phone",
                            initialValueFuture:
                                SettingsManager.getCaptainPhone(),
                            onChanged: SettingsManager.setCaptainPhone,
                          ),
                          const SizedBox(height: 12),

                          // üß™ DEV Reset Resume Point
                          ElevatedButton(
                            style: AppTheme.navigationButton,
                            onPressed: () async {
                              await ResumeManager.clearResumePoint();
                              if (!context.mounted) return;
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('‚úÖ Resume point cleared'),
                                ),
                              );
                            },
                            child: const Text('Reset Resume Point'),
                          ),

                          const SizedBox(height: 12),
                          ElevatedButton(
                            style: AppTheme.navigationButton,
                            onPressed: () => Navigator.of(context).pop(),
                            child: const Text('Close Settings'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        ),
      );
    },
  );
}

// üîò Switch Row
Widget _settingSwitch(String label, bool value) {
  return SwitchListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    value: value,
    onChanged: (_) {},
    contentPadding: const EdgeInsets.symmetric(horizontal: 0),
  );
}

// üìÇ Static Dropdown for legacy settings (read-only)
Widget _settingDropdown(String label, List<String> options, String selected) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 4),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: AppTheme.textTheme.bodyLarge),
        DropdownButton<String>(
          value: selected,
          items:
              options
                  .map((o) => DropdownMenuItem(value: o, child: Text(o)))
                  .toList(),
          onChanged: (_) {},
        ),
      ],
    ),
  );
}

// üß≠ Dynamic Enum Dropdown
Widget _settingEnumDropdown<T>(
  String label,
  Map<String, T> options,
  T selected,
  void Function(T) onChanged,
) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 4),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: AppTheme.textTheme.bodyLarge),
        DropdownButton<T>(
          value: selected,
          items:
              options.entries
                  .map(
                    (e) =>
                        DropdownMenuItem<T>(value: e.value, child: Text(e.key)),
                  )
                  .toList(),
          onChanged: (val) {
            if (val != null) onChanged(val);
          },
        ),
      ],
    ),
  );
}

// üìÑ Legal Docs Button
Widget _settingButton(BuildContext context, String label) {
  return ListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    trailing: const Icon(Icons.chevron_right),
    onTap: () {
      showDialog(
        context: context,
        builder:
            (_) => AlertDialog(
              title: const Text('Legal & Privacy Documents'),
              content: const Text('This would display legal info...'),
              actions: [
                Padding(
                  padding: EdgeInsets.zero,
                  child: SizedBox(
                    height: 44, // ‚¨ÖÔ∏è Tight fixed height
                    width: double.infinity,
                    child: TextButton(
                      style: TextButton.styleFrom(
                        backgroundColor: AppTheme.primaryRed,
                        foregroundColor: Colors.white,
                        padding: EdgeInsets.zero,
                        shape: const RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                      ),
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text(
                        'Close',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                  ),
                ),
              ],
            ),
      );
    },
  );
}

// üî§ Text field with Future initial value
Widget _settingTextField({
  required String label,
  required Future<String> initialValueFuture,
  required void Function(String) onChanged,
}) {
  return FutureBuilder<String>(
    future: initialValueFuture,
    builder: (context, snapshot) {
      final controller = TextEditingController(text: snapshot.data ?? '');
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: TextField(
          controller: controller,
          decoration: InputDecoration(labelText: label),
          onChanged: onChanged,
        ),
      );
    },
  );
}

// üî¢ Integer-only input field
Widget _settingIntField({
  required String label,
  required Future<int> initialValueFuture,
  required void Function(int) onChanged,
}) {
  return FutureBuilder<int>(
    future: initialValueFuture,
    builder: (context, snapshot) {
      final controller = TextEditingController(
        text: (snapshot.data ?? 0).toString(),
      );
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: TextField(
          controller: controller,
          decoration: InputDecoration(labelText: label),
          keyboardType: TextInputType.number,
          onChanged: (value) {
            final parsed = int.tryParse(value);
            if (parsed != null) onChanged(parsed);
          },
        ),
      );
    },
  );
}










File: lib/widgets/tour/tour_controller.dart
import 'package:bcc5/utils/logger.dart';
import 'package:flutter/material.dart';

class TourController extends ChangeNotifier {
  final List<GlobalKey> steps;
  final Map<String, GlobalKey> _stepKeys = {}; // ‚úÖ

  int _currentStep = 0;

  TourController({required this.steps});

  int get currentStep => _currentStep;
  GlobalKey? get currentKey {
    final key = (_currentStep < steps.length) ? steps[_currentStep] : null;
    logger.i('üéØ currentKey for step $_currentStep is $key');
    return key;
  }

  bool get isTourActive => _currentStep < steps.length;

  GlobalKey getKeyForStep(String id) {
    return _stepKeys.putIfAbsent(id, () => GlobalKey());
  }

  void addStep({
    required String id,
    required GlobalKey key,
    required String description,
  }) {
    _stepKeys[id] = key;
    // You can later store description or metadata if needed
  }

  void nextStep() {
    if (_currentStep < steps.length - 1) {
      _currentStep++;
      notifyListeners();
    }
  }

  void endTour() {
    _currentStep = steps.length;
    notifyListeners();
  }

  void reset() {
    _currentStep = 0;
    notifyListeners();
  }
}










File: lib/widgets/tour/tour_overlay_manager.dart
// lib/widgets/tour/tour_overlay_manager.dart

import 'package:bcc5/utils/logger.dart';
import 'package:flutter/material.dart';

class TourOverlayManager extends StatelessWidget {
  final GlobalKey? highlightKey;
  final VoidCallback onNext;
  final VoidCallback onEnd;
  final Widget child;

  const TourOverlayManager({
    super.key,
    required this.highlightKey,
    required this.onNext,
    required this.onEnd,
    required this.child,
  });

  @override
  Widget build(BuildContext context) {
    logger.i('üü° TourOverlayManager build | highlightKey: $highlightKey');

    final renderBox =
        highlightKey?.currentContext?.findRenderObject() as RenderBox?;
    final position = renderBox?.localToGlobal(Offset.zero);
    final size = renderBox?.size;

    return Stack(
      children: [
        child, // ‚úÖ Always render the main UI

        if (renderBox != null && position != null && size != null) ...[
          // Dark overlay background
          Positioned.fill(
            child: GestureDetector(
              onTap: onNext,
              child: Container(color: Colors.black54),
            ),
          ),

          // Highlight box
          Positioned(
            left: position.dx - 8,
            top: position.dy - 8,
            width: size.width + 16,
            height: size.height + 16,
            child: Container(
              decoration: BoxDecoration(
                border: Border.all(color: Colors.yellowAccent, width: 3),
                borderRadius: BorderRadius.circular(8),
                color: Colors.transparent,
              ),
            ),
          ),

          // Next/End buttons
          Positioned(
            top: position.dy + size.height + 24,
            left: position.dx,
            child: Row(
              children: [
                ElevatedButton(onPressed: onNext, child: const Text('Next')),
                const SizedBox(width: 8),
                TextButton(onPressed: onEnd, child: const Text('End Tour')),
              ],
            ),
          ),
        ],
      ],
    );
  }
}










File: lib/widgets/flip_card_widget.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';

class FlipCardWidget extends StatelessWidget {
  final List<ContentBlock> front;
  final List<ContentBlock> back;
  final bool showFront;
  final Animation<double> animation; // Required for flip, even if unused here

  const FlipCardWidget({
    super.key,
    required this.front,
    required this.back,
    required this.showFront,
    required this.animation,
  });

  @override
  Widget build(BuildContext context) {
    final visibleContent = showFront ? front : back;

    return Semantics(
      label: showFront ? 'Flashcard front' : 'Flashcard back',
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16),
        child: SingleChildScrollView(
          child: DefaultTextStyle.merge(
            style: const TextStyle(fontSize: 19),
            child: ContentBlockRenderer(blocks: visibleContent),
          ),
        ),
      ),
    );
  }
}










File: lib/widgets/learning_path_progress_bar.dart
// import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class LearningPathProgressBar extends StatelessWidget {
  final String pathName;

  const LearningPathProgressBar({super.key, required this.pathName});

  @override
  Widget build(BuildContext context) {
    if (pathName.isEmpty) return const SizedBox.shrink();

    // logger.i('üß≠ LearningPathProgressBar: $pathName');

    return Container(
      width: double.infinity,
      color: Colors.red[50],
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Center(
        child: Text(
          pathName.toTitleCase(),
          style: AppTheme.scaledTextTheme.labelLarge?.copyWith(
            color: AppTheme.primaryRed,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}
