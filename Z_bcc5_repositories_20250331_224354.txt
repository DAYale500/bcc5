









File: lib/data/repositories/tools/tool_procedures_repository.dart
// 📄 lib/data/repositories/tools/tool_procedures_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolProceduresRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_procedures_1.00',
      title: 'Man Overboard Recovery',
      content: [
        ContentBlock.text('Steps to follow immediately:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Shout "Man Overboard"\n2. Assign spotter\n3. Press MOB button\n4. Retrieve safely',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_procedures_1.00',
          title: 'Man Overboard – First Step',
          sideA: [
            ContentBlock.text(
              'What’s the first step when someone goes overboard?',
            ),
          ],
          sideB: [
            ContentBlock.text('Shout "Man Overboard" and assign a spotter.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_procedures_1.01',
          title: 'Recovery Tools',
          sideA: [ContentBlock.text('Recovery tools to use?')],
          sideB: [ContentBlock.text('LifeSling or ladder.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_procedures_2.00',
      title: 'Engine Failure Response',
      content: [
        ContentBlock.text('Troubleshoot your engine:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Shift to neutral\n2. Check kill switch\n3. Restart once\n4. Anchor or radio',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_procedures_2.00',
          title: 'Engine Failure Checklist',
          sideA: [ContentBlock.text('What to check first in engine failure?')],
          sideB: [ContentBlock.text('Neutral, kill switch, fuel, battery.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_repository_index.dart
import 'package:bcc5/data/models/tool_model.dart';

import 'tool_procedures_repository.dart';
import 'tool_references_repository.dart';
import 'tool_checklists_repository.dart';
import 'tool_ditchbag_repository.dart';
import 'tool_grabbag_repository.dart';
import 'tool_thumbrules_repository.dart';

class ToolRepositoryIndex {
  static final Map<String, List<ToolItem>> _toolbags = {
    'procedures': ToolProceduresRepository.toolItems,
    'references': ToolReferencesRepository.toolItems,
    'checklists': ToolChecklistsRepository.toolItems,
    'grabbag': ToolGrabbagRepository.toolItems,
    'ditchbag': ToolDitchbagRepository.toolItems,
    'thumbrules': ToolThumbrulesRepository.toolItems,
  };

  static List<ToolItem> getToolsForBag(String toolbag) =>
      _toolbags[toolbag] ?? [];

  static ToolItem? getToolById(String id) {
    for (final items in _toolbags.values) {
      for (final item in items) {
        if (item.id == id) return item;
      }
    }
    return null;
  }

  static List<String> getToolbagNames() => _toolbags.keys.toList();

  static void assertAllToolIdsValid() {
    _toolbags.forEach((bag, items) {
      for (final item in items) {
        assert(
          item.id.startsWith('tool_${bag}_'),
          'Invalid ID in $bag: ${item.id}',
        );
      }
    });
  }
}










File: lib/data/repositories/tools/tool_thumbrules_repository.dart
import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class ToolThumbrulesRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_thumbrules_1.00',
      title: 'Rule of 12ths (Tide Estimation)',
      content: [
        ContentBlock.text('Estimate tidal rise/fall hourly:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Tide moves:\n'
          '- 1/12 in 1st hour\n'
          '- 2/12 in 2nd\n'
          '- 3/12 in 3rd (then mirrors down)\n'
          'Use for anchoring & under-keel clearance.',
        ),
        // Optionally add flashcards later
      ],
      flashcards: [],
    ),
    ToolItem(
      id: 'tool_thumbrules_2.00',
      title: '6-Minute Rule (Speed/Distance)',
      content: [
        ContentBlock.text('Speed (knots) ÷ 10 = Distance in 6 minutes (NM).'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Example: 6 knots ÷ 10 = 0.6 NM traveled in 6 minutes.',
        ),
      ],
      flashcards: [],
    ),
  ];

  static void assertToolIdsMatchPrefix() {
    for (final item in toolItems) {
      assert(item.id.startsWith('tool_thumbrules_'), 'Invalid ID: ${item.id}');
    }
  }
}










File: lib/data/repositories/tools/tool_calculators_repository.dart
// 📄 lib/data/repositories/tools/tool_calculators_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolCalculatorsRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_calculators_1.00',
      title: 'Hull Speed Calculator',
      content: [
        ContentBlock.text(
          'Use this formula to calculate theoretical hull speed:',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Hull Speed (knots) = 1.34 × √LWL (ft)\n\nExample: 25ft LWL → 1.34 × √25 = 6.7 knots',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_calculators_1.00',
          title: 'Hull Speed Formula',
          sideA: [ContentBlock.text('How do you calculate hull speed?')],
          sideB: [ContentBlock.text('Hull Speed = 1.34 × √LWL')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_calculators_2.00',
      title: 'Fuel Consumption Estimator',
      content: [
        ContentBlock.text('Estimate range based on engine fuel burn rate:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Range (nm) = Fuel Amount (gal) ÷ Burn Rate (gal/hr) × Speed (knots)',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_calculators_2.00',
          title: 'Fuel Range Formula',
          sideA: [
            ContentBlock.text('How to estimate cruising range from fuel?'),
          ],
          sideB: [ContentBlock.text('Range = Fuel ÷ Burn Rate × Speed')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_checklists_repository.dart
// 📄 lib/data/repositories/tools/tool_checklists_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolChecklistsRepository {
  static final toolItems = <ToolItem>[
    ToolItem(
      id: 'tool_checklists_1.00',
      title: 'Pre-Departure Checklist',
      content: [
        ContentBlock.text('Ensure your boat is ready before leaving the dock.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Check weather\n2. Fuel & water\n3. Safety gear\n4. Float plan',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_checklists_1.00',
          title: 'Pre-Departure Essentials',
          sideA: [ContentBlock.text('What do you check before departure?')],
          sideB: [
            ContentBlock.text(
              'Weather, fuel, safety gear, float plan, comms, and crew briefing.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_checklists_2.00',
      title: 'Arrival Checklist',
      content: [
        ContentBlock.text('Wrap things up efficiently at the end of a sail.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Secure boat\n2. Log trip\n3. Stow gear\n4. Rinse & tidy',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_checklists_2.00',
          title: 'Arrival Tasks',
          sideA: [ContentBlock.text('What are key arrival checklist items?')],
          sideB: [
            ContentBlock.text(
              'Secure lines, log trip, rinse gear, stow sails.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_grabbag_repository.dart
import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolGrabbagRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_grabbag_1.00',
      title: 'Headlamp Basics',
      content: [
        ContentBlock.text(
          'Use a red-light headlamp at night to preserve night vision.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Check battery levels before departure.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_grabbag_1.00',
          title: 'Night Vision Tip',
          sideA: [
            ContentBlock.text('What kind of headlamp preserves night vision?'),
          ],
          sideB: [ContentBlock.text('A red-light headlamp.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_grabbag_2.00',
      title: 'Backup Navigation Tools',
      content: [
        ContentBlock.text('Always keep paper charts and a handheld compass.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Battery-powered GPS can fail; analog tools are essential.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_grabbag_2.00',
          title: 'Analog Navigation',
          sideA: [
            ContentBlock.text(
              'What are two essential analog nav tools to carry?',
            ),
          ],
          sideB: [ContentBlock.text('Paper charts and a handheld compass.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_ditchbag_repository.dart
// 📄 lib/data/repositories/tools/tool_ditchbag_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolDitchbagRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_ditchbag_1.00',
      title: 'Ditch Bag Essentials',
      content: [
        ContentBlock.text('Critical items to include in your ditch bag:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Waterproof VHF radio\n2. EPIRB/PLB\n3. Flares\n4. Water & rations\n5. First aid kit',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_ditchbag_1.00',
          title: 'Ditch Bag Contents',
          sideA: [
            ContentBlock.text('Name 3 essential items for your ditch bag.'),
          ],
          sideB: [
            ContentBlock.text('VHF, flares, EPIRB/PLB, food/water, first aid.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_references_repository.dart
// 📄 lib/data/repositories/tools/tool_references_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolReferencesRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_references_1.00',
      title: 'Light and Sound Signals',
      content: [
        ContentBlock.text('Reference for navigation lights and sound signals:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '• One short blast = Port turn\n'
          '• Two = Starboard\n'
          '• Five = Danger/Confusion',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_references_1.00',
          title: 'One Short Blast',
          sideA: [ContentBlock.text('What does one short blast mean?')],
          sideB: [ContentBlock.text('Turn to port.')],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_references_1.01',
          title: 'Five Short Blasts',
          sideA: [
            ContentBlock.text('What is the meaning of five short blasts?'),
          ],
          sideB: [ContentBlock.text('Danger or confusion.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_references_2.00',
      title: 'Day Shapes and Flags',
      content: [
        ContentBlock.text('Common day shapes used on vessels:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '• Ball-Diamond-Ball = Restricted\n'
          '• Single Ball = Anchored\n'
          '• Cone (down) = Motor Sailing',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_references_2.00',
          title: 'Ball-Diamond-Ball',
          sideA: [ContentBlock.text('What does Ball-Diamond-Ball indicate?')],
          sideB: [ContentBlock.text('Restricted in ability to maneuver.')],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_references_2.01',
          title: 'Anchored Day Shape',
          sideA: [ContentBlock.text('What day shape is used for anchoring?')],
          sideB: [ContentBlock.text('Single black ball.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/flashcards/flashcard_repository_index.dart
// 📄 lib/data/repositories/flashcards/flashcard_repository.dart

import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';

/// Returns all flashcards for a given category name (e.g., 'dock', 'deck', 'procedures')
List<Flashcard> getFlashcardsForCategory(String category) {
  final lc = category.toLowerCase();

  if (lc == 'all') {
    return [
      ..._getAllLessonFlashcards(),
      ..._getAllPartFlashcards(),
      ..._getAllToolFlashcards(),
    ];
  }

  if (lc == 'random') {
    final all = [
      ..._getAllLessonFlashcards(),
      ..._getAllPartFlashcards(),
      ..._getAllToolFlashcards(),
    ]..shuffle();
    return all.take(10).toList();
  }

  if (LessonRepositoryIndex.getModuleNames().contains(lc)) {
    return LessonRepositoryIndex.getLessonsForModule(
      lc,
    ).expand((lesson) => lesson.flashcards).toList();
  }

  if (PartRepositoryIndex.getZoneNames().contains(lc)) {
    return PartRepositoryIndex.getPartsForZone(
      lc,
    ).expand((part) => part.flashcards).toList();
  }

  if (ToolRepositoryIndex.getToolbagNames().contains(lc)) {
    return ToolRepositoryIndex.getToolsForBag(
      lc,
    ).expand((tool) => tool.flashcards).toList();
  }

  return [];
}

List<String> getAllCategories() {
  return [
    ...LessonRepositoryIndex.getModuleNames(),
    ...PartRepositoryIndex.getZoneNames(),
    ...ToolRepositoryIndex.getToolbagNames(),
    'all',
    'random',
  ];
}

List<Flashcard> _getAllLessonFlashcards() =>
    LessonRepositoryIndex.getModuleNames()
        .expand((m) => LessonRepositoryIndex.getLessonsForModule(m))
        .expand((l) => l.flashcards)
        .toList();

List<Flashcard> _getAllPartFlashcards() =>
    PartRepositoryIndex.getZoneNames()
        .expand((z) => PartRepositoryIndex.getPartsForZone(z))
        .expand((p) => p.flashcards)
        .toList();

List<Flashcard> _getAllToolFlashcards() =>
    ToolRepositoryIndex.getToolbagNames()
        .expand((t) => ToolRepositoryIndex.getToolsForBag(t))
        .expand((tool) => tool.flashcards)
        .toList();










File: lib/data/repositories/paths/path_repository_index.dart
import 'package:bcc5/data/models/path_model.dart';
import 'package:bcc5/data/repositories/paths/competent_crew_repository.dart';
import 'package:bcc5/utils/logger.dart';

class PathRepositoryIndex {
  static final Map<String, List<LearningPathChapter>> _pathMap = {
    'competent crew': CompetentCrewRepository.getChapters(),
    // more paths...
  };

  static List<LearningPathChapter> getChaptersForPath(String pathName) =>
      _pathMap[pathName.toLowerCase()] ?? [];

  static List<String> getChapterTitles(String pathName) =>
      getChaptersForPath(pathName.toLowerCase()).map((c) => c.title).toList();

  static LearningPathChapter? getChapterById(
    String pathName,
    String chapterId,
  ) {
    try {
      return getChaptersForPath(
        pathName.toLowerCase(),
      ).firstWhere((chapter) => chapter.id == chapterId);
    } catch (_) {
      return null;
    }
  }

  static List<String> getPathNames() => _pathMap.keys.toList();

  static List<PathItem> getAllPathItems(String pathName) =>
      getChaptersForPath(pathName).expand((chapter) => chapter.items).toList();

  static void logAvailablePathKeys() {
    logger.i('🧩 Available path keys: ${_pathMap.keys}');
  }
}










File: lib/data/repositories/paths/competent_crew_repository.dart
import 'package:bcc5/data/models/path_model.dart';

class CompetentCrewRepository {
  static final List<LearningPathChapter> _chapters = [
    for (int i = 1; i <= 6; i++)
      LearningPathChapter(
        id: 'path_competentCrew_${i.toStringAsFixed(2)}',
        title: '$i: Chapter ${(i ^ 2)}',
        items: [
          // 1. LESSON + FLASHCARD
          PathItem(pathItemId: 'lesson_syst_1.00'),
          PathItem(pathItemId: 'flashcard_lesson_syst_1.00'),

          // 2. PART + FLASHCARD
          PathItem(pathItemId: 'part_deck_1.00'),
          PathItem(pathItemId: 'flashcard_part_deck_1.00'),

          // 3. TOOL + FLASHCARD
          PathItem(pathItemId: 'tool_procedures_1.00'),
          PathItem(pathItemId: 'flashcard_tool_procedures_1.00'),

          // 4. LESSON + FLASHCARD
          PathItem(pathItemId: 'lesson_syst_2.00'),
          PathItem(pathItemId: 'flashcard_lesson_syst_2.00'),

          // 5. PART + FLASHCARD
          PathItem(pathItemId: 'part_hull_1.00'),
          PathItem(pathItemId: 'flashcard_part_hull_1.00'),

          // 6. TOOL + FLASHCARD
          PathItem(pathItemId: 'tool_procedures_2.00'),
          PathItem(pathItemId: 'flashcard_tool_procedures_2.00'),

          // 7. LESSON + FLASHCARD
          PathItem(pathItemId: 'lesson_syst_3.00'),
          PathItem(pathItemId: 'flashcard_lesson_syst_3.00'),

          // 8. PART + FLASHCARD
          PathItem(pathItemId: 'part_deck_2.00'),
          PathItem(pathItemId: 'flashcard_part_deck_2.00'),

          // 9. TOOL + FLASHCARD
          PathItem(pathItemId: 'tool_checklists_1.00'),
          PathItem(pathItemId: 'flashcard_tool_checklists_1.00'),

          // 10. LESSON + FLASHCARD
          PathItem(pathItemId: 'lesson_syst_6.00'),
          PathItem(pathItemId: 'flashcard_lesson_syst_6.00'),

          // 11. PART + FLASHCARD
          PathItem(pathItemId: 'part_hull_2.00'),
          PathItem(pathItemId: 'flashcard_part_hull_2.00'),

          // 12. TOOL + FLASHCARD
          PathItem(pathItemId: 'tool_checklists_2.00'),
          PathItem(pathItemId: 'flashcard_tool_checklists_2.00'),
        ],
      ),
  ];

  static List<LearningPathChapter> getChapters() => _chapters;
}










File: lib/data/repositories/paths/competent_crew_repository.dart.bak
// 📄 lib/data/repositories/learning_paths/competent_crew_repository.dart

import 'package:bcc5/data/models/path_model.dart';

class CompetentCrewRepository {
  static final List<LearningPathChapter> _chapters = [
    LearningPathChapter(
      id: 'path_competentCrew_1.00',
      title: '1: Prepare in Advance',
      items: [
        PathItem(pathItemId: 'part_deck_2.00'),
        PathItem(pathItemId: 'lesson_dock_1.00'),
        PathItem(pathItemId: 'lesson_dock_3.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_2.00',
      title: '2: Arrive at the Marina',
      items: [
        PathItem(pathItemId: 'part_deck_3.00'),
        PathItem(pathItemId: 'lesson_dock_4.00'),
        PathItem(pathItemId: 'lesson_dock_5.00'),
        PathItem(pathItemId: 'lesson_dock_6.00'),
        PathItem(pathItemId: 'lesson_dock_7.00'),
        PathItem(pathItemId: 'lesson_dock_8.00'),
        PathItem(pathItemId: 'lesson_dock_9.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_3.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_4.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_3.00',
      title: '3: Get Settled Onboard',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_4.00',
      title: '4: Getting Underway',
      items: [
        PathItem(pathItemId: 'lesson_navi_1.00'),
        PathItem(pathItemId: 'lesson_navi_2.00'),
        PathItem(pathItemId: 'lesson_navi_3.00'),
        PathItem(pathItemId: 'lesson_navi_4.00'),
        PathItem(pathItemId: 'lesson_navi_5.00'),
        PathItem(pathItemId: 'lesson_navi_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_navi_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_navi_2.00'),
        PathItem(pathItemId: 'lesson_safe_1.00'),
        PathItem(pathItemId: 'lesson_safe_2.00'),
        PathItem(pathItemId: 'lesson_safe_3.00'),
        PathItem(pathItemId: 'lesson_safe_4.00'),
        PathItem(pathItemId: 'lesson_safe_5.00'),
        PathItem(pathItemId: 'lesson_safe_6.00'),
        PathItem(pathItemId: 'lesson_safe_7.00'),
        PathItem(pathItemId: 'flashcard_lesson_safe_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_safe_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_5.00',
      title: '5: Allhands Responsibilities',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_6.00',
      title: '6: Sailing at Last',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
  ];

  static List<LearningPathChapter> getChapters() => _chapters;
}










File: lib/data/repositories/parts/part_deck_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class DeckPartRepository {
  static final List<PartItem> partItems = [
    PartItem(
      id: 'part_deck_1.00',
      title: 'Deck Cleats',
      keywords: ['cleat', 'tie', 'dock'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Deck cleats are used for securing lines on the boat.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'They are usually mounted on the deck near mooring points.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_deck_1.00',
          title: 'FC: Cleat Use',
          sideA: [ContentBlock.text('What is the purpose of a deck cleat?')],
          sideB: [
            ContentBlock.text('To secure lines like dock lines or fenders.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_deck_2.00',
      title: 'Winches',
      keywords: ['winch', 'line handling', 'tension'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Winches provide mechanical advantage for tightening lines.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Used for trimming sails and controlling tension.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_deck_2.00',
          title: 'FC: Winch Function',
          sideA: [
            ContentBlock.text('Why are winches important on a sailboat?'),
          ],
          sideB: [
            ContentBlock.text('They help manage line tension when sailing.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_deck_3.00',
      title: 'Lifelines',
      keywords: ['safety', 'fence', 'rail'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Lifelines help prevent crew from falling overboard.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('They run along the edges of the deck for safety.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_deck_3.00',
          title: 'FC: Lifeline Role',
          sideA: [ContentBlock.text('What is the function of lifelines?')],
          sideB: [ContentBlock.text('To provide a safety barrier on deck.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_deck_4.00',
      title: 'Stanchions',
      keywords: ['post', 'lifeline support'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Stanchions are vertical posts supporting lifelines.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'They are mounted securely along the deck perimeter.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_deck_4.00',
          title: 'FC: Stanchion Function',
          sideA: [ContentBlock.text('What are stanchions used for?')],
          sideB: [ContentBlock.text('To support and anchor lifelines.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_deck_5.00',
      title: 'Deck Hatches',
      keywords: ['hatch', 'ventilation'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Deck hatches provide access and ventilation below deck.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'They often include seals and locks for watertightness.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_deck_5.00',
          title: 'FC: Hatch Use',
          sideA: [ContentBlock.text('Why are deck hatches important?')],
          sideB: [ContentBlock.text('They provide light, air, and access.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/parts/part_sails_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class SailsPartRepository {
  static final List<PartItem> partItems = [
    PartItem(
      id: 'part_sails_1.00',
      title: 'Mainsail',
      keywords: ['main', 'power'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The mainsail is the primary sail on most sailboats.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'It provides power when sailing upwind or across the wind.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_sails_2.00',
      title: 'Jib',
      keywords: ['headsail', 'front'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The jib is a headsail located in front of the mast.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'It works together with the mainsail for efficiency.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_sails_3.00',
      title: 'Spinnaker',
      keywords: ['downwind', 'balloon'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The spinnaker is a large sail used for downwind sailing.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It is lightweight and shaped like a parachute.'),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_sails_4.00',
      title: 'Boom Vang',
      keywords: ['control', 'boom'],
      isPaid: false,
      content: [
        ContentBlock.text('The boom vang controls downward force on the boom.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It helps shape the mainsail when sailing downwind.'),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_sails_5.00',
      title: 'Reefing Lines',
      keywords: ['reduce sail', 'safety'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Reefing lines are used to reduce sail area in strong wind.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('They allow safe sailing by minimizing overpower.'),
      ],
      flashcards: [],
    ),
  ];
}










File: lib/data/repositories/parts/part_hull_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class HullPartRepository {
  static final List<PartItem> partItems = [
    PartItem(
      id: 'part_hull_1.00',
      title: 'Keel',
      keywords: ['stability', 'ballast'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The keel provides stability and prevents sideways drift.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It also adds weight low in the hull for balance.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_hull_1.00',
          title: 'FC: Keel Function',
          sideA: [ContentBlock.text('What does the keel do?')],
          sideB: [ContentBlock.text('It adds stability and reduces leeway.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_hull_2.00',
      title: 'Rudder',
      keywords: ['steering', 'control'],
      isPaid: false,
      content: [
        ContentBlock.text('The rudder is used to steer the boat.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It is controlled by the wheel or tiller.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_hull_2.00',
          title: 'FC: Rudder Role',
          sideA: [ContentBlock.text('What is the rudder for?')],
          sideB: [ContentBlock.text('To steer the boat.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_hull_3.00',
      title: 'Hull Skin',
      keywords: ['structure', 'shell'],
      isPaid: false,
      content: [
        ContentBlock.text('The hull skin is the outer structure of the boat.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It protects against water and provides shape.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_hull_3.00',
          title: 'FC: Hull Skin',
          sideA: [ContentBlock.text('What is the hull skin?')],
          sideB: [ContentBlock.text('The watertight shell of the boat.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_hull_4.00',
      title: 'Through-Hulls',
      keywords: ['plumbing', 'drainage'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'Through-hulls allow water or waste to pass in/out of the boat.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('They must be sealed properly to prevent leaks.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_hull_4.00',
          title: 'FC: Through-Hulls',
          sideA: [ContentBlock.text('What are through-hulls used for?')],
          sideB: [ContentBlock.text('For plumbing in and out of the hull.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    PartItem(
      id: 'part_hull_5.00',
      title: 'Bilge',
      keywords: ['drain', 'lowest point'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The bilge is the lowest interior space where water collects.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Pumps remove water from this area to keep the boat dry.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_part_hull_5.00',
          title: 'FC: Bilge Purpose',
          sideA: [ContentBlock.text('What is the bilge?')],
          sideB: [
            ContentBlock.text(
              'The lowest part of the boat that collects water.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/parts/part_repository_index.dart
import 'package:bcc5/data/models/part_model.dart';

import 'part_deck_repository.dart';
import 'part_hull_repository.dart';
import 'part_interior_repository.dart';
import 'part_rigging_repository.dart';
import 'part_sails_repository.dart';

class PartRepositoryIndex {
  static final Map<String, List<PartItem>> _zones = {
    'deck': DeckPartRepository.partItems,
    'hull': HullPartRepository.partItems,
    'interior': InteriorPartRepository.partItems,
    'rigging': RiggingPartRepository.partItems,
    'sails': SailsPartRepository.partItems,
  };

  static List<String> getZoneNames() => _zones.keys.toList();

  static List<PartItem> getPartsForZone(String zone) =>
      _zones[zone.toLowerCase()] ?? [];

  static PartItem? getPartById(String id) {
    for (final items in _zones.values) {
      for (final item in items) {
        if (item.id == id) return item;
      }
    }
    return null;
  }

  static String? getZoneForPartId(String partId) {
    for (final entry in _zones.entries) {
      if (entry.value.any((item) => item.id == partId)) {
        return entry.key;
      }
    }
    return null;
  }

  static void assertPartIdsMatchZonePrefixes() {
    _zones.forEach((zone, items) {
      for (final item in items) {
        assert(
          item.id.startsWith('part_${zone}_'),
          'Invalid ID in $zone: ${item.id}',
        );
      }
    });
  }
}










File: lib/data/repositories/parts/part_interior_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class InteriorPartRepository {
  static final List<PartItem> partItems = [
    PartItem(
      id: 'part_interior_1.00',
      title: 'Galley',
      keywords: ['kitchen', 'cooking'],
      isPaid: false,
      content: [
        ContentBlock.text('The galley is the cooking area aboard the boat.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It includes a stove, sink, and storage for food.'),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_interior_2.00',
      title: 'Head',
      keywords: ['bathroom', 'toilet'],
      isPaid: false,
      content: [
        ContentBlock.text('The head is the marine toilet and washroom area.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Proper use and maintenance are essential aboard.'),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_interior_3.00',
      title: 'Nav Station',
      keywords: ['navigation', 'chart table'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The nav station is where charts and electronics are used.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'It is a workspace for planning routes and monitoring instruments.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_interior_4.00',
      title: 'Berths',
      keywords: ['bed', 'sleep'],
      isPaid: false,
      content: [
        ContentBlock.text('Berths are sleeping areas for crew members.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'They vary in size and comfort depending on the boat.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_interior_5.00',
      title: 'Cabin Sole',
      keywords: ['floor', 'walking'],
      isPaid: false,
      content: [
        ContentBlock.text('The cabin sole is the floor of the interior cabin.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It may lift up to reveal storage or bilge access.'),
      ],
      flashcards: [],
    ),
  ];
}










File: lib/data/repositories/parts/part_rigging_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class RiggingPartRepository {
  static final List<PartItem> partItems = [
    PartItem(
      id: 'part_rigging_1.00',
      title: 'Standing Rigging',
      keywords: ['mast', 'support', 'wires'],
      isPaid: false,
      content: [
        ContentBlock.text('Standing rigging supports the mast.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'It includes stays and shrouds that remain in place.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_rigging_2.00',
      title: 'Running Rigging',
      keywords: ['lines', 'sails'],
      isPaid: false,
      content: [
        ContentBlock.text('Running rigging is used to raise and trim sails.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'These lines are adjustable and operated frequently.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_rigging_3.00',
      title: 'Turnbuckles',
      keywords: ['tension', 'adjustment'],
      isPaid: false,
      content: [
        ContentBlock.text('Turnbuckles adjust tension in standing rigging.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('They are threaded devices used for fine tuning.'),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_rigging_4.00',
      title: 'Chainplates',
      keywords: ['attachment', 'structure'],
      isPaid: false,
      content: [
        ContentBlock.text('Chainplates anchor the rigging to the hull.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'They transfer rigging loads to the boat’s structure.',
        ),
      ],
      flashcards: [],
    ),
    PartItem(
      id: 'part_rigging_5.00',
      title: 'Mast Boot',
      keywords: ['seal', 'leak prevention'],
      isPaid: false,
      content: [
        ContentBlock.text(
          'The mast boot seals the base of the mast at the deck.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('It helps prevent water from leaking below.'),
      ],
      flashcards: [],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_systems_repository.dart
// 📄 lib/data/repositories/lessons/systems_lessons_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class SystemsLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_syst_1.00",
      title: "Get Oriented with the Boat",
      content: [
        ContentBlock.text(
          "Explore key areas of a sailboat, including the cockpit, deck, and cabin.",
        ),
      ],
      keywords: ["boat layout", "cockpit", "deck", "cabin"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_1.00",
          title: "FC: Get Oriented with the Boat",
          sideA: [ContentBlock.text("What are the key areas of a sailboat?")],
          sideB: [
            ContentBlock.text(
              "The cockpit, deck, and cabin are primary areas of a sailboat.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_syst_2.00",
      title: "Free: Essential Boat Equipment",
      content: [
        ContentBlock.text("Understand the essential equipment on a boat."),
      ],
      keywords: ["equipment", "boat safety", "essentials"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_2.00",
          title: "FC: Essential Boat Equipment",
          sideA: [
            ContentBlock.text("What are examples of essential boat equipment?"),
          ],
          sideB: [
            ContentBlock.text(
              "Life jackets, fire extinguishers, and navigation tools.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_syst_3.00",
      title: "Free: Winches",
      content: [
        ContentBlock.text(
          "Overview of a winch’s purpose and safe handling techniques.",
        ),
      ],
      keywords: ["winches", "equipment", "handling"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_3.00",
          title: "FC: Winches",
          sideA: [ContentBlock.text("What is a winch used for on a boat?")],
          sideB: [
            ContentBlock.text(
              "A winch provides mechanical advantage for tightening lines.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_syst_4.00",
      title: "Paid: Use of the Head (Toilet)",
      content: [
        ContentBlock.text(
          "To use the head, pump a small amount of water into the bowl first, then pump 3–4 times after use.",
        ),
      ],
      keywords: ["toilet", "head", "boat equipment"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_4.00",
          title: "FC: Use of the Head (Toilet)",
          sideA: [
            ContentBlock.text("How do you properly use a marine toilet?"),
          ],
          sideB: [
            ContentBlock.text(
              "Pump water in, use the toilet, then pump 3–4 times after use.",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_syst_5.00",
      title: "Paid: Introduction to Boat Equipment",
      content: [
        ContentBlock.text(
          "This lesson covers essential boat equipment every crew member should know.",
        ),
      ],
      keywords: ["equipment", "boat safety", "introduction"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_5.00",
          title: "FC: Introduction to Boat Equipment",
          sideA: [
            ContentBlock.text("Why is it important to know boat equipment?"),
          ],
          sideB: [
            ContentBlock.text(
              "Understanding equipment improves safety and efficiency on board.",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_syst_6.00",
      title: "Free: Parts of the Boat",
      content: [
        ContentBlock.text(
          "Familiarize yourself with key parts of the boat: bow, stern, port, starboard, and boom.",
        ),
      ],
      keywords: ["bow", "stern", "port", "starboard", "boom"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_syst_6.00",
          title: "FC: Parts of the Boat",
          sideA: [
            ContentBlock.text("What are the key directional terms on a boat?"),
          ],
          sideB: [
            ContentBlock.text(
              "Bow (front), stern (back), port (left), starboard (right).",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_repository_index.dart
import 'package:bcc5/data/models/flashcard_model.dart';

import 'lesson_docking_repository.dart';
import 'lesson_emergencies_repository.dart';
import 'lesson_knots_repository.dart';
import 'lesson_navigation_repository.dart';
import 'lesson_safety_repository.dart';
import 'lesson_seamanship_repository.dart';
import 'lesson_systems_repository.dart';
import 'lesson_teamwork_repository.dart';
import 'lesson_terminology_repository.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class LessonRepositoryIndex {
  static final Map<String, List<Lesson>> _modules = {
    'docking': DockingLessonRepository.lessons,
    'emergencies': EmergenciesLessonRepository.lessons,
    'knots': KnotsLessonRepository.lessons,
    'navigation': NavigationLessonRepository.lessons,
    'safety': SafetyLessonRepository.lessons,
    'seamanship': SeamanshipLessonRepository.lessons,
    'systems': SystemsLessonRepository.lessons,
    'teamwork': TeamworkLessonRepository.lessons,
    'terminology': TerminologyLessonRepository.lessons,
  };

  static List<String> getModuleNames() => _modules.keys.toList();

  static List<Lesson> getLessonsForModule(String moduleId) =>
      _modules[moduleId] ?? [];

  static Lesson? getLessonById(String lessonId) {
    for (final lessons in _modules.values) {
      for (final lesson in lessons) {
        if (lesson.id == lessonId) return lesson;
      }
    }
    return null;
  }

  static String? getModuleForLessonId(String lessonId) {
    for (final entry in _modules.entries) {
      if (entry.value.any((lesson) => lesson.id == lessonId)) {
        return entry.key;
      }
    }
    return null;
  }

  static List<Lesson> getAllLessons() =>
      _modules.values.expand((list) => list).toList();

  static Flashcard? getFlashcardById(String id) {
    for (final lesson in getAllLessons()) {
      for (final card in lesson.flashcards) {
        if (card.id == id) return card;
      }
    }
    return null;
  }

  static void assertAllLessonIdsMatchModules() {
    for (final entry in _modules.entries) {
      for (final lesson in entry.value) {
        assert(
          lesson.id.startsWith('lesson_${entry.key}_'),
          'Lesson ID mismatch: ${lesson.id} should start with lesson_${entry.key}_',
        );
      }
    }
  }

  static void assertAllFlashcardIdsValid() {
    for (final entry in _modules.entries) {
      for (final lesson in entry.value) {
        for (final card in lesson.flashcards) {
          assert(
            card.id.startsWith('flashcard_lesson_${entry.key}_'),
            'Flashcard ID mismatch in module ${entry.key}: ${card.id}',
          );
        }
      }
    }
  }
}










File: lib/data/repositories/lessons/lesson_navigation_repository.dart
// 📄 lib/data/repositories/lessons/navigation_lessons_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class NavigationLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_navi_1.00",
      title: "Being a Good Lookout",
      content: [
        ContentBlock.text(
          "Understand the responsibilities of a lookout, including spotting hazards and maintaining awareness.",
        ),
      ],
      keywords: ["navigation", "lookout", "hazards", "awareness"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_1.00",
          title: "FC: Being a Good Lookout",
          sideA: [
            ContentBlock.text("What is a key responsibility of a lookout?"),
          ],
          sideB: [
            ContentBlock.text(
              "Spotting hazards and maintaining situational awareness.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_navi_2.00",
      title: "Weather Awareness Basics",
      content: [
        ContentBlock.text(
          "Introduction to basic weather cues, like cloud patterns and wind shifts, which can impact safety and comfort on the water.",
        ),
      ],
      keywords: ["weather awareness", "basic weather cues", "safety"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_2.00",
          title: "FC: Weather Awareness Basics",
          sideA: [
            ContentBlock.text("Why is recognizing cloud patterns important?"),
          ],
          sideB: [
            ContentBlock.text(
              "Cloud patterns can indicate changing weather conditions.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_navi_3.00",
      title: "Understanding Weather on the Water",
      content: [
        ContentBlock.text(
          "Weather conditions can change quickly on the water, affecting sailing safety and comfort.",
        ),
      ],
      keywords: ["weather", "navigation", "safety"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_3.00",
          title: "FC: Understanding Weather on the Water",
          sideA: [
            ContentBlock.text("What weather conditions can impact sailing?"),
          ],
          sideB: [
            ContentBlock.text(
              "Wind shifts, sudden temperature drops, and cloud formations.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_navi_4.00",
      title: "How to Read Wind Direction",
      content: [
        ContentBlock.text(
          "Reading the wind direction is crucial for effective sailing and anticipating shifts in boat movement.",
        ),
      ],
      keywords: ["wind direction", "sailing", "navigation"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_4.00",
          title: "FC: Reading Wind Direction",
          sideA: [
            ContentBlock.text("Why is wind direction important in sailing?"),
          ],
          sideB: [
            ContentBlock.text(
              "It determines how you adjust the sails and steer the boat.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_navi_5.00",
      title: "Advanced Weather Forecasting",
      content: [
        ContentBlock.text(
          "Getting and interpreting GRIB files for detailed weather forecasts, useful for planning long passages.",
        ),
      ],
      keywords: ["weather", "forecast", "GRIB files", "weather patterns"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_5.00",
          title: "FC: Advanced Weather Forecasting",
          sideA: [ContentBlock.text("What is a GRIB file used for?")],
          sideB: [
            ContentBlock.text(
              "Providing detailed weather forecast data for sailors.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_navi_6.00",
      title: "Weather Awareness",
      content: [
        ContentBlock.text(
          "Recognize signs of approaching weather changes like cloud formations, temperature drops, and sudden wind shifts.",
        ),
      ],
      keywords: ["weather awareness", "weather changes", "safety"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_navi_6.00",
          title: "FC: Weather Awareness",
          sideA: [ContentBlock.text("What are signs of an approaching storm?")],
          sideB: [
            ContentBlock.text(
              "Darkening clouds, dropping temperatures, and increasing wind speed.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_emergencies_repository.dart
// 📄 lib/data/repositories/lessons/lesson_emergencies_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class EmergenciesLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: 'lesson_emer_1.00',
      title: 'Man Overboard Basics',
      content: [
        ContentBlock.text(
          'Learn how to respond swiftly and safely when someone falls overboard. Every second matters during a man overboard scenario.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew coordination and preparedness are key to a successful recovery. Assigning clear roles reduces panic.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Practice man overboard drills regularly to ensure readiness under pressure.',
        ),
      ],
      keywords: ['man overboard', 'emergency', 'safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_1.00',
          title: 'FC: Man Overboard Basics',
          sideA: [
            ContentBlock.text(
              'What is the first action to take in a man overboard situation?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Alert the crew, assign a spotter, and prepare for recovery.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_2.00',
      title: 'Man Overboard Procedure',
      content: [
        ContentBlock.text(
          'IMMEDIATE ACTIONS for MOB: Alert the crew and assign a spotter.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Throw a flotation device and maintain visual contact. Circle around carefully.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Recover the person from the water safely, using equipment if needed.',
        ),
      ],
      keywords: ['man overboard', 'MOB', 'rescue', 'recovery'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_2.00',
          title: 'FC: Man Overboard Procedure',
          sideA: [
            ContentBlock.text(
              'What should the crew do immediately in a man overboard situation?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Throw a flotation device, assign a spotter, turn the boat for recovery.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_3.00',
      title: 'Basic First Aid for Minor Injuries',
      content: [
        ContentBlock.text(
          'Be prepared to treat small injuries like cuts, bruises, or seasickness. A stocked first aid kit is essential.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Apply antiseptic and bandages promptly to avoid infection. Hydration helps with seasickness.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Keep first aid supplies accessible and review their use before setting sail.',
        ),
      ],
      keywords: ['first aid', 'injury', 'safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_3.00',
          title: 'FC: Basic First Aid',
          sideA: [
            ContentBlock.text('What are common minor injuries on a sailboat?'),
          ],
          sideB: [
            ContentBlock.text('Small cuts, bruises, seasickness, sunburns.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_4.00',
      title: 'Safety Equipment',
      content: [
        ContentBlock.text(
          'Know where all safety equipment is located on board. Time is critical in an emergency.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Familiarize yourself with how to use life jackets, fire extinguishers, and radios.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Conduct safety walkthroughs at the beginning of each trip.',
        ),
      ],
      keywords: ['PFD', 'life sling', 'radio', 'fire extinguisher'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_4.00',
          title: 'FC: Safety Equipment',
          sideA: [
            ContentBlock.text(
              'What are essential pieces of safety equipment on a sailboat?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Life jackets, throwable flotation devices, VHF radio, fire extinguisher.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_5.00',
      title: 'Advanced Safety',
      content: [
        ContentBlock.text(
          'Advanced safety techniques include using tethers and storm preparations.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Be proactive: identify risks early and communicate with the crew.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Participate in training for emergency signaling and abandon-ship scenarios.',
        ),
      ],
      keywords: ['advanced safety', 'safety protocols', 'crew safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_5.00',
          title: 'FC: Advanced Safety',
          sideA: [
            ContentBlock.text(
              'What are advanced safety measures every sailor should know?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Tether use, emergency signaling, handling extreme weather.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_6.00',
      title: 'Advanced Emergency Procedures',
      content: [
        ContentBlock.text(
          'Emergencies require calm thinking, clear communication, and quick action.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Understand your emergency plan and assign roles in advance.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Practice drills to stay sharp and reduce panic in real scenarios.',
        ),
      ],
      keywords: ['emergency procedures', 'response', 'emergency response'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_6.00',
          title: 'FC: Advanced Emergency Procedures',
          sideA: [
            ContentBlock.text(
              'What are the steps to follow during a boat emergency?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Assess the situation, communicate clearly, follow emergency protocols.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_safety_repository.dart
// 📄 lib/data/repositories/lessons/safety_lessons_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class SafetyLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_safe_1.00",
      title: "Packing List and Clothing",
      content: [
        ContentBlock.text(
          "Learn what to pack for a sailing trip, including clothing, gear, and safety essentials.",
        ),
      ],
      keywords: ["packing", "gear", "clothing", "preparation"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_1.00",
          title: "FC: Packing List and Clothing",
          sideA: [
            ContentBlock.text(
              "What are essential items to pack for a sailing trip?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Clothing layers, waterproof gear, life jackets, and safety essentials.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_2.00",
      title: "Safety Briefing",
      content: [
        ContentBlock.text(
          "Understand basic safety procedures on board, including life jackets, emergency signals, and safety drills.",
        ),
      ],
      keywords: ["safety briefing", "life jackets", "emergency"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_2.00",
          title: "FC: Safety Briefing",
          sideA: [
            ContentBlock.text(
              "What is a key topic covered in a safety briefing?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Emergency procedures, life jackets, and crew responsibilities.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_3.00",
      title: "Essential Safety Equipment",
      content: [
        ContentBlock.text(
          "Guidance on locating and understanding the use of life jackets, fire extinguishers, and throwable flotation devices to ensure basic onboard safety.",
        ),
      ],
      keywords: ["safety equipment", "life jacket", "fire extinguisher"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_3.00",
          title: "FC: Essential Safety Equipment",
          sideA: [
            ContentBlock.text(
              "What is the purpose of a throwable flotation device?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "To assist a person overboard until they can be rescued.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_4.00",
      title: "Man Overboard Procedure",
      content: [
        ContentBlock.text(
          "IMMEDIATE ACTIONS for MOB. If someone falls overboard, it's important to recover them quickly, especially in cold water.",
        ),
      ],
      keywords: ["man overboard", "MOB", "rescue", "recovery"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_4.00",
          title: "FC: Man Overboard Procedure",
          sideA: [
            ContentBlock.text(
              "What should you do immediately if someone falls overboard?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Shout 'Man Overboard', throw a flotation device, and maintain visual contact.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_5.00",
      title: "Where to Sit on the Boat",
      content: [
        ContentBlock.text(
          "Sit in designated areas that are free from lines and equipment. Avoid sitting in areas like the bow (front) in rough conditions unless instructed.",
        ),
      ],
      keywords: ["safety", "seating", "safe zones"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_5.00",
          title: "FC: Where to Sit on the Boat",
          sideA: [
            ContentBlock.text(
              "Why should you avoid sitting on the bow in rough conditions?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "The bow can become unstable and increase the risk of falling overboard.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_6.00",
      title: "How to Move Around the Boat Safely",
      content: [
        ContentBlock.text(
          "Always hold onto something (known as 'one hand for the boat'). Move slowly and deliberately, and be aware of swinging sails or lines.",
        ),
      ],
      keywords: ["movement", "handrails", "safety"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_6.00",
          title: "FC: How to Move Around the Boat Safely",
          sideA: [ContentBlock.text("What does 'one hand for the boat' mean?")],
          sideB: [
            ContentBlock.text(
              "Always keep one hand holding onto the boat to maintain stability.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_safe_7.00",
      title: "Advanced Safety",
      content: [
        ContentBlock.text(
          "Learn how to stay as safe as possible in various scenarios.",
        ),
      ],
      keywords: ["advanced safety", "safety protocols", "crew safety"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_safe_7.00",
          title: "FC: Advanced Safety",
          sideA: [
            ContentBlock.text(
              "What is one of the key aspects of advanced safety?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Being prepared for multiple emergency situations and knowing protocols.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_knots_repository.dart
// 📄 lib/data/repositories/lessons/knots_lessons_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class KnotsLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_knot_1.00",
      title: "Introductory Knots",
      content: [
        ContentBlock.text(
          "Introduction to two essential knots: figure-eight and cleat hitch.",
        ),
      ],
      keywords: ["figure-eight", "cleat hitch", "basic knots"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_knot_1.00",
          title: "FC: Introductory Knots",
          sideA: [ContentBlock.text("What is a figure-eight knot used for?")],
          sideB: [
            ContentBlock.text(
              "To prevent a line from slipping through an opening.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_knot_2.00",
      title: "Essential Knots",
      content: [
        ContentBlock.text(
          "Learn the bowline, cleat hitch, figure-eight, and two half-hitches.",
        ),
      ],
      keywords: ["knots", "bowline", "cleat hitch"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_knot_2.00",
          title: "FC: Essential Knots",
          sideA: [
            ContentBlock.text(
              "Which knot is best for creating a secure loop that won’t slip?",
            ),
          ],
          sideB: [ContentBlock.text("The bowline knot.")],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_knot_3.00",
      title: "Basic Knots for Sailing",
      content: [
        ContentBlock.text(
          "Knowing basic knots is essential for securing lines.",
        ),
      ],
      keywords: ["knots", "rope_work", "sailing"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_knot_3.00",
          title: "FC: Knots for Sailing",
          sideA: [
            ContentBlock.text("Why is the cleat hitch important in sailing?"),
          ],
          sideB: [
            ContentBlock.text(
              "It secures a line to a cleat quickly and securely.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_knot_4.00",
      title: "How to Coil and Store Lines",
      content: [
        ContentBlock.text(
          "Proper coiling and storage of lines prevent tangles and reduce wear.",
        ),
      ],
      keywords: ["lines", "rope_work", "coiling"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_knot_4.00",
          title: "FC: Coiling and Storing Lines",
          sideA: [
            ContentBlock.text(
              "What is the benefit of properly coiling a line?",
            ),
          ],
          sideB: [
            ContentBlock.text("Prevents tangles and makes deployment easier."),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_knot_5.00",
      title: "Advanced Knots",
      content: [
        ContentBlock.text(
          "Learn advanced knots like the sheet bend and alpine bend.",
        ),
      ],
      keywords: ["advanced knots", "sheet bend", "alpine bend"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_knot_5.00",
          title: "FC: Advanced Knots",
          sideA: [ContentBlock.text("What is a sheet bend used for?")],
          sideB: [ContentBlock.text("Joining two ropes of different sizes.")],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_seamanship_repository.dart
// 📄 lib/data/repositories/lessons/lesson_seamanship_repository.dart

import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class SeamanshipLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_seam_1.00",
      title: "Raising the Sails",
      content: [
        ContentBlock.heading("Teamwork & Terminology"),
        ContentBlock.text(
          "Learn the names of sails and the teamwork required to raise them properly.",
        ),
      ],
      keywords: ["sails", "halyards", "winches"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_seam_1.00",
          title: "FC: Raising the Sails",
          sideA: [
            ContentBlock.text("What is the primary function of halyards?"),
          ],
          sideB: [
            ContentBlock.text("Halyards are used to hoist sails up the mast."),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_seam_2.00",
      title: "Sailing Along - Trimming Sails",
      content: [
        ContentBlock.heading("Trim for Speed"),
        ContentBlock.text(
          "Learn how to trim sails to optimize performance based on wind conditions.",
        ),
      ],
      keywords: ["sail trim", "tacking", "jibing"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_seam_2.00",
          title: "FC: Sailing Along - Trimming Sails",
          sideA: [ContentBlock.text("What does proper sail trimming achieve?")],
          sideB: [
            ContentBlock.text(
              "It optimizes boat speed and efficiency by adjusting sails to wind conditions.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_seam_3.00",
      title: "Understanding Wind and Sail Interaction",
      content: [
        ContentBlock.heading("Harnessing Wind Power"),
        ContentBlock.text(
          "Gain an understanding of how sails interact with the wind to generate propulsion.",
        ),
      ],
      keywords: ["wind", "aerodynamics", "sail force"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_seam_3.00",
          title: "FC: Understanding Wind and Sail Interaction",
          sideA: [
            ContentBlock.text(
              "How does wind generate propulsion on a sailboat?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Wind flows over the sails, creating lift and pushing the boat forward.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_seam_4.00",
      title: "Heaving-To: How to Stop a Sailboat",
      content: [
        ContentBlock.heading("Pausing in Open Water"),
        ContentBlock.text(
          "Learn how to heave-to, an essential sailing maneuver to pause in open water.",
        ),
      ],
      keywords: ["heaving-to", "stopping", "storm tactics"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_seam_4.00",
          title: "FC: Heaving-To: How to Stop a Sailboat",
          sideA: [ContentBlock.text("What is heaving-to?")],
          sideB: [
            ContentBlock.text(
              "A maneuver where the sails and rudder are adjusted to keep the boat nearly stationary in the water.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_teamwork_repository.dart
// 📄 lib/data/repositories/lessons/teamwork_lessons_repository.dart

import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class TeamworkLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_team_1.00",
      title: "Boarding Etiquette",
      content: [
        ContentBlock.text(
          "Learn the proper way to board a sailboat and where to stow gear.",
        ),
      ],
      keywords: ["boarding", "etiquette", "gear storage"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_team_1.00",
          title: "FC: Boarding Etiquette",
          sideA: [
            ContentBlock.text("What is the proper way to board a sailboat?"),
          ],
          sideB: [
            ContentBlock.text(
              "Step carefully, distribute weight evenly, and secure gear immediately.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_team_2.00",
      title: "Free: Welcome Aboard: Expectations and Basic Boat Etiquette",
      content: [
        ContentBlock.text("Brief introduction to crew roles and expectations."),
      ],
      keywords: ["boat etiquette", "crew expectations", "onboard"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_team_2.00",
          title: "FC: Basic Boat Etiquette",
          sideA: [ContentBlock.text("Why is boat etiquette important?")],
          sideB: [
            ContentBlock.text(
              "It ensures safety, smooth operations, and harmony among crew members.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_team_3.00",
      title: "Free: Basic Crew Responsibilities",
      content: [ContentBlock.text("Understand the roles of each crew member.")],
      keywords: ["crew", "roles", "responsibilities"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_team_3.00",
          title: "FC: Basic Crew Responsibilities",
          sideA: [
            ContentBlock.text(
              "What are the primary responsibilities of a crew member?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Assisting in navigation, keeping watch, handling lines, and maintaining safety.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_team_4.00",
      title: "Paid: Crew Roles and Communication",
      content: [
        ContentBlock.text(
          "Clear communication is crucial for coordination and safety.",
        ),
      ],
      keywords: ["crew", "communication", "roles"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_team_4.00",
          title: "FC: Crew Roles and Communication",
          sideA: [
            ContentBlock.text(
              "Why is communication essential among crew members?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Clear communication prevents accidents and ensures smooth operations.",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_team_5.00",
      title: "Paid: Assist in Docking and Anchoring",
      content: [
        ContentBlock.text("Be ready to handle lines and follow directions."),
      ],
      keywords: ["docking", "anchoring", "crew roles"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_team_5.00",
          title: "FC: Assist in Docking and Anchoring",
          sideA: [
            ContentBlock.text(
              "What is a crew member's role in docking and anchoring?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Handling lines, securing the boat, and following skipper instructions.",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_terminology_repository.dart
// 📄 lib/data/repositories/lessons/terminology_lessons_repository.dart

import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class TerminologyLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: "lesson_term_1.00",
      title: "Free: Essential Terms",
      content: [ContentBlock.text("Introduction to essential sailing terms.")],
      keywords: ["essential terms", "sailing basics", "orientation"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_term_1.00",
          title: "FC: Essential Terms",
          sideA: [
            ContentBlock.text(
              "What are some essential sailing terms every crew member should know?",
            ),
          ],
          sideB: [
            ContentBlock.text(
              "Terms like 'bow' (front), 'stern' (back), 'port' (left), 'starboard' (right).",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_term_2.00",
      title: "Free: Common Nautical Terms",
      content: [
        ContentBlock.text(
          "Learn basic terms like “port” (left), “starboard” (right).",
        ),
      ],
      keywords: ["nautical terms", "port", "starboard"],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_term_2.00",
          title: "FC: Common Nautical Terms",
          sideA: [ContentBlock.text("What does 'port' and 'starboard' mean?")],
          sideB: [
            ContentBlock.text(
              "'Port' refers to the left side of the boat, 'starboard' refers to the right side.",
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_term_3.00",
      title: "Paid: Basic Parts of the Boat",
      content: [
        ContentBlock.text(
          "Understand the key parts: mast, boom, rudder, cockpit, and deck.",
        ),
      ],
      keywords: ["boat parts", "mast", "rudder"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_term_3.00",
          title: "FC: Basic Parts of the Boat",
          sideA: [ContentBlock.text("What are the key parts of a sailboat?")],
          sideB: [
            ContentBlock.text(
              "Mast (holds sails), boom (controls sail angle), rudder (steering), cockpit (control area), deck (walking space).",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_term_4.00",
      title: "Paid: Types of Sails",
      content: [
        ContentBlock.text(
          "Main sail, jib, and spinnaker are common types of sails.",
        ),
      ],
      keywords: ["sails", "types of sails", "spinnaker"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_term_4.00",
          title: "FC: Types of Sails",
          sideA: [ContentBlock.text("What are the common types of sails?")],
          sideB: [
            ContentBlock.text(
              "Main sail (primary driving force), jib (front sail), spinnaker (large, balloon-like sail for downwind sailing).",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: "lesson_term_5.00",
      title: "Paid: Points of Sail",
      content: [
        ContentBlock.text(
          "The angle of the boat relative to the wind determines the \"point of sail\".",
        ),
      ],
      keywords: ["points of sail", "wind", "sailing"],
      isPaid: true,
      flashcards: [
        Flashcard(
          id: "flashcard_lesson_term_5.00",
          title: "FC: Points of Sail",
          sideA: [ContentBlock.text("What are the main points of sail?")],
          sideB: [
            ContentBlock.text(
              "Close-hauled (into the wind), beam reach (90° to wind), broad reach (wind behind), run (directly downwind).",
            ),
          ],
          isPaid: true,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_docking_repository.dart
// 📄 lib/data/repositories/lessons/lesson_docking_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class DockingLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: 'lesson_dock_1.00',
      title: 'L1: Handling Dock Lines',
      content: [
        ContentBlock.text(
          'Learn how to approach the dock methodically to ensure smooth arrivals.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use dock lines effectively to secure the boat in variable conditions.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew coordination and preparation makes docking safer and easier.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_2.00',
      title: 'L2: Anchoring - Setting Up',
      content: [
        ContentBlock.text(
          'Anchoring starts with understanding the seabed and wind direction.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use visual cues and depth sounders to choose a safe location.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Scope and anchor type are critical to holding strength.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_3.00',
      title: 'Basics of Side Ties',
      content: [
        ContentBlock.text(
          'Side ties are useful when rafting up with other boats.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Proper fender placement protects both vessels from contact damage.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Choose knots that are secure but easy to untie under load.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_4.00',
      title: 'Returning to Dock - Docking Procedure',
      content: [
        ContentBlock.text(
          'Slow and controlled movements are key when entering a slip.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew should be briefed and in position before final approach.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use visual alignment with dock features to stay centered.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_5.00',
      title: 'Basic Deck Safety and Boom Awareness',
      content: [
        ContentBlock.text(
          'Always maintain three points of contact while on deck.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Watch the boom\'s position to avoid surprise jibes.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Secure loose lines and gear to prevent trip hazards.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_6.00',
      title: 'How to Assist in Docking',
      content: [
        ContentBlock.text(
          'Crew should be stationed and aware of their docking role.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Lines should be coiled and ready to deploy quickly.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Communication between helm and crew is essential for timing.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_7.00',
      title: 'How to Assist in Anchoring',
      content: [
        ContentBlock.text(
          'Listen carefully to helm commands and anticipate needs.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Ensure the anchor is free to drop and flaked correctly.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Watch for signs of dragging or improper setting.'),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_8.00',
      title: 'Lowering the Anchor Safely',
      content: [
        ContentBlock.text(
          'Approach into the wind and stop the boat before dropping anchor.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Let the rode out steadily to avoid tangles.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Observe how the anchor sets and adjust scope if necessary.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_9.00',
      title: 'Raising the Anchor Safely',
      content: [
        ContentBlock.text(
          'Coordinate engine movement with winch operation to reduce strain.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Ensure crew hands are clear of the windlass during retrieval.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Secure the anchor and check it\'s seated properly before departure.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
  ];
}
