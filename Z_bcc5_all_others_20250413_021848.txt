









File: lib/navigation/main_scaffold.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../utils/logger.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class MainScaffold extends StatelessWidget {
  final int branchIndex;
  final Widget child;
  final PreferredSizeWidget? appBar;
  final GlobalKey? harborKey;

  const MainScaffold({
    super.key,
    required this.branchIndex,
    required this.child,
    this.appBar,
    this.harborKey,
  });

  void _onItemTapped(BuildContext context, int index) {
    if (index == branchIndex) return;

    logger.i('üß≠ BNB tapped tab $index ‚Äî switching via GoRouter');

    final routes = ['/', '/lessons', '/parts', '/tools', '/flashcards'];
    final destination = routes[index];

    context.go(
      destination,
      extra: {
        'transitionKey': UniqueKey(),
        'detailRoute': DetailRoute.branch,
        'slideFrom': SlideDirection.none,
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    logger.d('üî∑ Building MainScaffold, tab index: $branchIndex');

    return Scaffold(
      appBar: appBar,
      body: child,
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: branchIndex,
        onTap: (index) => _onItemTapped(context, index),
        type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.anchor_outlined, key: harborKey),
            label: 'Harbor',
          ),

          BottomNavigationBarItem(
            icon: Icon(Icons.public_outlined),
            label: 'Courses',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.sailing_outlined),
            label: 'Parts',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.build), label: 'Tools'),
          BottomNavigationBarItem(
            icon: Icon(Icons.quiz_outlined),
            label: 'Drills',
          ),
        ],
      ),
    );
  }
}










File: lib/navigation/app_router.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/screens/paths/path_item_screen.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/screens/landing_screen/landing_screen.dart';
import 'package:bcc5/screens/lessons/lesson_module_screen.dart';
import 'package:bcc5/screens/lessons/lesson_item_screen.dart';
import 'package:bcc5/screens/lessons/lesson_detail_screen.dart';
import 'package:bcc5/screens/parts/part_zone_screen.dart';
import 'package:bcc5/screens/parts/part_item_screen.dart';
import 'package:bcc5/screens/parts/part_detail_screen.dart';
import 'package:bcc5/screens/tools/tool_bag_screen.dart';
import 'package:bcc5/screens/tools/tool_item_screen.dart';
import 'package:bcc5/screens/tools/tool_detail_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_category_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_item_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_detail_screen.dart';
import 'package:bcc5/screens/paths/path_chapter_screen.dart';
// import 'package:bcc5/screens/paths/path_item_screen.dart';
import 'package:bcc5/utils/transition_manager.dart';

final appRouter = GoRouter(
  initialLocation: '/',
  routes: [
    // üèÅ Landing
    GoRoute(
      path: '/',
      name: 'landing',
      pageBuilder: (context, state) {
        logger.i('üèÅ Entering LandingScreen');

        final showReminder =
            (state.extra as Map<String, dynamic>?)?['showReminder'] as bool? ??
            false;

        // ‚úÖ Onboarding GlobalKeys (created once in this route scope)
        final mobKey = GlobalKey(debugLabel: 'MOBKey');
        final settingsKey = GlobalKey(debugLabel: 'SettingsKey');
        final searchKey = GlobalKey(debugLabel: 'SearchKey');
        final titleKey = GlobalKey(debugLabel: 'TitleKey');
        final harborKey = GlobalKey(debugLabel: 'HarborIconKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          child: MainScaffold(
            branchIndex: 0,
            harborKey: harborKey,
            child: LandingScreen(
              showReminder: showReminder,
              harborKey: harborKey,
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üß≠ Learning Paths
    GoRoute(
      path: '/learning-paths/:pathName',
      name: 'learning-path',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 0,
            child: PathChapterScreen(
              pathName: pathName,
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/learning-paths/:pathName/items',
      name: 'learning-path-items',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final chapterId = extras['chapterId'] as String?;
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;

        // ‚úÖ Fix: Fallback GlobalKeys
        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          child: MainScaffold(
            branchIndex: 0,
            child: PathItemScreen(
              pathName: pathName,
              chapterId: chapterId ?? '',
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üìò Lessons
    GoRoute(
      path: '/lessons',
      name: 'lessons',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        logger.i('üìò Entering LessonModuleScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(state.pageKey.toString()),
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 1,
            child: LessonModuleScreen(
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/lessons/items',
      name: 'lesson-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final module = extras['module'] as String?;
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        if (module == null) {
          logger.e('‚ùå Missing module parameter for LessonItemScreen');
          return TransitionManager.buildCustomTransition(
            context: context,
            state: state,
            transitionKey: state.pageKey,
            child: MainScaffold(
              branchIndex: 1,
              child: LessonModuleScreen(
                mobKey: extras['mobKey'],
                settingsKey: extras['settingsKey'],
                searchKey: extras['searchKey'],
                titleKey: extras['titleKey'],
              ),
            ),
          );
        }

        logger.i(
          'üìò Navigating to LessonItemScreen for module: $module | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 1,
            child: LessonItemScreen(
              module: module,
              mobKey: extras['mobKey'],
              settingsKey: extras['settingsKey'],
              searchKey: extras['searchKey'],
              titleKey: extras['titleKey'],
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/lessons/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: LessonDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üß© Parts
    GoRoute(
      path: '/parts',
      name: 'parts',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        logger.i('üß© Entering PartZoneScreen');

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 2,
            child: PartZoneScreen(
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/parts/items',
      name: 'part-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final zone = extras['zone'] as String? ?? '';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üß© Navigating to PartItemScreen for zone: $zone | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 2,
            child: PartItemScreen(
              zone: zone,
              mobKey: extras['mobKey'],
              settingsKey: extras['settingsKey'],
              searchKey: extras['searchKey'],
              titleKey: extras['titleKey'],
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/parts/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: PartDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
              mobKey: extras['mobKey'],
              settingsKey: extras['settingsKey'],
              searchKey: extras['searchKey'],
              titleKey: extras['titleKey'],
            ),
          ),
        );
      },
    ),

    // üõ†Ô∏è Tools
    GoRoute(
      path: '/tools',
      name: 'tools',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;

        logger.i('üõ†Ô∏è Entering ToolsScreen');

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 3,
            child: ToolBagScreen(
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/tools/items',
      name: 'tool-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final toolbag = extras['toolbag'] as String? ?? '';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üõ†Ô∏è Navigating to ToolItemScreen for toolbag: $toolbag | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 3,
            child: ToolItemScreen(
              toolbag: toolbag,
              mobKey: extras['mobKey'],
              settingsKey: extras['settingsKey'],
              searchKey: extras['searchKey'],
              titleKey: extras['titleKey'],
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/tools/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        logger.i('üì¶ /tools/detail Route Triggered');
        logger.i(' - renderItems: ${renderItems.length}');
        logger.i(' - currentIndex: $currentIndex');
        logger.i(' - branchIndex: $branchIndex');
        logger.i(' - backDestination: $backDestination');
        logger.i(' - backExtra: $backExtra');
        logger.i(' - detailRoute: $detailRoute');
        logger.i(' - transitionKey: $transitionKey');
        logger.i(' - mobKey: $mobKey');
        logger.i(' - settingsKey: $settingsKey');
        logger.i(' - searchKey: $searchKey');
        logger.i(' - titleKey: $titleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: ToolDetailScreen(
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    // üÉè Flashcards
    GoRoute(
      path: '/flashcards',
      name: 'flashcards',
      pageBuilder: (context, state) {
        logger.i('üìá Entering FlashcardCategoryScreen');

        final extras = state.extra as Map<String, dynamic>? ?? {};
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.left;
        final transitionType =
            extras['transitionType'] as TransitionType? ?? TransitionType.slide;

        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 4,
            child: FlashcardCategoryScreen(
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/flashcards/items',
      name: 'flashcardItems',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final category = extras['category'] as String? ?? 'all';
        final slideFrom =
            extras['slideFrom'] as SlideDirection? ?? SlideDirection.none;
        final transitionType =
            extras['transitionType'] as TransitionType? ??
            TransitionType.instant;
        final detailRoute =
            extras['detailRoute'] as DetailRoute? ?? DetailRoute.branch;

        logger.i(
          'üìá Navigating to FlashcardItemScreen for category: $category | detailRoute: $detailRoute',
        );

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          slideFrom: slideFrom,
          transitionType: transitionType,
          child: MainScaffold(
            branchIndex: 4,
            child: FlashcardItemScreen(
              category: category,
              mobKey: extras['mobKey'],
              settingsKey: extras['settingsKey'],
              searchKey: extras['searchKey'],
              titleKey: extras['titleKey'],
            ),
          ),
        );
      },
    ),

    GoRoute(
      path: '/flashcards/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;

        final renderItems = extras['renderItems'] as List<RenderItem>;
        final currentIndex =
            extras['currentIndex'] ?? extras['startIndex'] ?? 0;
        final branchIndex = extras['branchIndex'] ?? 4;
        final backDestination = extras['backDestination'] ?? '/';
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;
        final transitionKey = extras['transitionKey'] as String;

        // ‚úÖ Required GlobalKeys fallback to safe defaults
        final mobKey =
            extras['mobKey'] as GlobalKey? ?? GlobalKey(debugLabel: 'MOBKey');
        final settingsKey =
            extras['settingsKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SettingsKey');
        final searchKey =
            extras['searchKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'SearchKey');
        final titleKey =
            extras['titleKey'] as GlobalKey? ??
            GlobalKey(debugLabel: 'TitleKey');

        logger.i('üÉè Entering FlashcardDetailScreen with extra: $extras');

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: ValueKey(transitionKey),
          child: MainScaffold(
            branchIndex: branchIndex,
            child: FlashcardDetailScreen(
              key: ValueKey(currentIndex),
              renderItems: renderItems,
              currentIndex: currentIndex,
              branchIndex: branchIndex,
              backDestination: backDestination,
              backExtra: backExtra,
              detailRoute: detailRoute,
              transitionKey: transitionKey,
              mobKey: mobKey,
              settingsKey: settingsKey,
              searchKey: searchKey,
              titleKey: titleKey,
            ),
          ),
        );
      },
    ),
  ],
);










File: lib/navigation/detail_route.dart
// lib/navigation/detail_route.dart

enum DetailRoute { path, branch, search }










File: lib/navigation/scaffold_helpers.dart
import 'package:flutter/material.dart';
import 'main_scaffold.dart';

/// Wraps any screen with the MainScaffold layout,
/// ensuring the BottomNavigationBar remains visible.
///
/// [branchIndex] determines which BNB tab is highlighted.
/// [child] is the content screen to render inside the scaffold.
Widget withBNB({required int branchIndex, required Widget child}) {
  return MainScaffold(branchIndex: branchIndex, child: child);
}










File: lib/bcc5_app.dart
// üìÑ lib/bcc5_app.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/app_router.dart';

class Bcc5App extends StatelessWidget {
  final bool showReminder;

  const Bcc5App({super.key, required this.showReminder});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'BCC5 Sailing App',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      routerConfig: appRouter, // You may need to inject showReminder into this
    );
  }
}










File: lib/utils/location_helper.dart
import 'package:geolocator/geolocator.dart';
import 'package:bcc5/utils/logger.dart';

Future<Position?> getCurrentLocation() async {
  bool serviceEnabled;
  LocationPermission permission;

  serviceEnabled = await Geolocator.isLocationServiceEnabled();
  if (!serviceEnabled) {
    logger.w('üì° Location services are disabled.');
    return null;
  }

  permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied) {
    permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied) {
      logger.w('‚ùå Location permission denied.');
      return null;
    }
  }

  if (permission == LocationPermission.deniedForever) {
    logger.e('üö´ Location permissions are permanently denied.');
    return null;
  }

  final position = await Geolocator.getCurrentPosition();
  logger.i('üìç Got location: ${position.latitude}, ${position.longitude}');
  return position;
}

String formatToMarineCoord(
  double decimal, {
  required bool isLat,
  bool full = false,
}) {
  final direction =
      isLat ? (decimal >= 0 ? 'N' : 'S') : (decimal >= 0 ? 'E' : 'W');

  final abs = decimal.abs();
  final degrees = abs.floor();
  final minutesDecimal = (abs - degrees) * 60;

  if (full) {
    final fullMinutes = minutesDecimal.floor();
    final seconds = ((minutesDecimal - fullMinutes) * 60).toStringAsFixed(1);
    return '$degrees¬∞$fullMinutes\'$seconds"$direction';
  } else {
    final minutes = minutesDecimal.toStringAsFixed(3).padLeft(6, '0');
    return '$direction $degrees¬∞ $minutes\'';
  }
}










File: lib/utils/id_parser.dart
// üü† lib/utils/id_parser.dart

/// Extracts the [type] from a content ID, e.g. 'lesson' from 'lesson_docking_1.00'
String getTypeFromId(String id) {
  final parts = id.split('_');
  return parts.isNotEmpty ? parts[0] : 'unknown';
}

/// Extracts the [group] from a content ID, e.g. 'docking' from 'lesson_docking_1.00'
String getGroupFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 2 ? parts[1] : 'unknown';
}

/// Extracts the [sequence number] from a content ID, e.g. '1.00' from 'lesson_docking_1.00'
String getSequenceFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 3 ? parts[2] : 'unknown';
}










File: lib/utils/tour_manager.dart
// class TourManager {
//   static const _hasSeenLandingTourKey = 'hasSeenLandingTour';

//   static Future<bool> hasSeenLandingTour() async {
//     final prefs = await SharedPreferences.getInstance();
//     return prefs.getBool(_hasSeenLandingTourKey) ?? false;
//   }

//   static Future<void> markLandingTourSeen() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setBool(_hasSeenLandingTourKey, true);
//   }

//   static Future<void> resetLandingTour() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.remove(_hasSeenLandingTourKey);
//   }
// }










File: lib/utils/radio_helper.dart
// üìÑ lib/utils/radio_helper.dart

import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/settings_manager.dart';

String formatPhonetic(String name) {
  final nato = {
    'a': 'Alpha',
    'b': 'Bravo',
    'c': 'Charlie',
    'd': 'Delta',
    'e': 'Echo',
    'f': 'Foxtrot',
    'g': 'Golf',
    'h': 'Hotel',
    'i': 'India',
    'j': 'Juliet',
    'k': 'Kilo',
    'l': 'Lima',
    'm': 'Mike',
    'n': 'November',
    'o': 'Oscar',
    'p': 'Papa',
    'q': 'Quebec',
    'r': 'Romeo',
    's': 'Sierra',
    't': 'Tango',
    'u': 'Uniform',
    'v': 'Victor',
    'w': 'Whiskey',
    'x': 'X-ray',
    'y': 'Yankee',
    'z': 'Zulu',
  };

  return name
      .toLowerCase()
      .split('')
      .map((char) {
        if (nato.containsKey(char)) return nato[char]!;
        if (RegExp(r'[0-9]').hasMatch(char)) return char; // numbers stay as-is
        return char.toUpperCase(); // fallback for symbols
      })
      .join(' ');
}

String formatSoulsOnboard(int adults, int children) {
  if (adults == 0 && children == 0) {
    return 'Total number of people onboard is unknown.';
  }
  if (adults > 0 && children == 0) {
    return 'We have $adults adult${adults > 1 ? 's' : ''} onboard.';
  }
  if (adults == 0 && children > 0) {
    return 'We have $children child${children > 1 ? 'ren' : ''} onboard.';
  }
  return 'We have $adults adult${adults > 1 ? 's' : ''} and $children child${children > 1 ? 'ren' : ''} onboard.';
}

String formatGPSForRadio(double lat, double lon, GPSDisplayFormat format) {
  switch (format) {
    case GPSDisplayFormat.marineCompact:
      return '${_speakMarineCoord(lat, isLat: true)}\n'
          '${_speakMarineCoord(lon, isLat: false)}';

    case GPSDisplayFormat.marineFull:
      return '${_speakMarineCoord(lat, isLat: true, full: true)}\n'
          '${_speakMarineCoord(lon, isLat: false, full: true)}';

    case GPSDisplayFormat.decimal:
      return 'Latitude: ${lat.toStringAsFixed(5)} degrees\n'
          'Longitude: ${lon.toStringAsFixed(5)} degrees';
  }
}

String _speakMarineCoord(
  double decimal, {
  required bool isLat,
  bool full = false,
}) {
  final direction =
      isLat
          ? (decimal >= 0 ? 'North' : 'South')
          : (decimal >= 0 ? 'East' : 'West');

  final abs = decimal.abs();
  final degrees = abs.floor();
  final minutesDecimal = (abs - degrees) * 60;

  final spokenDegrees = _speakDigits(degrees.toString());

  if (full) {
    final minutes = minutesDecimal.floor();
    final seconds = ((minutesDecimal - minutes) * 60).round();
    final spokenMinutes = _speakDigits(minutes.toString());
    final spokenSeconds = _speakDigits(seconds.toString());
    return '$spokenDegrees degrees, $spokenMinutes minutes, $spokenSeconds seconds $direction';
  } else {
    final parts = minutesDecimal.toStringAsFixed(3).split('.');
    final spokenMinutesWhole = _speakDigits(parts[0]);
    final spokenMinutesDecimal = _speakDigits(parts[1]);
    return '$spokenDegrees degrees decimal $spokenMinutesWhole decimal $spokenMinutesDecimal minutes $direction';
  }
}

String _speakDigits(String numberStr) {
  const digitWords = [
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
  ];

  return numberStr
      .split('')
      .map((char) => digitWords[int.parse(char)])
      .join('-');
}

// Future<String> buildPhoneticVesselIntro() async {
//   final boatName = await SettingsManager.getBoatName();
//   final type = await SettingsManager.getVesselType();
//   final fullName = "$type $boatName".trim();
//   final phonetic = formatPhonetic(fullName);
//   return 'This is $type $phonetic.';
// }

Future<String> buildPhoneticVesselIntro() async {
  final boatName = await SettingsManager.getBoatName();
  final type = await SettingsManager.getVesselType();

  if (boatName.isEmpty || type.isEmpty) {
    logger.w('‚ö†Ô∏è Missing boat name or vessel type in buildPhoneticVesselIntro');
  }

  final fullName = boatName.trim();
  final phonetic = formatPhonetic(fullName);

  return 'This is the $type $fullName, $fullName, $fullName: $phonetic';
}

String getPluralizedUnit(String unit, String length) {
  final isSingular = length == '1';

  if (unit == 'meters') {
    return isSingular ? 'meter' : 'meters';
  } else {
    return isSingular ? 'foot' : 'feet';
  }
}

Future<String> buildSpokenVesselDescription() async {
  final length = (await SettingsManager.getVesselLength()).trim();
  final type = (await SettingsManager.getVesselType()).trim();
  final description = (await SettingsManager.getVesselDescription()).trim();
  final unit =
      (await SettingsManager.getUnitPreference())
          .trim()
          .toLowerCase(); // 'feet' or 'meters'

  if (length.isEmpty || type.isEmpty) {
    logger.w(
      '‚ö†Ô∏è Missing vessel length or type in buildSpokenVesselDescription',
    );
  }

  final unitLabel = unit == 'meters' ? 'meter' : 'foot';
  final hyphenated = '$length-$unitLabel $type';

  if (description.isNotEmpty) {
    return 'We are a $hyphenated, with ${description.trim()}.';
  } else {
    return 'We are a $hyphenated.';
  }
}

String formatSpokenDigits(String input) {
  final digits = input.replaceAll(RegExp(r'[^0-9]'), '');
  return digits.split('').map(_digitToWord).join('-');
}

String _digitToWord(String d) {
  const map = {
    '0': 'zero',
    '1': 'one',
    '2': 'two',
    '3': 'three',
    '4': 'four',
    '5': 'five',
    '6': 'six',
    '7': 'seven',
    '8': 'eight',
    '9': 'nine',
  };
  return map[d] ?? d;
}










File: lib/utils/transition_manager.dart
import 'dart:ui';

import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/resume_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class TransitionManager {
  static void goToDetailScreen({
    required BuildContext context,
    required RenderItemType screenType,
    required List<RenderItem> renderItems,
    required int currentIndex,
    required int branchIndex,
    required String backDestination,
    required Map<String, dynamic>? backExtra,
    required DetailRoute detailRoute,
    SlideDirection direction = SlideDirection.none,
    TransitionType transitionType = TransitionType.slide,
  }) {
    // ‚úÖ Save resume point if navigating within path
    if (detailRoute == DetailRoute.path &&
        currentIndex >= 0 &&
        currentIndex < renderItems.length) {
      final item = renderItems[currentIndex];
      final pathName = backExtra?['pathName'] as String?;
      final chapterId = backExtra?['chapterId'] as String?;
      if (pathName != null && chapterId != null) {
        ResumeManager.saveResumePoint(
          pathName: pathName,
          chapterId: chapterId,
          itemId: item.id,
        );
      }
    }
    final route = _getRouteForScreenType(screenType);
    final transitionKey = UniqueKey().toString();

    logger.i(
      '[TransitionManager] goToDetailScreen ‚Üí '
      'type: $screenType | route: $route | index: $currentIndex\n'
      '‚Üí detailRoute: $detailRoute | direction: $direction\n'
      '‚Üí backDestination: $backDestination | transitionKey: $transitionKey',
    );

    context.go(
      route,
      extra: {
        'renderItems': renderItems,
        'currentIndex': currentIndex,
        'branchIndex': branchIndex,
        'backDestination': backDestination,
        'backExtra': backExtra,
        'detailRoute': detailRoute,
        'transitionKey': transitionKey,
        'slideFrom': direction,
        'transitionType': transitionType, // ‚úÖ NEW FIELD
      },
    );
  }

  static String _getRouteForScreenType(RenderItemType type) {
    switch (type) {
      case RenderItemType.lesson:
        return '/lessons/detail';
      case RenderItemType.part:
        return '/parts/detail';
      case RenderItemType.tool:
        return '/tools/detail';
      case RenderItemType.flashcard:
        return '/flashcards/detail';
    }
  }

  /// Route-level transition builder for GoRouter `pageBuilder`
  static CustomTransitionPage buildCustomTransition({
    required BuildContext context,
    required GoRouterState state,
    required ValueKey<String> transitionKey,
    required Widget child,
    SlideDirection slideFrom = SlideDirection.none,
    TransitionType transitionType = TransitionType.instant,
  }) {
    final extra = state.extra;

    final detailRoute =
        extra is Map<String, dynamic> && extra['detailRoute'] is DetailRoute
            ? extra['detailRoute'] as DetailRoute
            : (() {
              logger.w(
                '[TransitionManager] ‚ùó Missing detailRoute in .extra ‚Äî defaulting to DetailRoute.branch',
              );
              return DetailRoute.branch;
            })();

    final effectiveSlideFrom =
        extra is Map<String, dynamic> && extra['slideFrom'] is SlideDirection
            ? extra['slideFrom'] as SlideDirection
            : slideFrom;

    final effectiveTransitionType =
        extra is Map<String, dynamic> &&
                extra['transitionType'] is TransitionType
            ? extra['transitionType'] as TransitionType
            : transitionType;

    logger.i(
      '[TransitionManager] buildCustomTransition ‚Üí '
      'detailRoute: $detailRoute | transitionType: $effectiveTransitionType | slideFrom: $effectiveSlideFrom',
    );

    // ‚úÖ Add these additional transitions into your transitionsBuilder

    // ‚úÖ Add these additional transitions into your transitionsBuilder

    return CustomTransitionPage(
      key: transitionKey,
      child: child,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        switch (effectiveTransitionType) {
          case TransitionType.instant:
            return buildInstantTransition(child);

          case TransitionType.slide:
            return buildSlideTransition(child, animation, effectiveSlideFrom);

          case TransitionType.fade:
            return FadeTransition(opacity: animation, child: child);

          case TransitionType.scale:
            return ScaleTransition(
              scale: Tween<double>(begin: 0.9, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.fadeScale:
            return buildScaleFadeTransition(
              child,
              animation,
              secondaryAnimation,
            );

          case TransitionType.rotation:
            return RotationTransition(turns: animation, child: child);

          case TransitionType.slideUp:
            return buildSlideTransition(child, animation, SlideDirection.up);

          case TransitionType.slideDown:
            return buildSlideTransition(child, animation, SlideDirection.down);

          case TransitionType.slideLeft:
            return buildSlideTransition(child, animation, SlideDirection.left);

          case TransitionType.slideRight:
            return buildSlideTransition(child, animation, SlideDirection.right);

          case TransitionType.zoomIn:
            return ScaleTransition(
              scale: Tween<double>(begin: 0.0, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.zoomOut:
            return ScaleTransition(
              scale: Tween<double>(begin: 2.0, end: 1.0).animate(animation),
              child: child,
            );

          case TransitionType.blurFade:
            return FadeTransition(
              opacity: animation,
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 4, sigmaY: 4),
                child: child,
              ),
            );

          // You can fill in these with actual animations later
          case TransitionType.morph:
          case TransitionType.carousel:
          case TransitionType.sharedAxis:
          case TransitionType.ripple:
          case TransitionType.delayFade:
          case TransitionType.staggered:
          case TransitionType.cube:
          case TransitionType.flip:
          case TransitionType.slide3D:
            logger.w(
              '[TransitionManager] Transition type not yet implemented: $effectiveTransitionType',
            );
            return child;
        }
      },
    );
  }
}

/// Used for in-group transitions (Next/Previous)
Widget buildScaleFadeTransition(
  Widget child,
  Animation<double> animation,
  Animation<double> secondaryAnimation,
) {
  return ScaleTransition(
    scale: Tween<double>(begin: 0.95, end: 1.0).animate(animation),
    child: FadeTransition(opacity: animation, child: child),
  );
}

/// Used for instant appearance (default)
Widget buildInstantTransition(Widget child) {
  return child;
}

/// Used for initial entry into detail screen via path/search
Widget buildSlideTransition(
  Widget child,
  Animation<double> animation,
  SlideDirection direction,
) {
  late final Offset beginOffset;
  switch (direction) {
    case SlideDirection.right:
      beginOffset = const Offset(1.0, 0.0);
      break;
    case SlideDirection.left:
      beginOffset = const Offset(-1.0, 0.0);
      break;
    case SlideDirection.down:
      beginOffset = const Offset(0.0, 1.0);
      break;
    case SlideDirection.up:
      beginOffset = const Offset(0.0, -1.0);
      break;
    case SlideDirection.none:
      return child;
  }

  return SlideTransition(
    position: Tween<Offset>(
      begin: beginOffset,
      end: Offset.zero,
    ).animate(animation),
    child: child,
  );
}










File: lib/utils/logger.dart
import 'package:logger/logger.dart';

final logger = Logger(
  printer: PrettyPrinter(
    methodCount: 1,
    colors: true,
    printEmojis: true,
    dateTimeFormat: DateTimeFormat.none, // ‚úÖ Modern replacement for printTime
  ),
);










File: lib/utils/settings_manager.dart
// üìÑ lib/utils/settings_manager.dart

import 'package:shared_preferences/shared_preferences.dart';

enum GPSDisplayFormat {
  marineCompact, // e.g., 37¬∞46.493'N
  decimal, // e.g., 37.7749¬∞, -122.4194¬∞
  marineFull, // e.g., 37¬∞46'29.6"N
}

class SettingsManager {
  // Preference keys
  static const _gpsFormatKey = 'gpsDisplayFormat';
  static const _boatNameKey = 'boatName';
  static const _vesselTypeKey = 'vesselType';
  static const _vesselLengthKey = 'vesselLength';
  static const _vesselDescriptionKey = 'vesselDescription';
  static const _soulsAdultsKey = 'soulsAdults';
  static const _soulsChildrenKey = 'soulsChildren';
  static const _mmsiKey = 'mmsi';
  static const _emergencyContactKey = 'emergencyContact';
  static const _captainPhoneKey = 'captainPhone';
  static const _emergencyReminderEnabledKey = 'emergencyReminderEnabled';

  static Future<void> setGPSDisplayFormat(GPSDisplayFormat format) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_gpsFormatKey, format.index);
  }

  static Future<GPSDisplayFormat> getGPSDisplayFormat() async {
    final prefs = await SharedPreferences.getInstance();
    final index = prefs.getInt(_gpsFormatKey);
    return GPSDisplayFormat.values[index ?? 0]; // Default: marineCompact
  }

  // Emergency Info Reminder
  static Future<bool> getEmergencyReminderEnabled() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_emergencyReminderEnabledKey) ?? true;
  }

  static Future<void> setEmergencyReminderEnabled(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_emergencyReminderEnabledKey, value);
  }

  // Boat Info
  static Future<String> getBoatName() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_boatNameKey) ?? '';
  }

  static Future<void> setBoatName(String name) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_boatNameKey, name);
  }

  static Future<String> getVesselType() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselTypeKey) ?? '';
  }

  static Future<void> setVesselType(String type) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselTypeKey, type);
  }

  static Future<String> getVesselLength() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselLengthKey) ?? '';
  }

  static Future<void> setVesselLength(String length) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselLengthKey, length);
  }

  static Future<String> getVesselDescription() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_vesselDescriptionKey) ?? '';
  }

  static Future<void> setVesselDescription(String description) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_vesselDescriptionKey, description);
  }

  static Future<int> getSoulsAdults() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(_soulsAdultsKey) ?? 0;
  }

  static Future<void> setSoulsAdults(int count) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_soulsAdultsKey, count);
  }

  static Future<int> getSoulsChildren() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(_soulsChildrenKey) ?? 0;
  }

  static Future<void> setSoulsChildren(int count) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_soulsChildrenKey, count);
  }

  static Future<String> getMMSI() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_mmsiKey) ?? '';
  }

  static Future<void> setMMSI(String mmsi) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_mmsiKey, mmsi);
  }

  static Future<String> getEmergencyContact() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_emergencyContactKey) ?? '';
  }

  static Future<void> setEmergencyContact(String phone) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_emergencyContactKey, phone);
  }

  static Future<String> getCaptainPhone() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_captainPhoneKey) ?? '';
  }

  static Future<void> setCaptainPhone(String phone) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_captainPhoneKey, phone);
  }

  static const _emergencyInfoReviewedKey = 'emergencyInfoReviewedAt';

  static Future<String?> getEmergencyInfoReviewedAt() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_emergencyInfoReviewedKey);
  }

  static Future<void> setEmergencyInfoReviewedNow() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now().toIso8601String();
    await prefs.setString(_emergencyInfoReviewedKey, now);
  }

  static Future<void> clearEmergencyInfoReviewed() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_emergencyInfoReviewedKey);
  }

  static Future<String> getUnitPreference() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('unitPreference') ?? 'feet'; // default to feet
  }
}










File: lib/utils/resume_manager.dart
import 'package:bcc5/utils/logger.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ResumeManager {
  static const String _prefix = 'resume_';
  static const String _keyPathName = 'resume_path_name';
  static const String _keyChapterId = 'resume_chapter_id';
  static const String _keyItemId = 'resume_item_id';

  static Future<void> saveProgress({
    required String pathName,
    required String chapterId,
    required String itemId,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    final value = '$chapterId|$itemId';
    await prefs.setString(key, value);
  }

  static Future<(String chapterId, String itemId)?> getProgress(
    String pathName,
  ) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    final value = prefs.getString(key);
    if (value == null) return null;

    final parts = value.split('|');
    if (parts.length != 2) return null;

    return (parts[0], parts[1]); // chapterId, itemId
  }

  static Future<void> clearProgress(String pathName) async {
    final prefs = await SharedPreferences.getInstance();
    final key = '$_prefix${pathName.toLowerCase()}';
    await prefs.remove(key);
  }

  static Future<void> clearResumePoint() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_keyPathName);
    await prefs.remove(_keyChapterId);
    await prefs.remove(_keyItemId);
  }

  static Future<void> saveResumePoint({
    required String pathName,
    required String chapterId,
    required String itemId,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_keyPathName, pathName);
    await prefs.setString(_keyChapterId, chapterId);
    await prefs.setString(_keyItemId, itemId);
    logger.i('üíæ Saved resume point ‚Üí $pathName / $chapterId / $itemId');
  }

  static Future<Map<String, String>?> getResumePoint() async {
    final prefs = await SharedPreferences.getInstance();

    final pathName = prefs.getString(_keyPathName);
    final chapterId = prefs.getString(_keyChapterId);
    final itemId = prefs.getString(_keyItemId);

    if (pathName == null || chapterId == null || itemId == null) {
      return null;
    }

    return {'pathName': pathName, 'chapterId': chapterId, 'itemId': itemId};
  }
}










File: lib/utils/render_item_helpers.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/utils/logger.dart';

List<RenderItem> buildRenderItems({required List<String> ids}) {
  logger.i('üõ†Ô∏è buildRenderItems ‚Üí ids: $ids');

  final items = <RenderItem>[];
  final invalidIds = <String>[];

  for (final id in ids) {
    final item = getContentObject(id);
    if (item != null) {
      // logger.d('‚úÖ Built RenderItem ‚Üí id: ${item.id}, type: ${item.type}');
      items.add(item);
    } else {
      logger.w('‚ùå Failed to resolve RenderItem for id: $id');
      invalidIds.add(id);
    }
  }

  logger.d(
    'üì¶ buildRenderItems summary:\n'
    '  ‚Ä¢ valid: ${items.length}\n'
    '  ‚Ä¢ invalid: ${invalidIds.length}',
  );

  if (invalidIds.isNotEmpty) {
    logger.w('‚ö†Ô∏è Invalid RenderItem IDs: $invalidIds');
  }

  return items;
}

RenderItem? getContentObject(String id) {
  if (id.startsWith('lesson_')) {
    final lesson = LessonRepositoryIndex.getLessonById(id);
    if (lesson != null) {
      return RenderItem(
        type: RenderItemType.lesson,
        id: lesson.id,
        title: lesson.title,
        content: lesson.content,
        flashcards: lesson.flashcards,
      );
    }
  }

  if (id.startsWith('part_')) {
    final part = PartRepositoryIndex.getPartById(id);
    if (part != null) {
      return RenderItem(
        type: RenderItemType.part,
        id: part.id,
        title: part.title,
        content: part.content,
        flashcards: part.flashcards,
      );
    }
  }

  if (id.startsWith('tool_')) {
    final tool = ToolRepositoryIndex.getToolById(id);
    if (tool != null) {
      return RenderItem(
        type: RenderItemType.tool,
        id: tool.id,
        title: tool.title,
        content: tool.content,
        flashcards: tool.flashcards,
      );
    }
  }

  if (id.startsWith('flashcard_')) {
    final flashcard =
        LessonRepositoryIndex.getFlashcardById(id) ??
        PartRepositoryIndex.getFlashcardById(id) ??
        ToolRepositoryIndex.getFlashcardById(id);

    if (flashcard != null) {
      return RenderItem(
        type: RenderItemType.flashcard,
        id: flashcard.id,
        title: flashcard.title,
        content: flashcard.sideA + ContentBlock.dividerList() + flashcard.sideB,
        flashcards: [flashcard],
      );
    }
  }

  logger.w('‚ùå getContentObject ‚Üí no match for id: $id');
  return null;
}










File: lib/utils/string_extensions.dart
extension TitleCaseExtension on String {
  String toTitleCase() {
    return split(' ')
        .map(
          (word) =>
              word.isEmpty
                  ? word
                  : word[0].toUpperCase() + word.substring(1).toLowerCase(),
        )
        .join(' ');
  }
}










File: lib/screens/tools/tool_bag_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';

class ToolBagScreen extends StatelessWidget {
  const ToolBagScreen({
    super.key,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final toolbags = ToolRepositoryIndex.getToolbagNames();
    logger.i('üü¶ Displaying ToolsScreen');

    return Stack(
      fit: StackFit.expand,
      children: [
        // Background (optional: can add if needed)
        // Opacity(
        //   opacity: 0.2,
        //   child: Image.asset(
        //     'assets/images/some_background.png',
        //     fit: BoxFit.cover,
        //   ),
        // ),

        // AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Tools',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),

        // "Choose a Toolbag" title
        Positioned(
          top: appBarOffset + 24,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Which toolbag do you need?',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // Button list
        Positioned.fill(
          top: appBarOffset + 100,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: ListView.builder(
              itemCount: toolbags.length,
              itemBuilder: (context, index) {
                final toolbag = toolbags[index];
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: GroupButton(
                    label: toolbag.toTitleCase(),
                    onTap: () {
                      logger.i('üõ†Ô∏è Selected toolbag: $toolbag');
                      final timestamp = DateTime.now().millisecondsSinceEpoch;
                      context.push(
                        '/tools/items',
                        extra: {
                          'toolbag': toolbag,
                          'slideFrom': SlideDirection.right, // ‚úÖ NEW
                          'transitionType': TransitionType.slide, // ‚úÖ NEW
                          'transitionKey': 'tool_items_${toolbag}_$timestamp',
                          'detailRoute': DetailRoute.branch,
                        },
                      );
                    },
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_item_screen.dart
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';

class ToolItemScreen extends StatelessWidget {
  final String toolbag;

  const ToolItemScreen({
    super.key,
    required this.toolbag,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    logger.i('üõ†Ô∏è ToolItemScreen loaded for toolbag: $toolbag');

    final tools = ToolRepositoryIndex.getToolsForBag(toolbag);
    final toolIds = tools.map((t) => t.id).toList();
    final renderItems = buildRenderItems(ids: toolIds);

    final toolbagTitle = toolbag.toTitleCase();

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Tools',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
        ),
        const SizedBox(height: 16),
        Text(
          '$toolbagTitle:\nWhich ${toolbagTitle.replaceFirst(RegExp(r's$'), '')} would you like?',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: GridView.builder(
              itemCount: tools.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final tool = tools[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: tool.title,
                  onTap: () {
                    logger.i('üõ†Ô∏è Tapped tool: ${tool.id}');
                    final transitionKey = 'tool_${tool.id}_$timestamp';

                    logger.i('üß≠ Navigating to /tools/detail with:');
                    logger.i('  ‚îú‚îÄ currentIndex: $index');
                    logger.i('  ‚îú‚îÄ renderItems.length: ${renderItems.length}');
                    logger.i(
                      '  ‚îú‚îÄ renderItems[$index].title: ${renderItems[index].title}',
                    );
                    logger.i('  ‚îú‚îÄ branchIndex: 3');
                    logger.i('  ‚îú‚îÄ backDestination: /tools/items');
                    logger.i('  ‚îú‚îÄ toolbag: $toolbag');
                    logger.i('  ‚îú‚îÄ transitionKey: $transitionKey');
                    logger.i('  ‚îú‚îÄ detailRoute: DetailRoute.branch');
                    logger.i('  ‚îú‚îÄ transitionType: TransitionType.slide');
                    logger.i('  ‚îú‚îÄ slideFrom: SlideDirection.right');
                    logger.i('  ‚îú‚îÄ mobKey runtimeType: ${mobKey.runtimeType}');
                    logger.i(
                      '  ‚îú‚îÄ settingsKey runtimeType: ${settingsKey.runtimeType}',
                    );
                    logger.i(
                      '  ‚îú‚îÄ searchKey runtimeType: ${searchKey.runtimeType}',
                    );
                    logger.i(
                      '  ‚îî‚îÄ titleKey runtimeType: ${titleKey.runtimeType}',
                    );

                    context.push(
                      '/tools/detail',
                      extra: {
                        'renderItems': renderItems,
                        'currentIndex': index,
                        'branchIndex': 3,
                        'backDestination': '/tools/items',
                        'backExtra': {'toolbag': toolbag},
                        'mobKey': mobKey,
                        'settingsKey': settingsKey,
                        'searchKey': searchKey,
                        'titleKey': titleKey,
                        'transitionKey': 'tool_${tool.id}_$timestamp',
                        'detailRoute': DetailRoute.branch,
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_detail_screen.dart
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/widgets/group_picker_dropdown.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';

class ToolDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  const ToolDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  @override
  State<ToolDetailScreen> createState() => _ToolDetailScreenState();
}

class _ToolDetailScreenState extends State<ToolDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.tool) {
      logger.w('‚ö†Ô∏è Redirecting from non-tool type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale, // ‚úÖ NEW
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.tool) {
      return const Scaffold(body: SizedBox());
    }

    const toolbagTitle = 'Tools';
    final toolTitle = item.title;
    // final toolbagId = widget.backExtra?['toolbag'] as String?;

    logger.i('üõ†Ô∏è ToolDetailScreen: $toolTitle');
    logger.i('üìÑ Content blocks: ${item.content.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, toolTitle, toolbagTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String toolTitle,
    String toolbagTitle,
  ) {
    // final subtitleText = toolTitle;
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/navigation_lights.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: toolbagTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: widget.mobKey,
                settingsKey: widget.settingsKey,
                searchKey: widget.searchKey,
                titleKey: widget.titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide, // ‚úÖ Add this line
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              if (widget.detailRoute == DetailRoute.branch)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: GroupPickerDropdown(
                    label: 'Toolbag',
                    selectedId: widget.backExtra?['toolbag'] ?? '',
                    ids: ToolRepositoryIndex.getToolbagNames(),
                    idToTitle: {
                      for (final id in ToolRepositoryIndex.getToolbagNames())
                        id: id.toTitleCase(),
                    },
                    onChanged: (selectedToolbagId) {
                      if (selectedToolbagId == widget.backExtra?['toolbag']) {
                        logger.i('üü° Same toolbag selected ‚Üí no action');
                        return;
                      }

                      final tools = ToolRepositoryIndex.getToolsForBag(
                        selectedToolbagId,
                      );
                      final renderItems = buildRenderItems(
                        ids: tools.map((tool) => tool.id).toList(),
                      );

                      if (renderItems.isEmpty) {
                        logger.w('‚ö†Ô∏è Selected toolbag has no renderable items');
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Selected toolbag has no items.'),
                          ),
                        );
                        return;
                      }

                      TransitionManager.goToDetailScreen(
                        context: context,
                        screenType: renderItems.first.type,
                        renderItems: renderItems,
                        currentIndex: 0,
                        branchIndex: widget.branchIndex,
                        backDestination: '/tools/items',
                        backExtra: {
                          'toolbag': selectedToolbagId,
                          'branchIndex': widget.branchIndex,
                        },
                        detailRoute: widget.detailRoute,
                        direction: SlideDirection.right,
                      );
                    },
                  ),
                ),

              /// the bottom of insert area
              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  toolTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on ToolDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on ToolDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
                customNextButton:
                    currentIndex == widget.renderItems.length - 1
                        ? ElevatedButton(
                          onPressed: () {
                            logger.i(
                              '‚è≠Ô∏è Next Chapter tapped on ToolDetailScreen',
                            );

                            if (widget.detailRoute == DetailRoute.branch) {
                              final currentToolbag =
                                  widget.backExtra?['toolbag'] as String?;
                              if (currentToolbag == null) {
                                logger.w('‚ö†Ô∏è No toolbag ID found in backExtra');
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Cannot find next toolbag.'),
                                  ),
                                );
                                return;
                              }

                              final nextToolbag =
                                  ToolRepositoryIndex.getNextToolbag(
                                    currentToolbag,
                                  );
                              if (nextToolbag == null) {
                                logger.i(
                                  '‚õî No more toolbags after $currentToolbag',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final toolbag.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final tools = ToolRepositoryIndex.getToolsForBag(
                                nextToolbag,
                              );
                              final renderItems = buildRenderItems(
                                ids: tools.map((tool) => tool.id).toList(),
                              );

                              if (renderItems.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next toolbag has no renderable items',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Next toolbag has no items.'),
                                  ),
                                );
                                return;
                              }

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: renderItems.first.type,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/tools/items',
                                backExtra: {
                                  'toolbag': nextToolbag,
                                  'branchIndex': widget.branchIndex,
                                  'mobKey': widget.mobKey,
                                  'settingsKey': widget.settingsKey,
                                  'searchKey': widget.searchKey,
                                  'titleKey': widget.titleKey,
                                },

                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            } else if (widget.detailRoute == DetailRoute.path) {
                              final currentChapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;

                              if (currentChapterId == null ||
                                  pathName == null) {
                                logger.w(
                                  '‚ö†Ô∏è Missing path context in backExtra',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('No path context found.'),
                                  ),
                                );
                                return;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    currentChapterId,
                                  );
                              if (nextChapter == null) {
                                logger.i(
                                  '‚õî No next chapter in $pathName after $currentChapterId',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final chapter.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final renderItems = buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((item) => item.pathItemId)
                                        .toList(),
                              );

                              if (renderItems.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next chapter has no renderable items',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Next chapter has no items.'),
                                  ),
                                );
                                return;
                              }

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: renderItems.first.type,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination:
                                    '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                backExtra: {
                                  'chapterId': nextChapter.id,
                                  'pathName': pathName,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            }
                          },
                          style: AppTheme.navigationButton,
                          child: const Text('Next Chapter'),
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_detail_screen.dart
import 'dart:math' as math;
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/group_picker_dropdown.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/flip_card_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';

class FlashcardDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const FlashcardDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  State<FlashcardDetailScreen> createState() => _FlashcardDetailScreenState();
}

class _FlashcardDetailScreenState extends State<FlashcardDetailScreen>
    with SingleTickerProviderStateMixin {
  late int currentIndex;
  late AnimationController _controller;
  late Animation<double> _flipAnimation;
  bool showFront = true;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    if (widget.renderItems.isEmpty) {
      logger.e('‚ùå FlashcardDetailScreen received empty renderItems');
    } else {
      final item = widget.renderItems[currentIndex];
      logger.i(
        'üü© FlashcardDetailScreen Loaded:\n'
        '  ‚îú‚îÄ index: $currentIndex\n'
        '  ‚îú‚îÄ id: ${item.id}\n'
        '  ‚îú‚îÄ type: ${item.type}\n'
        '  ‚îú‚îÄ renderItems.length: ${widget.renderItems.length}\n'
        '  ‚îú‚îÄ branchIndex: ${widget.branchIndex}\n'
        '  ‚îú‚îÄ backDestination: ${widget.backDestination}\n'
        '  ‚îî‚îÄ backExtra: ${widget.backExtra}',
      );

      if (item.type != RenderItemType.flashcard) {
        logger.w(
          '‚ö†Ô∏è Redirecting from non-flashcard type: ${item.id} (${item.type})',
        );
        WidgetsBinding.instance.addPostFrameCallback((_) {
          TransitionManager.goToDetailScreen(
            context: context,
            screenType: item.type,
            renderItems: widget.renderItems,
            currentIndex: currentIndex,
            branchIndex: widget.branchIndex,
            backDestination: widget.backDestination,
            backExtra: widget.backExtra,
            detailRoute: widget.detailRoute,
            direction: SlideDirection.none,
          );
        });
      }
    }

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );

    _flipAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOut));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void flipCard() {
    logger.i(showFront ? 'üîÉ Flipping to back' : 'üîÉ Flipping to front');
    setState(() {
      showFront = !showFront;
      _controller.isCompleted || _controller.velocity > 0
          ? _controller.reverse()
          : _controller.forward();
    });
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚õî Invalid navigation attempt: $newIndex');
      return;
    }

    final target = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: target.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale, // ‚úÖ Added line
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.renderItems.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.flashcard || item.flashcards.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final flashcard = item.flashcards.first;
    final title = flashcard.title;
    final sideA = flashcard.sideA;
    final sideB = flashcard.sideB;
    const categoryTitle = 'Drills';
    final categoryId = widget.backExtra?['category'] as String?;

    logger.i(
      'üñºÔ∏è Rendering Flashcard:\n'
      '  ‚îú‚îÄ title: $title\n'
      '  ‚îú‚îÄ sideA: ${sideA.length} blocks\n'
      '  ‚îî‚îÄ sideB: ${sideB.length} blocks',
    );

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/sailboat_cartoon.jpg',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: categoryTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: widget.mobKey,
                settingsKey: widget.settingsKey,
                searchKey: widget.searchKey,
                titleKey: widget.titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide,
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              if (widget.detailRoute == DetailRoute.branch)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: GroupPickerDropdown(
                    label: 'Category',
                    selectedId: categoryId ?? '',
                    ids: getAllCategories(),
                    idToTitle: {
                      for (final id in getAllCategories()) id: id.toTitleCase(),
                    },

                    onChanged: (selectedCategoryId) {
                      if (selectedCategoryId == categoryId) {
                        logger.i('üü° Same category selected ‚Üí no action');
                        return;
                      }

                      final flashcards = getFlashcardsForCategory(
                        selectedCategoryId,
                      );
                      if (flashcards.isEmpty) {
                        logger.w('‚ö†Ô∏è Selected category has no flashcards');
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text(
                              'Selected category has no flashcards.',
                            ),
                          ),
                        );
                        return;
                      }

                      final renderItems =
                          flashcards
                              .map((card) => RenderItem.fromFlashcard(card))
                              .toList();

                      TransitionManager.goToDetailScreen(
                        context: context,
                        screenType: RenderItemType.flashcard,
                        renderItems: renderItems,
                        currentIndex: 0,
                        branchIndex: widget.branchIndex,
                        backDestination: '/flashcards/items',
                        backExtra: {
                          'category': selectedCategoryId,
                          'branchIndex': widget.branchIndex,
                        },
                        detailRoute: widget.detailRoute,
                        direction: SlideDirection.right,
                      );
                    },
                  ),
                ),

              const SizedBox(height: 16),
              Text(
                title,
                style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                  color: AppTheme.primaryBlue,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              Expanded(
                child: Center(
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      Image.asset(
                        'assets/images/index_card.png',
                        width: 360,
                        height: 420,
                        fit: BoxFit.fill,
                      ),
                      SizedBox(
                        width: 360,
                        height: 420,
                        child: AnimatedBuilder(
                          animation: _flipAnimation,
                          builder: (context, child) {
                            final isFront = _flipAnimation.value < 0.5;
                            return Transform(
                              alignment: Alignment.center,
                              transform: Matrix4.rotationY(
                                _flipAnimation.value * math.pi,
                              ),
                              child:
                                  isFront
                                      ? Padding(
                                        padding: const EdgeInsets.only(top: 32),
                                        child: FlipCardWidget(
                                          front: sideA,
                                          back: sideB,
                                          showFront: true,
                                          animation: _flipAnimation,
                                        ),
                                      )
                                      : Transform(
                                        alignment: Alignment.center,
                                        transform: Matrix4.rotationY(math.pi),
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                            top: 32,
                                          ),
                                          child: FlipCardWidget(
                                            front: sideA,
                                            back: sideB,
                                            showFront: false,
                                            animation: _flipAnimation,
                                          ),
                                        ),
                                      ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: ElevatedButton(
                  onPressed: flipCard,
                  style: AppTheme.navigationButton,
                  child: Text(showFront ? 'Flip Over' : 'Flip Back'),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () => _navigateTo(currentIndex - 1),
                onNext: () => _navigateTo(currentIndex + 1),
                customNextButton:
                    currentIndex == widget.renderItems.length - 1
                        ? ElevatedButton(
                          onPressed: () {
                            logger.i(
                              '‚è≠Ô∏è Next Chapter tapped on FlashcardDetailScreen',
                            );

                            if (widget.detailRoute == DetailRoute.branch) {
                              final currentCategory =
                                  widget.backExtra?['category'] as String?;
                              if (currentCategory == null) {
                                logger.w('‚ö†Ô∏è Missing category in backExtra');
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('No category context found.'),
                                  ),
                                );
                                return;
                              }

                              final nextCategory = getNextCategory(
                                currentCategory,
                              );
                              if (nextCategory == null) {
                                logger.i(
                                  '‚õî No next category after $currentCategory',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final category.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final nextFlashcards = getFlashcardsForCategory(
                                nextCategory,
                              );
                              if (nextFlashcards.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next category has no flashcards: $nextCategory',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'Next category has no flashcards.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final renderItems =
                                  nextFlashcards
                                      .map((f) => RenderItem.fromFlashcard(f))
                                      .toList();

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: RenderItemType.flashcard,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/flashcards/items',
                                backExtra: {
                                  'category': nextCategory,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            } else if (widget.detailRoute == DetailRoute.path) {
                              final currentChapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;

                              if (currentChapterId == null ||
                                  pathName == null) {
                                logger.w(
                                  '‚ö†Ô∏è Missing path context in backExtra',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('No path context found.'),
                                  ),
                                );
                                return;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    currentChapterId,
                                  );
                              if (nextChapter == null) {
                                logger.i(
                                  '‚õî No next chapter in $pathName after $currentChapterId',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final chapter.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final renderItems = buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((item) => item.pathItemId)
                                        .toList(),
                              );

                              if (renderItems.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next chapter has no renderable items',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Next chapter has no items.'),
                                  ),
                                );
                                return;
                              }

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: renderItems.first.type,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination:
                                    '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                backExtra: {
                                  'chapterId': nextChapter.id,
                                  'pathName': pathName,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            }
                          },
                          style: AppTheme.navigationButton,
                          child: const Text('Next Chapter'),
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_category_screen.dart
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';

class FlashcardCategoryScreen extends StatelessWidget {
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  const FlashcardCategoryScreen({
    super.key,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    logger.i('üü¶ Entered FlashcardCategoryScreen');

    final categories = getAllCategories();
    final sorted = [
      ...categories.where((c) => c == 'all' || c == 'random'),
      ...categories.where((c) => c != 'all' && c != 'random'),
    ];
    logger.i('üìá Sorted flashcard categories: $sorted');

    return Stack(
      fit: StackFit.expand,
      children: [
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Drills',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withAlpha(217),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Pick a Challenge!',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),
        Positioned.fill(
          top: appBarOffset + 100,
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Center(
              child: Wrap(
                spacing: 12,
                runSpacing: 12,
                children:
                    sorted.map((category) {
                      final isSpecial =
                          category == 'all' || category == 'random';
                      final style =
                          isSpecial
                              ? AppTheme.highlightedGroupButtonStyle
                              : ElevatedButton.styleFrom(
                                backgroundColor: AppTheme.groupButtonUnselected,
                                padding: AppTheme.groupButtonPadding,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(
                                    AppTheme.buttonCornerRadius,
                                  ),
                                ),
                              );

                      return SizedBox(
                        width: 160,
                        child: ElevatedButton(
                          onPressed: () {
                            logger.i('üü• Tapped flashcard category: $category');
                            final timestamp =
                                DateTime.now().millisecondsSinceEpoch;
                            final flashcards = getFlashcardsForCategory(
                              category,
                            );
                            if (flashcards.isEmpty) {
                              logger.w(
                                '‚ö†Ô∏è No flashcards found in category: $category',
                              );
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                    'No flashcards found in this category.',
                                  ),
                                ),
                              );
                              return;
                            }

                            final renderItems =
                                flashcards
                                    .map(
                                      (card) => RenderItem.fromFlashcard(card),
                                    )
                                    .toList();

                            context.push(
                              '/flashcards/detail',
                              extra: {
                                'renderItems': renderItems,
                                'currentIndex': 0,
                                'branchIndex': 4,
                                'backDestination': '/flashcards',
                                'backExtra': {
                                  'category': category,
                                  'branchIndex': 4,
                                },
                                'transitionKey':
                                    'flashcards_detail_${category}_$timestamp',
                                'slideFrom': SlideDirection.right,
                                'transitionType': TransitionType.slide,
                                'detailRoute': DetailRoute.branch,
                              },
                            );
                          },

                          style: style,
                          child: Text(
                            category.toTitleCase(),
                            style: AppTheme.buttonTextStyle,
                            textAlign: TextAlign.center,
                          ),
                        ),
                      );
                    }).toList(),
              ),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/flashcards/flashcard_item_screen.dart
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class FlashcardItemScreen extends StatelessWidget {
  final String category;

  const FlashcardItemScreen({
    super.key,
    required this.category,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    logger.i('üü¶ Entered FlashcardItemScreen for category: $category');

    final flashcards = getFlashcardsForCategory(category);
    final renderItems = buildRenderItems(
      ids: flashcards.map((fc) => fc.id).toList(),
    );
    final categoryTitle = category.toTitleCase();

    if (flashcards.isEmpty) {
      return Column(
        children: [
          CustomAppBarWidget(
            title: 'Drills',
            showBackButton: true,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
            onBack: () {
              logger.i('üîô AppBar back from FlashcardItemScreen');
              context.go(
                '/flashcards',
                extra: {
                  'slideFrom': SlideDirection.left,
                  'transitionType': TransitionType.slide,
                  'detailRoute': DetailRoute.branch,
                },
              );
            },
          ),
          const Expanded(
            child: Center(
              child: Text('No flashcards found for this category.'),
            ),
          ),
        ],
      );
    }

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Drills',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô AppBar back from FlashcardItemScreen');
            context.go(
              '/flashcards',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.branch,
              },
            );
          },
        ),
        const SizedBox(height: 16),
        Text(
          '$categoryTitle:\nDive into a challenge.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: GridView.builder(
              itemCount: flashcards.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final card = flashcards[index];
                logger.i('üìó Rendering flashcard: ${card.title}');
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: card.title,
                  onTap: () {
                    logger.i('üüß Tapped flashcard: ${card.title}');
                    context.push(
                      '/flashcards/detail',
                      extra: {
                        'renderItems': renderItems,
                        'currentIndex': index,
                        'branchIndex': 4,
                        'backDestination': '/flashcards/items',
                        'backExtra': {
                          'category': category,
                          'branchIndex': 4,
                          'mobKey': mobKey,
                          'settingsKey': settingsKey,
                          'searchKey': searchKey,
                          'titleKey': titleKey,
                        },
                        'transitionKey': 'flashcard_detail_${index}_$timestamp',
                        'detailRoute': DetailRoute.branch,
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/paths/path_item_screen.dart
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';

class PathItemScreen extends StatelessWidget {
  final String pathName;
  final String chapterId;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  const PathItemScreen({
    super.key,
    required this.pathName,
    required this.chapterId,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  @override
  Widget build(BuildContext context) {
    logger.i(
      'üìò Building PathItemScreen for path "$pathName", chapter "$chapterId"',
    );

    final chapter = PathRepositoryIndex.getChapterById(pathName, chapterId);

    if (chapter == null) {
      logger.e(
        '‚ùå Could not find chapter for id: "$chapterId" in path: "$pathName"',
      );
      return const Center(child: Text('Chapter not found'));
    }

    final items = chapter.items;
    final sequenceIds = items.map((e) => e.pathItemId).toList();
    final renderItems = buildRenderItems(ids: sequenceIds);

    logger.i('üü© Found chapter "${chapter.title}" with ${items.length} items');
    logger.i('üß™ Chapter title is: "${chapter.title}"');

    return Column(
      children: [
        CustomAppBarWidget(
          title: pathName.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i(
              'üîô Back tapped ‚Äî returning to PathChapterScreen for "$pathName"',
            );
            context.go(
              '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}',
              extra: {
                'slideFrom': SlideDirection.left,
                'detailRoute': DetailRoute.path,
                'transitionType': TransitionType.slide,
              },
            );
          },
        ),

        const SizedBox(height: 16),
        Text(
          chapter.title,
          style: AppTheme.headingStyle.copyWith(
            fontSize: 20,
            color: AppTheme.primaryBlue, // or use a darker shade if needed
          ),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 8),
        Text(
          'Resume your voyage, or chart any path below.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),

        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: items.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final pathItem = items[index];
                final id = pathItem.pathItemId;
                final title = renderItems[index].title;

                logger.i(
                  'üì¶ Rendering button for pathItem: $id ‚Äî "$title" (index $index)',
                );

                return ItemButton(
                  label: title,
                  onTap: () {
                    logger.i('üü¶ Tapped PathItem: $title (index $index)');

                    if (renderItems.isEmpty) {
                      logger.e('‚ùå renderItems is empty ‚Äî navigation aborted');
                      return;
                    }

                    final timestamp = DateTime.now().millisecondsSinceEpoch;
                    final extra = {
                      'renderItems': renderItems,
                      'currentIndex': index,
                      'branchIndex': 0,
                      'backDestination':
                          '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                      'backExtra': {
                        'pathName': pathName,
                        'chapterId': chapterId,
                      },
                      'transitionKey': 'path_${id}_$timestamp',
                      'detailRoute': DetailRoute.path,
                      'slideFrom': SlideDirection.right,
                      'transitionType': TransitionType.slide, // ‚úÖ NEW LINE
                    };

                    if (id.startsWith('lesson_')) {
                      logger.i('üìò Routing to LessonDetailScreen for $id');
                      context.push('/lessons/detail', extra: extra);
                    } else if (id.startsWith('part_')) {
                      logger.i('üß© Routing to PartDetailScreen for $id');
                      context.push('/parts/detail', extra: extra);
                    } else if (id.startsWith('tool_')) {
                      logger.i('üõ†Ô∏è Routing to ToolDetailScreen for $id');
                      context.push('/tools/detail', extra: extra);
                    } else if (id.startsWith('flashcard_')) {
                      logger.i('üÉè Routing to FlashcardDetailScreen for $id');
                      context.push('/flashcards/detail', extra: extra);
                    } else {
                      logger.e('‚ùì Unknown content type for ID: $id');
                    }
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/paths/path_chapter_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/utils/resume_manager.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';

class PathChapterScreen extends StatefulWidget {
  final String pathName;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  const PathChapterScreen({
    super.key,
    required this.pathName,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  @override
  State<PathChapterScreen> createState() => _PathChapterScreenState();
}

class _PathChapterScreenState extends State<PathChapterScreen> {
  @override
  Widget build(BuildContext context) {
    final pathName = widget.pathName;
    logger.i('üü¢ Entered PathChapterScreen for "$pathName"');

    final chapters = PathRepositoryIndex.getChaptersForPath(pathName);
    final titles = PathRepositoryIndex.getChapterTitles(pathName);
    logger.i('üìö Found ${titles.length} chapters for "$pathName"');

    return Column(
      children: [
        CustomAppBarWidget(
          title: pathName.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: widget.mobKey,
          settingsKey: widget.settingsKey,
          searchKey: widget.searchKey,
          titleKey: widget.titleKey,
          onBack: () {
            logger.i('üîô Back tapped from PathChapterScreen');
            context.go(
              '/',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.path,
              },
            );
          },
        ),

        const SizedBox(height: 20),

        // üöÄ Primary actions
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              ElevatedButton(
                onPressed: () {
                  logger.i('‚õµ Set sail on a new course tapped ‚Üí $pathName');

                  final chapters = PathRepositoryIndex.getChaptersForPath(
                    pathName,
                  );
                  if (chapters.isEmpty) {
                    logger.w('‚ö†Ô∏è No chapters found for path: $pathName');
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('No chapters found for this path.'),
                      ),
                    );
                    return;
                  }

                  final firstChapter = chapters.first;
                  final items = firstChapter.items;
                  if (items.isEmpty) {
                    logger.w('‚ö†Ô∏è First chapter has no items.');
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('This chapter has no items.'),
                      ),
                    );
                    return;
                  }

                  final renderItems = buildRenderItems(
                    ids: items.map((e) => e.pathItemId).toList(),
                  );
                  final item = renderItems.first;
                  final chapterId = firstChapter.id;

                  TransitionManager.goToDetailScreen(
                    context: context,
                    screenType: item.type,
                    renderItems: renderItems,
                    currentIndex: 0,
                    branchIndex: 0,
                    backDestination:
                        '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                    backExtra: {'pathName': pathName, 'chapterId': chapterId},
                    detailRoute: DetailRoute.path,
                    direction: SlideDirection.right,
                  );
                },
                style: AppTheme.groupRedButtonStyle,
                child: const Text('Set sail on a new course'),
              ),

              const SizedBox(height: 12),

              ElevatedButton(
                onPressed: () async {
                  logger.i('üìç Resume tapped for "$pathName"');
                  final resume = await ResumeManager.getResumePoint();

                  if (!context.mounted) return;

                  if (resume == null) {
                    logger.w('‚ö†Ô∏è No resume point found');
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('No saved location to resume.'),
                      ),
                    );
                    return;
                  }

                  final savedPath = resume['pathName'];
                  final chapterId = resume['chapterId'];
                  final itemId = resume['itemId'];

                  if (savedPath != pathName) {
                    logger.w(
                      '‚ö†Ô∏è Resume point belongs to different path: $savedPath',
                    );
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('No resume point for this path.'),
                      ),
                    );
                    return;
                  }

                  final chapter = PathRepositoryIndex.getChapterById(
                    pathName,
                    chapterId!,
                  );
                  if (chapter == null) {
                    logger.w('‚ö†Ô∏è Chapter not found for ID: $chapterId');
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Saved chapter not found.')),
                    );
                    return;
                  }

                  final itemIndex = chapter.items.indexWhere(
                    (i) => i.pathItemId == itemId,
                  );
                  if (itemIndex == -1) {
                    logger.w(
                      '‚ö†Ô∏è Saved item $itemId not found in chapter $chapterId',
                    );
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Saved item not found.')),
                    );
                    return;
                  }

                  final renderItems = buildRenderItems(
                    ids: chapter.items.map((e) => e.pathItemId).toList(),
                  );
                  final targetItem = renderItems[itemIndex];

                  TransitionManager.goToDetailScreen(
                    context: context,
                    screenType: targetItem.type,
                    renderItems: renderItems,
                    currentIndex: itemIndex,
                    branchIndex: 0,
                    backDestination:
                        '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                    backExtra: {'pathName': pathName, 'chapterId': chapterId},
                    detailRoute: DetailRoute.path,
                    direction: SlideDirection.right,
                  );
                },
                style: AppTheme.groupRedButtonStyle,
                child: const Text('Resume your voyage'),
              ),
            ],
          ),
        ),

        const SizedBox(height: 28),

        // üåä Secondary instruction
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Text(
            'or Explore these courses:',
            style: AppTheme.subheadingStyle.copyWith(
              color: AppTheme.primaryBlue,
            ),
            textAlign: TextAlign.center,
          ),
        ),

        const SizedBox(height: 16),

        // üìö Chapter list
        Expanded(
          child:
              titles.isEmpty
                  ? const Center(child: Text('No chapters found.'))
                  : ListView.separated(
                    padding: const EdgeInsets.all(16),
                    itemCount: titles.length,
                    separatorBuilder: (_, __) => const SizedBox(height: 12),
                    itemBuilder: (context, index) {
                      if (index >= chapters.length) {
                        logger.w(
                          '‚ö†Ô∏è Index $index out of range for chapters in "$pathName"',
                        );
                        return const SizedBox.shrink();
                      }

                      final title = titles[index];
                      final chapter = chapters[index];

                      return GroupButton(
                        label: title,
                        onTap: () {
                          logger.i('üìó Tapped Chapter: $title (${chapter.id})');
                          final timestamp =
                              DateTime.now().millisecondsSinceEpoch;
                          context.push(
                            '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                            extra: {
                              'pathName': pathName,
                              'chapterId': chapter.id,
                              'transitionKey':
                                  'path_items_${chapter.id}_$timestamp',
                              'slideFrom': SlideDirection.right,
                              'detailRoute': DetailRoute.path,
                              'transitionType': TransitionType.slide,
                            },
                          );
                        },
                      );
                    },
                  ),
        ),
      ],
    );
  }
}










File: lib/screens/emergency/mob_emergency_screen.dart
import 'package:bcc5/screens/emergency/mob_radio_script_modal.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/location_helper.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/settings_manager.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:bcc5/utils/radio_helper.dart';

class MOBEmergencyScreen extends StatefulWidget {
  const MOBEmergencyScreen({super.key});

  @override
  State<MOBEmergencyScreen> createState() => _MOBEmergencyScreenState();
}

class _MOBEmergencyScreenState extends State<MOBEmergencyScreen> {
  Position? _lockedPosition;
  late DateTime _timestamp;
  GPSDisplayFormat _format = GPSDisplayFormat.marineCompact;

  @override
  void initState() {
    super.initState();
    _timestamp = DateTime.now();
    _loadFormat();
    _lockInitialGPS();
  }

  void _lockInitialGPS() async {
    final pos = await getCurrentLocation();
    if (mounted) {
      setState(() => _lockedPosition = pos);
    }
  }

  void _loadFormat() async {
    final saved = await SettingsManager.getGPSDisplayFormat();
    if (mounted) setState(() => _format = saved);
  }

  void _setFormat(GPSDisplayFormat newFormat) {
    setState(() {
      _format = newFormat;
    });
  }

  void _showRadioScriptModal() async {
    final position = _lockedPosition;
    final lat = position?.latitude ?? 0;
    final lon = position?.longitude ?? 0;

    final gpsSpoken = formatGPSForRadio(lat, lon, _format);
    final intro = await buildPhoneticVesselIntro();
    final description = await buildSpokenVesselDescription();
    final mmsi = await SettingsManager.getMMSI();

    if (!mounted) return;

    WidgetsBinding.instance.addPostFrameCallback((_) {
      showDialog(
        context: context,
        builder:
            (_) => MOBRadioScriptModal(
              intro: intro,
              gpsSpoken: gpsSpoken,
              description: description,
              mmsi: mmsi,
            ),
      );
    });
  }

  void _showDSCInfoModal() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('üö® How to Use DSC'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'If your radio has a red ‚ÄúDistress‚Äù button:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 12),
                const Text(
                  '1. Lift the red safety cover.\n'
                  '2. Press and hold the button underneath for 5 seconds.\n'
                  '3. The radio will send your location, vessel info, and distress call digitally.\n\n'
                  'This can greatly speed up response time and notify nearby vessels as well.',
                ),
                const SizedBox(height: 16),
                ClipRRect(
                  borderRadius: BorderRadius.circular(6),
                  child: Image.asset(
                    'assets/images/DSC_radio.png',
                    fit: BoxFit.cover,
                  ),
                ),
              ],
            ),
          ),
          actions: [
            Padding(
              padding: const EdgeInsets.only(top: 12),
              child: SizedBox(
                height: 44,
                width: double.infinity,
                child: TextButton(
                  style: TextButton.styleFrom(
                    backgroundColor: AppTheme.primaryRed,
                    foregroundColor: Colors.white,
                    shape: const RoundedRectangleBorder(),
                    padding: EdgeInsets.zero,
                  ),
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close', style: TextStyle(fontSize: 16)),
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    logger.i('üö® MOB Emergency Screen opened');

    final formattedTime = _timestamp.toLocal().toString().split('.').first;

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: Colors.red.shade700,
        title: Row(
          children: [
            Icon(MdiIcons.lifebuoy, color: Colors.white, size: 32),
            const SizedBox(width: 12),
            const Text(
              'Man Overboard!',
              style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.close, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
            tooltip: 'Close',
          ),
        ],
      ),
      body: Builder(
        builder: (context) {
          final position = _lockedPosition;
          String gpsText = 'Unavailable';

          if (position != null) {
            final lat = position.latitude;
            final lon = position.longitude;

            switch (_format) {
              case GPSDisplayFormat.marineCompact:
                gpsText =
                    '${formatToMarineCoord(lat, isLat: true)}   ${formatToMarineCoord(lon, isLat: false)}';
                break;
              case GPSDisplayFormat.decimal:
                gpsText =
                    '${lat.toStringAsFixed(5)}, ${lon.toStringAsFixed(5)}';
                break;
              case GPSDisplayFormat.marineFull:
                gpsText =
                    '${formatToMarineCoord(lat, isLat: true, full: true)}   ${formatToMarineCoord(lon, isLat: false, full: true)}';
                break;
            }
          }

          return Padding(
            padding: const EdgeInsets.all(20),
            child: ListView(
              children: [
                SelectableText(formattedTime),
                const SizedBox(height: 8),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // GPS Text ‚Äî expand first so it takes as much width as possible
                    Expanded(
                      child: SelectableText(
                        gpsText,
                        style: const TextStyle(fontSize: 16),
                      ),
                    ),

                    // Small spacing
                    const SizedBox(width: 4),

                    // Compact dropdown icon (right-aligned, minimal width)
                    ConstrainedBox(
                      constraints: const BoxConstraints(
                        minWidth: 0,
                        maxWidth: 32,
                      ),
                      child: PopupMenuButton<GPSDisplayFormat>(
                        tooltip: 'Change GPS format',
                        padding: EdgeInsets.zero,
                        onSelected: _setFormat,
                        icon: Icon(
                          Icons.arrow_drop_down,
                          color: AppTheme.primaryRed,
                          size: 30,
                        ),
                        itemBuilder:
                            (context) => const [
                              PopupMenuItem(
                                value: GPSDisplayFormat.marineCompact,
                                child: Text('DMM (Marine Style)'),
                              ),
                              PopupMenuItem(
                                value: GPSDisplayFormat.marineFull,
                                child: Text('DMS (Older Charts)'),
                              ),
                              PopupMenuItem(
                                value: GPSDisplayFormat.decimal,
                                child: Text('DD (Decimal)'),
                              ),
                            ],
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 10),
                const Text(
                  'Immediate Onboard Actions:',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 8),
                const Text('1. Shout "Man Overboard!" loudly and clearly.'),
                const Text('2. Assign a spotter to maintain visual contact.'),
                const Text('3. Throw flotation devices immediately.'),
                const Text('4. Press MOB on GPS/chartplotter if available.'),
                const Text(
                  '5. Ensure all onboard are wearing PFDs/life jackets.',
                ),
                const Text('6. Radio MAYDAY to Coast Guard.'),

                const SizedBox(height: 6),

                TextButton(
                  style: AppTheme.groupRedButtonStyle,
                  onPressed: _showRadioScriptModal,
                  child: const Text('Ch 16: Radio Script'),
                ),

                const SizedBox(height: 6),

                TextButton(
                  style: AppTheme.groupRedButtonStyle,
                  onPressed: _showDSCInfoModal,
                  child: const Text('DSC Use'),
                ),

                const SizedBox(height: 6),
                const Text(
                  'Continue Rescue:',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 12),
                const Text('7. Note wind and current direction.'),
                const Text(
                  '8. Maneuver vessel back to MOB under control (esp. sails).',
                ),
                const Text('9. Approach from downwind or leeward side.'),
                const Text(
                  '10. Retrieve crew using LifeSling, ladder, swim platform, etc.',
                ),
                const Text(
                  '11. Check injuries; administer first aid if needed.',
                ),
                const Text('12. Notify Coast Guard of status.'),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    OutlinedButton.icon(
                      onPressed: () async {
                        final newPos = await getCurrentLocation();
                        if (!mounted) return;
                        setState(() {
                          _timestamp = DateTime.now();
                          _lockedPosition = newPos;
                        });
                        logger.i(
                          'üìç GPS updated to: ${newPos?.latitude}, ${newPos?.longitude}',
                        );
                      },
                      icon: const Icon(Icons.gps_fixed),
                      label: const Text('Update GPS'),
                    ),
                    OutlinedButton.icon(
                      onPressed: () {
                        setState(() {
                          _lockedPosition = null;
                        });
                        logger.w('üóëÔ∏è GPS coordinate cleared by user.');
                      },
                      icon: const Icon(Icons.delete_forever),
                      label: const Text('Clear GPS'),
                    ),
                  ],
                ),
              ],
            ),
          );
        },
      ),

      bottomNavigationBar: Container(
        color: Colors.orange.shade700,
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20),
        child: SafeArea(
          child: SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange.shade700,
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              onPressed: () {
                logger.i('üÜò Other Emergencies button tapped');
                Navigator.of(context).pop();
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  context.go(
                    '/tools/items',
                    extra: {
                      'toolbag': 'procedures',
                      'transitionKey': UniqueKey(),
                    },
                  );
                });
              },
              child: const Text(
                'Other Emergencies',
                style: TextStyle(
                  fontSize: 24,
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}










File: lib/screens/emergency/mob_radio_script_modal.dart
// üìÑ lib/screens/emergency/mob_radio_script_modal.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class MOBRadioScriptModal extends StatelessWidget {
  final String intro;
  final String gpsSpoken;
  final String description;
  final String mmsi;

  const MOBRadioScriptModal({
    super.key,
    required this.intro,
    required this.gpsSpoken,
    required this.description,
    required this.mmsi,
  });

  @override
  Widget build(BuildContext context) {
    final gpsLines = gpsSpoken.split('\n');

    return AlertDialog(
      title: const Text('Report MAYDAY to the Coast Guard: '),
      content: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Ensure radio is on channel 16, press and hold the microphone transmit button while speaking slowly and clearly the following:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),

            // üîä Step-by-step script
            SelectableText(
              '1. Mayday, Mayday, Mayday.\n\n'
              '2. $intro\n\n'
              '3. We have a man overboard at position:\n'
              '‚ÄÉ‚ÄÉ‚Ä¢ ${gpsLines[0]}\n'
              '‚ÄÉ‚ÄÉ‚Ä¢ ${gpsLines[1]}\n\n'
              '4. We are located near [SAY HELPFUL NEARBY LANDMARK IF YOU CAN], üìçe.g., ‚ÄòIn the north bay, two miles east of Pelican Rock.‚Äô\n\n'
              '5. $description\n\n'
              '6. We have four adults and one child onboard, all wearing life jackets.\n\n'
              '7. We need immediate assistance recovering the person in the water.\n\n'
              '8. Over. (LET GO of the microphone button)\n\n'
              '9. Wait for a response from the Coast Guard. If no response, repeat the message.',
              style: AppTheme.textTheme.bodyMedium,
            ),

            const SizedBox(height: 24),
            const Divider(thickness: 10), // separation line
            const SizedBox(height: 12),

            // üìå Optional Details Section
            const Text(
              'Optional Follow-Up Details',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text(
              'You may offer and/or the Coast Guard may ask you about any other relevant details, such as :',
            ),
            const SizedBox(height: 6),
            const Text('- Any injuries onboard.'),
            const Text('- If any flares were fired.'),
            if (mmsi.trim().isNotEmpty) Text('- Your MMSI: ${mmsi.trim()}'),
            const Text(
              '- Typically, they will want to call you if there is cell service. Be prepared to provide your cell phone number. Remember to slowly and clearly.',
            ),
          ],
        ),
      ),
      actions: [
        Padding(
          padding: const EdgeInsets.only(top: 12),
          child: SizedBox(
            height: 44,
            width: double.infinity,
            child: TextButton(
              style: TextButton.styleFrom(
                backgroundColor: AppTheme.primaryRed,
                foregroundColor: Colors.white,
                shape: const RoundedRectangleBorder(),
                padding: EdgeInsets.zero,
              ),
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Close', style: TextStyle(fontSize: 16)),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/landing_screen/landing_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/widgets/settings_modal.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';

class LandingScreen extends StatelessWidget {
  final bool showReminder;
  final GlobalKey harborKey;
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  // üö© GlobalKeys for onboarding tour steps
  final GlobalKey _keyAppBarTitle = GlobalKey();
  final GlobalKey _keyMOBButton = GlobalKey();
  final GlobalKey _keySettingsIcon = GlobalKey();
  final GlobalKey _keySearchIcon = GlobalKey();

  LandingScreen({
    super.key,
    required this.showReminder,
    required this.harborKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  @override
  Widget build(BuildContext context) {
    if (showReminder) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        showDialog(
          context: context,
          builder:
              (_) => AlertDialog(
                title: const Text('Update Vessel Info'),
                content: const Text(
                  'Review your vessel info to ensure emergency details are up to date.',
                ),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text("Info is accurate"),
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                      showSettingsModal(context);
                    },
                    child: const Text("Update Now"),
                  ),
                ],
              ),
        );
      });
    }
    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Welcome Aboard',
          mobKey: _keyMOBButton,
          settingsKey: _keySettingsIcon,
          searchKey: _keySearchIcon,
          titleKey: _keyAppBarTitle,
          showBackButton: false,
          showSearchIcon: true,
          showSettingsIcon: true,
        ),

        Expanded(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(
              vertical: 24,
              horizontal: AppTheme.screenPadding,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // üìù General Intro Text
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    "Let's make this the Tour button?",
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 20),

                // üìò Competent Crew Intro Text
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    "Competent Crew: New crew start here to learn how to be safe, helpful, and enjoy.",
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 28),

                // üöÄ Path Buttons
                _buildPathButton(
                  context,
                  'Competent Crew',
                  _groupButtonStyle(), // üî¥ match the picker button style
                  () {
                    logger.i('üìò Navigating to Competent Crew Path');
                    context.go(
                      '/learning-paths/competent-crew',
                      extra: {
                        'slideFrom': SlideDirection.right,
                        'transitionType': TransitionType.slide,
                        'detailRoute': DetailRoute.path,
                        'mobKey': mobKey,
                        'settingsKey': settingsKey,
                        'searchKey': searchKey,
                        'titleKey': titleKey,
                      },
                    );
                  },
                ),

                const SizedBox(height: 28),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    "Sea-legs shaky? Knock the rust off with these!",
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 16),

                // üß≠ Knock the Rust Off Picker
                // Knock the Rust Off Picker
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Text(
                      //   'Knock the Rust Off Paths',
                      //   style: AppTheme.subheadingStyle.copyWith(
                      //     color: AppTheme.primaryBlue,
                      //   ),
                      //   textAlign: TextAlign.center,
                      // ),
                      const SizedBox(height: 8),
                      Center(
                        child: PopupMenuButton<String>(
                          onSelected: (value) {
                            logger.i('üìò Navigating to $value');
                            context.go(
                              '/learning-paths/$value',
                              extra: {
                                'slideFrom': SlideDirection.right,
                                'transitionType': TransitionType.slide,
                                'detailRoute': DetailRoute.path,
                                'mobKey': mobKey,
                                'settingsKey': settingsKey,
                                'searchKey': searchKey,
                                'titleKey': titleKey,
                              },
                            );
                          },

                          itemBuilder:
                              (context) => [
                                const PopupMenuItem(
                                  value: 'knock-the-rust-off',
                                  child: Text('Knock the Rust Off'),
                                ),
                                const PopupMenuItem(
                                  value: 'docking',
                                  child: Text('Docking'),
                                ),
                                const PopupMenuItem(
                                  value: 'transition-demo',
                                  child: Text('Anchoring'),
                                ),
                              ],
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              vertical: 14,
                              horizontal: 24,
                            ),
                            decoration: BoxDecoration(
                              color:
                                  AppTheme.primaryRed, // üî¥ Your desired color
                              borderRadius: BorderRadius.circular(
                                AppTheme.buttonCornerRadius,
                              ),
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: const [
                                Text(
                                  'Knock the Rust Off',
                                  style: TextStyle(color: Colors.white),
                                ),
                                SizedBox(width: 8),
                                Icon(
                                  Icons.arrow_drop_down,
                                  color: Colors.white,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 36),

                // üìç BNB-related Hint
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    'Self-guided expeditions begin below.',
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathButton(
    BuildContext context,
    String label,
    ButtonStyle style,
    VoidCallback onTap,
  ) {
    return ElevatedButton(
      onPressed: onTap,
      style: style,
      child: Text(label, style: AppTheme.buttonTextStyle),
    );
  }

  ButtonStyle _groupButtonStyle() {
    return ElevatedButton.styleFrom(
      backgroundColor:
          AppTheme.primaryRed, // üî¥ changed from groupButtonSelected
      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 24),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
    );
  }
}










File: lib/screens/parts/part_item_screen.dart
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart'; // <-- required for DetailRoute

class PartItemScreen extends StatelessWidget {
  final String zone;

  const PartItemScreen({
    super.key,
    required this.zone,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    final List<PartItem> filteredParts = PartRepositoryIndex.getPartsForZone(
      zone.toLowerCase(),
    );

    final List<String> sequenceIds = filteredParts.map((p) => p.id).toList();

    logger.i('üü¶ Displaying PartItemScreen (Zone: $zone)');

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Parts',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
          onBack: () {
            logger.i('üîô AppBar back from PartItemScreen');
            context.go(
              '/parts',
              extra: {
                'slideFrom': SlideDirection.left,
                'transitionType': TransitionType.slide,
                'detailRoute': DetailRoute.branch,
              },
            );
          },
        ),
        const SizedBox(height: 16),
        Text(
          zone.toTitleCase(),
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 12),
        Text(
          'Choose a Part',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
        ),
        const SizedBox(height: 12),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: filteredParts.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final part = filteredParts[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: part.title,
                  onTap: () {
                    logger.i('üü• Tapped part: ${part.id}');
                    context.push(
                      '/parts/detail',
                      extra: {
                        'renderItems': buildRenderItems(ids: sequenceIds),
                        'currentIndex': index,
                        'branchIndex': 2,
                        'backDestination': '/parts/items',
                        'backExtra': {
                          'zone': zone,
                          'mobKey': mobKey,
                          'settingsKey': settingsKey,
                          'searchKey': searchKey,
                          'titleKey': titleKey,
                        },
                        'transitionKey': 'part_${part.id}_$timestamp',
                        'detailRoute': DetailRoute.branch,
                        'transitionType': TransitionType.slide, // ‚úÖ added
                        'slideFrom': SlideDirection.right, // ‚úÖ added
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/parts/part_detail_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';

import 'package:bcc5/widgets/group_picker_dropdown.dart';

class PartDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const PartDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });
  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  State<PartDetailScreen> createState() => _PartDetailScreenState();
}

class _PartDetailScreenState extends State<PartDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.part) {
      logger.w('‚ö†Ô∏è Redirecting from non-part type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale, // ‚úÖ NEW LINE
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.part) {
      return const Scaffold(body: SizedBox());
    }

    final partTitle = item.title;
    // final zoneId = widget.backExtra?['zone'] as String?;
    const zoneTitle = 'Parts';

    logger.i('üß© PartDetailScreen: $partTitle');
    logger.i('üìÑ Content blocks: ${item.content.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, partTitle, zoneTitle),
    );
  }

  Widget _buildScaffold(RenderItem item, String partTitle, String zoneTitle) {
    final zoneId = widget.backExtra?['zone'] as String?;
    final subtitleText = item.title;

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/deck_parts_montage.webp',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: zoneTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: widget.mobKey,
                settingsKey: widget.settingsKey,
                searchKey: widget.searchKey,
                titleKey: widget.titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide, // ‚úÖ Add this line
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              if (widget.detailRoute == DetailRoute.branch)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: GroupPickerDropdown(
                    label: 'Zone',
                    selectedId: zoneId?.toLowerCase() ?? '',
                    ids: PartRepositoryIndex.getZoneNames(),
                    idToTitle: {
                      for (final id in PartRepositoryIndex.getZoneNames())
                        id: id.toTitleCase(),
                    },
                    onChanged: (selectedZoneId) {
                      if (selectedZoneId == zoneId) {
                        logger.i('üü° Same zone selected ‚Üí no action');
                        return;
                      }

                      final parts = PartRepositoryIndex.getPartsForZone(
                        selectedZoneId,
                      );
                      final renderItems = buildRenderItems(
                        ids: parts.map((p) => p.id).toList(),
                      );

                      if (renderItems.isEmpty) {
                        logger.w('‚ö†Ô∏è Selected zone has no renderable items');
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Selected zone has no items.'),
                          ),
                        );
                        return;
                      }

                      TransitionManager.goToDetailScreen(
                        context: context,
                        screenType: renderItems.first.type,
                        renderItems: renderItems,
                        currentIndex: 0,
                        branchIndex: widget.branchIndex,
                        backDestination: '/parts/items',
                        backExtra: {
                          'zone': selectedZoneId,
                          'branchIndex': widget.branchIndex,
                          'mobKey': widget.mobKey,
                          'settingsKey': widget.settingsKey,
                          'searchKey': widget.searchKey,
                          'titleKey': widget.titleKey,
                        },
                        detailRoute: widget.detailRoute,
                        direction: SlideDirection.right,
                      );
                    },
                  ),
                ),

              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  subtitleText,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on PartDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on PartDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
                customNextButton:
                    (currentIndex == widget.renderItems.length - 1)
                        ? ElevatedButton(
                          onPressed: () {
                            logger.i(
                              '‚è≠Ô∏è Next Chapter tapped on PartDetailScreen',
                            );

                            if (widget.detailRoute == DetailRoute.branch) {
                              final currentZoneId =
                                  widget.backExtra?['zone'] as String?;
                              if (currentZoneId == null) {
                                logger.w('‚ö†Ô∏è No zone ID found in backExtra');
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Cannot find next zone.'),
                                  ),
                                );
                                return;
                              }

                              final nextZoneId =
                                  PartRepositoryIndex.getNextZone(
                                    currentZoneId,
                                  );
                              if (nextZoneId == null) {
                                logger.i(
                                  '‚õî No more zones after $currentZoneId',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final zone.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final partItems =
                                  PartRepositoryIndex.getPartsForZone(
                                    nextZoneId,
                                  );
                              final renderItems = buildRenderItems(
                                ids: partItems.map((p) => p.id).toList(),
                              );

                              if (renderItems.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next zone has no renderable items',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Next zone has no items.'),
                                  ),
                                );
                                return;
                              }

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: renderItems.first.type,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination: '/parts/items',
                                backExtra: {
                                  'zone': nextZoneId,
                                  'branchIndex': widget.branchIndex,
                                  'mobKey': widget.mobKey,
                                  'settingsKey': widget.settingsKey,
                                  'searchKey': widget.searchKey,
                                  'titleKey': widget.titleKey,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            } else if (widget.detailRoute == DetailRoute.path) {
                              final currentChapterId =
                                  widget.backExtra?['chapterId'] as String?;
                              final pathName =
                                  widget.backExtra?['pathName'] as String?;

                              if (currentChapterId == null ||
                                  pathName == null) {
                                logger.w(
                                  '‚ö†Ô∏è Missing path context in backExtra',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('No path context found.'),
                                  ),
                                );
                                return;
                              }

                              final nextChapter =
                                  PathRepositoryIndex.getNextChapter(
                                    pathName,
                                    currentChapterId,
                                  );

                              if (nextChapter == null) {
                                logger.i(
                                  '‚õî No next chapter in $pathName after $currentChapterId',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'You‚Äôve reached the final chapter.',
                                    ),
                                  ),
                                );
                                return;
                              }

                              final renderItems = buildRenderItems(
                                ids:
                                    nextChapter.items
                                        .map((item) => item.pathItemId)
                                        .toList(),
                              );

                              if (renderItems.isEmpty) {
                                logger.w(
                                  '‚ö†Ô∏è Next chapter has no renderable items',
                                );
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text('Next chapter has no items.'),
                                  ),
                                );
                                return;
                              }

                              TransitionManager.goToDetailScreen(
                                context: context,
                                screenType: renderItems.first.type,
                                renderItems: renderItems,
                                currentIndex: 0,
                                branchIndex: widget.branchIndex,
                                backDestination:
                                    '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                backExtra: {
                                  'chapterId': nextChapter.id,
                                  'pathName': pathName,
                                  'branchIndex': widget.branchIndex,
                                },
                                detailRoute: widget.detailRoute,
                                direction: SlideDirection.right,
                              );
                            }
                          },
                          style: AppTheme.navigationButton,
                          child: const Text('Next Chapter'),
                        )
                        : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/parts/part_zone_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';

class PartZoneScreen extends StatelessWidget {
  const PartZoneScreen({
    super.key,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  final List<String> zones = const [
    'Sails',
    'Rigging',
    'Deck',
    'Interior',
    'Hull',
  ];

  final Map<String, Offset> zonePositions = const {
    'Deck': Offset(0.17, 0.57),
    'Hull': Offset(0.39, 0.69),
    'Rigging': Offset(0.6, 0.49),
    'Sails': Offset(0.32, 0.49),
    'Interior': Offset(0.7, 0.63),
  };

  final Map<String, String> zoneDescriptions = const {
    'Sails': 'Sails -- Harness the Wind',
    'Rigging': 'Rigging -- Manage the sails',
    'Deck': 'Deck -- Exterior working surface',
    'Interior': 'Interior -- Below-deck area',
    'Hull': 'Hull -- Body of the boat',
  };

  final double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;

    logger.i('üü© Displaying PartZoneScreen with layout polish');

    return Stack(
      fit: StackFit.expand,
      children: [
        // ‚õµ Background
        Opacity(
          opacity: 0.8,
          child: Image.asset(
            'assets/images/boat_overview_tall.png',
            fit: BoxFit.cover,
          ),
        ),

        // üîµ AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Parts',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
            mobKey: mobKey,
            settingsKey: settingsKey,
            searchKey: searchKey,
            titleKey: titleKey,
          ),
        ),

        // üß≠ Screen Instruction: "Choose a Zone" with background box
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Where would you like to explore?',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // üßæ Zone Legend Box
        Positioned(
          top: appBarOffset + 120, // spacing under title
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment:
                  CrossAxisAlignment.center, // üëà changed from start to center
              children:
                  zones.map((zone) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2),
                      child: Text(
                        zoneDescriptions[zone]!,
                        textAlign:
                            TextAlign
                                .center, // üëà ensures multiline wraps stay centered
                        style: AppTheme.textTheme.bodyLarge?.copyWith(
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    );
                  }).toList(),
            ),
          ),
        ),

        // üìç Positioned Buttons
        ...zones.map((zone) {
          final offset = zonePositions[zone]!;
          final left = offset.dx * screenSize.width;
          final top = offset.dy * screenSize.height + appBarOffset;

          return Positioned(
            left: left,
            top: top,
            child: TextButton(
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 10,
                  vertical: 8,
                ),
                backgroundColor: AppTheme.groupButtonUnselected,
                foregroundColor: Colors.white,
                minimumSize: const Size(0, 40),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onPressed: () {
                logger.i('üü¶ Tapped zone: $zone');
                final timestamp = DateTime.now().millisecondsSinceEpoch;
                context.push(
                  '/parts/items',
                  extra: {
                    'zone': zone,
                    'transitionKey':
                        'part_items_${zone.toLowerCase()}_$timestamp',
                    'slideFrom': SlideDirection.right, // ‚úÖ add this
                    'transitionType': TransitionType.slide, // ‚úÖ add this
                    'detailRoute': DetailRoute.branch, // ‚úÖ consistency
                  },
                );
              },

              child: Text(zone, style: const TextStyle(fontSize: 15)),
            ),
          );
        }),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_detail_screen.dart
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/widgets/learning_path_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/widgets/group_picker_dropdown.dart';

class LessonDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const LessonDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  State<LessonDetailScreen> createState() => _LessonDetailScreenState();
}

class _LessonDetailScreenState extends State<LessonDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.lesson) {
      logger.w(
        '‚ö†Ô∏è Redirecting from non-lesson type: ${item.id} (${item.type})',
      );
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final nextItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: nextItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
      transitionType: TransitionType.fadeScale, // ‚úÖ NEW
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.lesson) {
      return const Scaffold(body: SizedBox());
    }
    const moduleTitle = 'Courses';

    final lessonTitle = item.title;

    logger.i('üìò LessonDetailScreen: $lessonTitle');
    logger.i('üß© Content blocks: ${item.content.length}');
    logger.i('üß† Flashcards: ${item.flashcards.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, moduleTitle, lessonTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String moduleTitle,
    String lessonTitle,
  ) {
    final subtitleText = lessonTitle;

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/boat_overview_new.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: moduleTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                mobKey: widget.mobKey,
                settingsKey: widget.settingsKey,
                searchKey: widget.searchKey,
                titleKey: widget.titleKey,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                      'transitionType': TransitionType.slide,
                    },
                  );
                },
              ),
              if (widget.detailRoute == DetailRoute.path)
                LearningPathProgressBar(
                  pathName: widget.backExtra?['pathName'] ?? '',
                ),

              if (widget.detailRoute == DetailRoute.branch)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: GroupPickerDropdown(
                    label: 'Module',
                    selectedId: widget.backExtra?['module'] ?? '',
                    ids: LessonRepositoryIndex.getModuleNames(),
                    idToTitle: {
                      for (final id in LessonRepositoryIndex.getModuleNames())
                        id: id.toTitleCase(),
                    },
                    onChanged: (selectedModuleId) {
                      final currentModuleId = widget.backExtra?['module'];
                      if (selectedModuleId == currentModuleId) {
                        logger.i(
                          '‚èπÔ∏è Same module selected ($selectedModuleId), no action taken',
                        );
                        return;
                      }

                      logger.i(
                        'üîÑ Module switched via dropdown ‚Üí $selectedModuleId',
                      );

                      final lessons = LessonRepositoryIndex.getLessonsForModule(
                        selectedModuleId,
                      );

                      final renderItems = buildRenderItems(
                        ids: lessons.map((l) => l.id).toList(),
                      );

                      if (renderItems.isEmpty) {
                        logger.w('‚ö†Ô∏è Selected module has no renderable items');
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Selected module has no items.'),
                          ),
                        );
                        return;
                      }

                      TransitionManager.goToDetailScreen(
                        context: context,
                        screenType: renderItems.first.type,
                        renderItems: renderItems,
                        currentIndex: 0,
                        branchIndex: widget.branchIndex,
                        backDestination: '/lessons/items',
                        backExtra: {
                          'module': selectedModuleId,
                          'branchIndex': widget.branchIndex,
                          'mobKey': widget.mobKey,
                          'settingsKey': widget.settingsKey,
                          'searchKey': widget.searchKey,
                          'titleKey': widget.titleKey,
                        },
                        detailRoute: widget.detailRoute,
                        direction: SlideDirection.right,
                      );
                    },
                  ),
                ),

              // Then REPLACE the existing `Padding(...Text(...))` block with this:
              Padding(
                padding: const EdgeInsets.only(top: 4.0, bottom: 8.0),
                child: Text(
                  subtitleText,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              Column(
                children: [
                  NavigationButtons(
                    isPreviousEnabled: currentIndex > 0,
                    isNextEnabled: currentIndex < widget.renderItems.length - 1,
                    onPrevious: () {
                      logger.i('‚¨ÖÔ∏è Previous tapped on LessonDetailScreen');
                      _navigateTo(currentIndex - 1);
                    },
                    onNext: () {
                      if (currentIndex < widget.renderItems.length - 1) {
                        logger.i('‚û°Ô∏è Next tapped on LessonDetailScreen');
                        _navigateTo(currentIndex + 1);
                      }
                    },
                    customNextButton:
                        (currentIndex == widget.renderItems.length - 1)
                            ? ElevatedButton(
                              onPressed: () {
                                logger.i(
                                  '‚è≠Ô∏è Next Chapter tapped on LessonDetailScreen',
                                );

                                if (widget.detailRoute == DetailRoute.branch) {
                                  final currentModuleId =
                                      widget.backExtra?['module'] as String?;
                                  if (currentModuleId == null) {
                                    logger.w(
                                      '‚ö†Ô∏è No module ID found in backExtra',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          'Cannot find next module.',
                                        ),
                                      ),
                                    );
                                    return;
                                  }

                                  final nextModuleId =
                                      LessonRepositoryIndex.getNextModule(
                                        currentModuleId,
                                      );

                                  if (nextModuleId == null) {
                                    logger.i(
                                      '‚õî No more modules after $currentModuleId',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          'You‚Äôve reached the final module.',
                                        ),
                                      ),
                                    );
                                    return;
                                  }

                                  final renderItems = buildRenderItems(
                                    ids:
                                        LessonRepositoryIndex.getLessonsForModule(
                                          nextModuleId,
                                        ).map((l) => l.id).toList(),
                                  );

                                  if (renderItems.isEmpty) {
                                    logger.w(
                                      '‚ö†Ô∏è Next module has no renderable items',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          'Next module has no items.',
                                        ),
                                      ),
                                    );
                                    return;
                                  }

                                  TransitionManager.goToDetailScreen(
                                    context: context,
                                    screenType: renderItems.first.type,
                                    renderItems: renderItems,
                                    currentIndex: 0,
                                    branchIndex: widget.branchIndex,
                                    backDestination: '/lessons/items',
                                    backExtra: {
                                      'module': nextModuleId,
                                      'branchIndex': widget.branchIndex,
                                      'mobKey': widget.mobKey,
                                      'settingsKey': widget.settingsKey,
                                      'searchKey': widget.searchKey,
                                      'titleKey': widget.titleKey,
                                    },

                                    detailRoute: widget.detailRoute,
                                    direction: SlideDirection.right,
                                  );
                                } else if (widget.detailRoute ==
                                    DetailRoute.path) {
                                  final currentChapterId =
                                      widget.backExtra?['chapterId'] as String?;
                                  final pathName =
                                      widget.backExtra?['pathName'] as String?;

                                  if (currentChapterId == null ||
                                      pathName == null) {
                                    logger.w(
                                      '‚ö†Ô∏è Missing path context in backExtra',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text('No path context found.'),
                                      ),
                                    );
                                    return;
                                  }

                                  final nextChapter =
                                      PathRepositoryIndex.getNextChapter(
                                        pathName,
                                        currentChapterId,
                                      );

                                  if (nextChapter == null) {
                                    logger.i(
                                      '‚õî No next chapter in $pathName after $currentChapterId',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          'You‚Äôve reached the final chapter.',
                                        ),
                                      ),
                                    );
                                    return;
                                  }

                                  final renderItems = buildRenderItems(
                                    ids:
                                        nextChapter.items
                                            .map((item) => item.pathItemId)
                                            .toList(),
                                  );

                                  if (renderItems.isEmpty) {
                                    logger.w(
                                      '‚ö†Ô∏è Next chapter has no renderable items',
                                    );
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                          'Next chapter has no items.',
                                        ),
                                      ),
                                    );
                                    return;
                                  }

                                  TransitionManager.goToDetailScreen(
                                    context: context,
                                    screenType: renderItems.first.type,
                                    renderItems: renderItems,
                                    currentIndex: 0,
                                    branchIndex: widget.branchIndex,
                                    backDestination:
                                        '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                                    backExtra: {
                                      'chapterId': nextChapter.id,
                                      'pathName': pathName,
                                      'branchIndex': widget.branchIndex,
                                    },
                                    detailRoute: widget.detailRoute,
                                    direction: SlideDirection.right,
                                  );
                                }
                              },
                              style: AppTheme.navigationButton,
                              child: const Text('Next Chapter'),
                            )
                            : null,
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/lessons/lesson_item_screen.dart
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/navigation/detail_route.dart';

class LessonItemScreen extends StatelessWidget {
  final String module;

  const LessonItemScreen({
    super.key,
    required this.module,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    logger.i('üìò LessonItemScreen loaded for module: $module');
    final lessons = LessonRepositoryIndex.getLessonsForModule(module);
    final lessonIds = lessons.map((l) => l.id).toList();
    final renderItems = buildRenderItems(ids: lessonIds);

    final moduleTitle = module.toTitleCase();

    return Column(
      children: [
        CustomAppBarWidget(
          title: 'Courses',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          mobKey: mobKey,
          settingsKey: settingsKey,
          searchKey: searchKey,
          titleKey: titleKey,
        ),
        const SizedBox(height: 16),
        Text(
          '$moduleTitle:\nDive in to any course below.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: GridView.builder(
              itemCount: lessons.length,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final lesson = lessons[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: lesson.title,
                  onTap: () {
                    logger.i('üìò Tapped lesson: ${lesson.id}');
                    context.push(
                      '/lessons/detail',
                      extra: {
                        'renderItems': renderItems,
                        'currentIndex': index,
                        'branchIndex': 1,
                        'detailRoute': DetailRoute.branch,
                        'backDestination': '/lessons/items',
                        'backExtra': {
                          'module': module,
                          'branchIndex': 1,
                          'mobKey': mobKey,
                          'settingsKey': settingsKey,
                          'searchKey': searchKey,
                          'titleKey': titleKey,
                        },
                        'transitionKey': 'lesson_${lesson.id}_$timestamp',
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,
                        'mobKey': mobKey,
                        'settingsKey': settingsKey,
                        'searchKey': searchKey,
                        'titleKey': titleKey,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_module_screen.dart
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/theme/transition_type.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart'; // ‚úÖ for toTitleCase

class LessonModuleScreen extends StatelessWidget {
  const LessonModuleScreen({
    super.key,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    final moduleNames = LessonRepositoryIndex.getModuleNames();
    logger.i('üü¶ Entered LessonModuleScreen');

    return Scaffold(
      appBar: CustomAppBarWidget(
        title: 'Courses',
        showBackButton: false,
        showSearchIcon: true,
        showSettingsIcon: true,
        mobKey: mobKey,
        settingsKey: settingsKey,
        searchKey: searchKey,
        titleKey: titleKey,
      ),
      body: Column(
        children: [
          const SizedBox(height: 16),
          Text(
            'Select a course to embark upon:',
            style: AppTheme.subheadingStyle.copyWith(
              color: AppTheme.primaryBlue,
            ),
            textAlign: TextAlign.center,
          ),

          const SizedBox(height: 16),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: moduleNames.length,
              separatorBuilder: (_, __) => const SizedBox(height: 12),
              itemBuilder: (context, index) {
                final moduleName = moduleNames[index];
                final label = moduleName.toTitleCase(); // ‚úÖ Title Case

                return GroupButton(
                  label: label,
                  onTap: () {
                    logger.i('üìò Tapped Module: $moduleName');
                    final timestamp = DateTime.now().millisecondsSinceEpoch;
                    context.push(
                      '/lessons/items',
                      extra: {
                        'module': moduleName,
                        'transitionKey': 'lesson_items_${index}_$timestamp',
                        'transitionType': TransitionType.slide,
                        'slideFrom': SlideDirection.right,
                      },
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/main.dart
// lib/main.dart

// üìÑ lib/main.dart

import 'package:flutter/material.dart';
import 'package:bcc5/bcc5_app.dart';
import 'package:bcc5/utils/settings_manager.dart';
import 'package:bcc5/utils/logger.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final showReminder = await _shouldShowEmergencyReminder();

  logger.i('''
üöÄ App Launch | Emergency Reminder: $showReminder
üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
''');

  runApp(Bcc5App(showReminder: showReminder));
}

Future<bool> _shouldShowEmergencyReminder() async {
  final enabled = await SettingsManager.getEmergencyReminderEnabled();
  if (!enabled) return false;

  final name = await SettingsManager.getBoatName();
  final type = await SettingsManager.getVesselType();
  final desc = await SettingsManager.getVesselDescription();
  final adults = await SettingsManager.getSoulsAdults();
  final children = await SettingsManager.getSoulsChildren();

  final allFilled =
      name.trim().isNotEmpty &&
      type.trim().isNotEmpty &&
      desc.trim().isNotEmpty &&
      (adults > 0 || children > 0);

  final reviewedAt = await SettingsManager.getEmergencyInfoReviewedAt();
  return !allFilled || reviewedAt == null;
}

// import 'package:flutter/material.dart';
// import 'package:bcc5/bcc5_app.dart';
// import 'package:bcc5/utils/logger.dart'; // Make sure this is imported

// void main() {
//   WidgetsFlutterBinding.ensureInitialized();

//   logger.i('''
// üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ
// üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
// üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
// üåïüåïüåïüåïüåï APP LAUNCH üåïüåïüåïüåïüåï
// ''');

//   runApp(const Bcc5App());
// }










File: lib/theme/transition_type.dart
// lib/theme/transition_type.dart

enum TransitionType {
  instant,
  slide,
  fade,
  scale,
  fadeScale,
  rotation, // Rotates in (good for playful or tool-related UIs)
  slideUp, // Slide from bottom to top
  slideDown, // Slide from top to bottom
  slideLeft, // Slide from right to left (RTL friendly)
  slideRight, // Slide from left to right
  slide3D, // Simulated 3D slide with depth transform
  cube, // 3D cube rotation
  flip, // Horizontal or vertical card flip
  zoomIn, // Like scale, but focuses from a small origin point
  zoomOut, // Starts zoomed in, shrinks to position
  blurFade, // Blur in/out while fading
  morph, // Morphing shape (e.g., FAB to full screen)
  carousel, // Swipe-style transition (like page view)
  sharedAxis, // Material motion shared axis (x, y, z)
  ripple, // Expands like a ripple from the center/tap
  delayFade, // Fades in with intentional delay for layered content
  staggered, // Choreographed entry of multiple widgets
}










File: lib/theme/slide_direction.dart
enum SlideDirection { right, left, up, down, none }










File: lib/theme/app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryBlue = Color(0xFF163FE8);
  static const Color primaryRed = Color.fromARGB(255, 255, 0, 0);
  static const Color backgroundColor = Colors.white;
  static const Color darkBackground = Color(0xFF121212);

  static const Color infoColor = primaryBlue;
  static const Color errorColor = primaryRed;
  static const Color successColor = Colors.green;
  static const Color warningColor = Colors.orange;
  static const Color disabledGray = Colors.grey;

  static const double textScaleMultiplier = 1.5;

  static const TextStyle headingStyle = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static final ButtonStyle groupRedButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(vertical: 14),
    textStyle: buttonTextStyle,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );

  static const TextStyle subheadingStyle = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle bodyTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.normal,
    color: Colors.black87,
  );

  static const TextStyle buttonTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle captionStyle = TextStyle(
    fontSize: 14,
    color: Colors.grey,
  );

  static const TextTheme textTheme = TextTheme(
    headlineLarge: headingStyle,
    headlineMedium: subheadingStyle,
    bodyLarge: bodyTextStyle,
    labelLarge: buttonTextStyle,
    bodySmall: captionStyle,
  );

  static final TextTheme scaledTextTheme = TextTheme(
    headlineLarge: headingStyle.copyWith(
      fontSize: headingStyle.fontSize! * textScaleMultiplier,
    ),
    headlineMedium: subheadingStyle.copyWith(
      fontSize: subheadingStyle.fontSize! * textScaleMultiplier,
    ),
    bodyLarge: bodyTextStyle.copyWith(
      fontSize: bodyTextStyle.fontSize! * textScaleMultiplier,
    ),
    labelLarge: buttonTextStyle.copyWith(
      fontSize: buttonTextStyle.fontSize! * textScaleMultiplier,
    ),
    bodySmall: captionStyle.copyWith(
      fontSize: captionStyle.fontSize! * textScaleMultiplier,
    ),
  );

  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    scaffoldBackgroundColor: backgroundColor,
    colorScheme: ColorScheme.fromSeed(seedColor: primaryBlue),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      foregroundColor: Colors.white,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: primaryRed,
      unselectedItemColor: Colors.white70,
      selectedIconTheme: IconThemeData(size: 26),
      unselectedIconTheme: IconThemeData(size: 22),
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
      showUnselectedLabels: true,
    ),
    textTheme: textTheme,
  );

  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: darkBackground,
    colorScheme: ColorScheme.dark(primary: primaryBlue, secondary: primaryRed),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: Colors.white,
      unselectedItemColor: Colors.white70,
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
    ),
    textTheme: textTheme,
  );

  static const double buttonCornerRadius = 12.0;
  static const double cardCornerRadius = 16.0;
  static const double screenPadding = 16.0;

  static const EdgeInsetsGeometry groupButtonPadding = EdgeInsets.symmetric(
    vertical: 14,
    horizontal: 24,
  );

  static const EdgeInsetsGeometry itemButtonPadding = EdgeInsets.symmetric(
    vertical: 10,
    horizontal: 12,
  );

  static const EdgeInsets cardPadding = EdgeInsets.all(12);

  static final ButtonStyle navigationButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
    textStyle: buttonTextStyle,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );

  static final ButtonStyle disabledNavigationButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: Colors.grey.shade400,
        foregroundColor: Colors.white.withAlpha(153),
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        textStyle: buttonTextStyle,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static final ButtonStyle highlightedGroupButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: primaryRed,
        padding: groupButtonPadding,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static Color get groupButtonSelected => primaryBlue.withAlpha(229);
  static Color get groupButtonUnselected => primaryBlue.withAlpha(153);

  static ButtonStyle get navigationButton => navigationButtonStyle;
  static ButtonStyle get disabledNavigationButton =>
      disabledNavigationButtonStyle;
}










File: lib/data/models/content_block.dart
enum ContentBlockType { heading, text, code, bulletList, image, divider }

class ContentBlock {
  final ContentBlockType type;
  final String? text;
  final List<String>? bulletList;
  final String? imagePath;

  const ContentBlock._({
    required this.type,
    this.text,
    this.bulletList,
    this.imagePath,
  });

  // Heading block
  factory ContentBlock.heading(String text) =>
      ContentBlock._(type: ContentBlockType.heading, text: text);

  // Text block
  factory ContentBlock.text(String text) =>
      ContentBlock._(type: ContentBlockType.text, text: text);

  // Code block
  factory ContentBlock.code(String codeText) =>
      ContentBlock._(type: ContentBlockType.code, text: codeText);

  // Bullet list block
  factory ContentBlock.bullets(List<String> bullets) =>
      ContentBlock._(type: ContentBlockType.bulletList, bulletList: bullets);

  // Image block
  factory ContentBlock.image(String imagePath) =>
      ContentBlock._(type: ContentBlockType.image, imagePath: imagePath);

  // Divider block
  factory ContentBlock.divider() =>
      ContentBlock._(type: ContentBlockType.divider);

  // Optional: utility for combining sides with divider
  static List<ContentBlock> dividerList() => [ContentBlock.divider()];

  // Optional convenience getter
  List<String>? get bullets => bulletList;
}










File: lib/data/models/tool_model.dart
// üìÑ lib/data/models/tool_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  const ToolItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });
}










File: lib/data/models/lesson_model.dart
// üìÑ lib/data/models/lesson_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class Lesson {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<String> keywords;
  final List<Flashcard> flashcards;
  final bool isPaid;

  const Lesson({
    required this.id,
    required this.title,
    required this.content,
    required this.keywords,
    required this.flashcards,
    required this.isPaid,
  });
}










File: lib/data/models/part_model.dart
// üü† part_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class PartItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;
  final List<String> keywords;
  final bool isPaid;

  const PartItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
    this.keywords = const [],
    this.isPaid = false,
  });
}

class PartZone {
  final String name; // e.g., "Hull", "Deck"
  final List<PartItem> items;

  const PartZone({required this.name, required this.items});
}










File: lib/data/models/path_model.dart
// üìÑ lib/data/models/path_model.dart

class PathItem {
  final String pathItemId; // e.g., "lesson_dock_1.00", "part_deck_3.00"

  const PathItem({required this.pathItemId});
}

class LearningPathChapter {
  final String id; // e.g., "path_competentCrew_1.00"
  final String title;
  final List<PathItem> items;

  const LearningPathChapter({
    required this.id,
    required this.title,
    required this.items,
  });
}










File: lib/data/models/flashcard_model.dart
// üìÑ lib/data/models/flashcard_model.dart

import 'package:bcc5/data/models/content_block.dart';

class Flashcard {
  final String id;
  final String title;
  final List<ContentBlock> sideA;
  final List<ContentBlock> sideB;
  final bool isPaid;
  final bool showAFirst;

  Flashcard({
    required this.id,
    required this.title,
    List<ContentBlock>? sideA,
    List<ContentBlock>? sideB,
    required this.isPaid,
    required this.showAFirst,
  }) : sideA = sideA ?? [],
       sideB = sideB ?? [];
}










File: lib/data/models/render_item.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

enum RenderItemType { lesson, part, tool, flashcard }

class RenderItem {
  final RenderItemType type;
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  RenderItem({
    required this.type,
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });

  /// Whether this item has any usable content or flashcards
  bool get isResolved => content.isNotEmpty || flashcards.isNotEmpty;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RenderItem && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;

  factory RenderItem.fromFlashcard(Flashcard flashcard) {
    return RenderItem(
      id: flashcard.id,
      type: RenderItemType.flashcard,
      title: flashcard.title,
      content: flashcard.sideA, // or empty list if irrelevant
      flashcards: [flashcard],
    );
  }
}










File: lib/widgets/item_button.dart
import 'package:bcc5/theme/app_theme.dart';
import 'package:flutter/material.dart';

class ItemButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final Color color;
  final double borderRadius;
  final EdgeInsetsGeometry padding;

  const ItemButton({
    super.key,
    required this.label,
    required this.onTap,
    this.color = AppTheme.primaryRed, // üü† Default to red (DetailButton style)
    this.borderRadius = 12.0, // üü† Default rounded rectangle
    this.padding = const EdgeInsets.symmetric(
      vertical: 12,
      horizontal: 8,
    ), // üü† Default compact padding
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap, // üü† Clean tap handler
      child: Container(
        padding: padding,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        alignment: Alignment.center,
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle.copyWith(color: Colors.white),
        ),
      ),
    );
  }
}










File: lib/widgets/content_block_renderer.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/theme/app_theme.dart';

class ContentBlockRenderer extends StatelessWidget {
  final List<ContentBlock> blocks;

  const ContentBlockRenderer({super.key, required this.blocks});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: 16), // add bottom spacing
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: blocks.map((block) => _renderBlock(context, block)).toList(),
      ),
    );
  }

  Widget _renderBlock(BuildContext context, ContentBlock block) {
    switch (block.type) {
      case ContentBlockType.heading:
        return Padding(
          padding: const EdgeInsets.only(top: 12, bottom: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.headlineMedium,
          ),
        );

      case ContentBlockType.text:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.bodyLarge,
          ),
        );

      case ContentBlockType.code:
        return Container(
          margin: const EdgeInsets.symmetric(vertical: 4),
          padding: const EdgeInsets.all(8),
          color: Colors.grey.shade200,
          child: Text(
            block.text ?? '',
            style: const TextStyle(fontFamily: 'monospace'),
          ),
        );

      case ContentBlockType.bulletList:
        final bullets = block.bullets ?? [];
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children:
              bullets.map((b) {
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('‚Ä¢ ', style: TextStyle(fontSize: 16)),
                      Expanded(child: Text(b)),
                    ],
                  ),
                );
              }).toList(),
        );

      case ContentBlockType.image:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Image.asset(
            block.imagePath ?? 'assets/images/fallback_image.jpeg',
            fit: BoxFit.cover,
          ),
        );

      case ContentBlockType.divider:
        return const Divider(thickness: 2);
    }
  }
}










File: lib/widgets/search_modal.dart
// üìÑ lib/widgets/search_modal.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';

// üö´ No need to import flashcards until keyword support is added

class SearchResult {
  final String id;
  final String title;
  final RenderItemType type;

  SearchResult({required this.id, required this.title, required this.type});
}

class SearchModal extends StatefulWidget {
  const SearchModal({super.key});

  @override
  State<SearchModal> createState() => _SearchModalState();
}

class _SearchModalState extends State<SearchModal> {
  final TextEditingController _controller = TextEditingController();
  late List<SearchResult> _allResults;
  List<SearchResult> _filteredResults = [];

  @override
  void initState() {
    super.initState();
    _allResults = _buildSearchIndex();
    _filteredResults = _allResults;
  }

  List<SearchResult> _buildSearchIndex() {
    final results = <SearchResult>[];

    for (final lesson in LessonRepositoryIndex.getAllLessons()) {
      for (final keyword in lesson.keywords) {
        results.add(
          SearchResult(
            id: lesson.id,
            title: keyword,
            type: RenderItemType.lesson,
          ),
        );
      }
    }

    for (final part in PartRepositoryIndex.getAllParts()) {
      for (final keyword in part.keywords) {
        results.add(
          SearchResult(id: part.id, title: keyword, type: RenderItemType.part),
        );
      }
    }

    // üöß Flashcard keywords not yet available in model
    // Future-proof logic:
    // for (final flashcard in FlashcardRepository.getAllFlashcards()) {
    //   for (final keyword in flashcard.keywords ?? []) {
    //     results.add(SearchResult(
    //       id: flashcard.id,
    //       title: keyword,
    //       type: RenderItemType.flashcard,
    //     ));
    //   }
    // }

    return results;
  }

  void _onSearchChanged(String query) {
    setState(() {
      _filteredResults =
          _allResults
              .where((r) => r.title.toLowerCase().contains(query.toLowerCase()))
              .toList();
    });
  }

  void _navigateToResult(SearchResult result) {
    final renderItems = buildRenderItems(ids: [result.id]);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final extra = {
      'renderItems': renderItems,
      'currentIndex': 0,
      'branchIndex': 0,
      'backDestination': '/',
      'transitionKey': 'search_${result.id}_$timestamp',
    };

    switch (result.type) {
      case RenderItemType.lesson:
        context.go('/lessons/detail', extra: extra);
        break;
      case RenderItemType.part:
        context.go('/parts/detail', extra: extra);
        break;
      case RenderItemType.tool:
        context.go('/tools/detail', extra: extra);
        break;
      case RenderItemType.flashcard:
        context.go('/flashcards/detail', extra: extra);
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.white,
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _controller,
              onChanged: _onSearchChanged,
              decoration: const InputDecoration(
                labelText: 'Search...',
                border: OutlineInputBorder(),
              ),
            ),
          ),
          Expanded(
            child: ListView.separated(
              itemCount: _filteredResults.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (context, index) {
                final result = _filteredResults[index];
                return ListTile(
                  title: Text(result.title),
                  subtitle: Text(result.type.name),
                  onTap: () => _navigateToResult(result),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/widgets/disabled_item_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class DisabledItemButton extends StatelessWidget {
  final String label;

  const DisabledItemButton({super.key, required this.label});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: AppTheme.itemButtonPadding,
      decoration: BoxDecoration(
        color: Colors.grey.shade400,
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
      alignment: Alignment.center,
      child: Text(
        label,
        textAlign: TextAlign.center,
        style: AppTheme.buttonTextStyle.copyWith(
          color: Colors.white.withAlpha(153), // ‚úÖ No error
        ),
      ),
    );
  }
}










File: lib/widgets/mob_modal.dart
import 'package:bcc5/utils/logger.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:bcc5/utils/location_helper.dart';
import 'package:bcc5/screens/emergency/mob_emergency_screen.dart';

Future<void> showMOBModal(BuildContext context) async {
  final localContext = context;
  final now = DateTime.now();
  final formattedTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(now);

  final position = await getCurrentLocation();
  final gpsText =
      position != null
          ? '${position.latitude}, ${position.longitude}'
          : 'Unavailable';

  logger.i('üö® MOB Modal triggered at $formattedTime with coords: $gpsText');

  // ‚úÖ SAFELY use context after await
  if (!localContext.mounted) return;

  Navigator.of(context).push(
    MaterialPageRoute(
      fullscreenDialog: true,
      builder: (_) => const MOBEmergencyScreen(),
    ),
  );
}

//   showDialog(
//     context: localContext,
//     builder: (BuildContext context) {
//       return AlertDialog(
//         title: const Text(
//           'üö® Man Overboard!',
//           style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
//         ),
//         content: Column(
//           mainAxisSize: MainAxisSize.min,
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Text('Timestamp:', style: TextStyle(fontWeight: FontWeight.bold)),
//             SelectableText(formattedTime),
//             const SizedBox(height: 12),
//             Text(
//               'GPS Coordinates:',
//               style: TextStyle(fontWeight: FontWeight.bold),
//             ),
//             SelectableText(gpsText),
//             const SizedBox(height: 16),
//             const Text(
//               'Immediate Steps:',
//               style: TextStyle(fontWeight: FontWeight.bold),
//             ),
//             const SizedBox(height: 4),
//             const Text('1. Shout "Man Overboard"'),
//             const Text('2. Assign a spotter'),
//             const Text('3. Activate MOB alarm/GPS'),
//             const Text('4. Begin safe retrieval'),
//             const SizedBox(height: 16),
//             ElevatedButton.icon(
//               icon: const Icon(Icons.warning_amber_rounded),
//               label: const Text('Other Emergencies'),
//               onPressed: () {
//                 logger.i('üÜò Other Emergencies button tapped');
//                 Navigator.of(context).pop();
//               },
//             ),
//           ],
//         ),
//         actions: [
//           TextButton(
//             child: const Text('Close'),
//             onPressed: () => Navigator.of(context).pop(),
//           ),
//         ],
//       );
//     },
//   );
// }










File: lib/widgets/custom_app_bar_widget.dart
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/mob_modal.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/search_modal.dart'; // üîç Search Modal
import 'package:bcc5/widgets/settings_modal.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart'; // ‚öôÔ∏è Settings Modal

class CustomAppBarWidget extends StatelessWidget
    implements PreferredSizeWidget {
  final String title;
  final bool showBackButton;
  final bool showSearchIcon;
  final bool showSettingsIcon;
  final VoidCallback? onBack;
  final VoidCallback? onSearchTap;
  final VoidCallback? onSettingsTap;

  const CustomAppBarWidget({
    super.key,
    required this.title,
    this.showBackButton = false,
    this.showSearchIcon = true,
    this.showSettingsIcon = true,
    this.onBack,
    this.onSearchTap,
    this.onSettingsTap,
    required this.mobKey,
    required this.settingsKey,
    required this.searchKey,
    required this.titleKey,
  });

  final GlobalKey mobKey;
  final GlobalKey settingsKey;
  final GlobalKey searchKey;
  final GlobalKey titleKey;

  @override
  Widget build(BuildContext context) {
    return AppBar(
      backgroundColor: AppTheme.primaryBlue,
      centerTitle: false,
      elevation: 0,
      automaticallyImplyLeading: false,
      title: Row(
        children: [
          // LEFT: Back, Search, Settings
          if (showBackButton)
            IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed:
                  onBack ??
                  () {
                    if (Navigator.of(context).canPop()) {
                      Navigator.of(context).pop();
                    } else {
                      context.go('/');
                    }
                  },
            ),
          if (showSearchIcon)
            IconButton(
              key: searchKey,
              icon: const Icon(Icons.search),
              onPressed:
                  onSearchTap ??
                  () {
                    showDialog(
                      context: context,
                      builder: (_) => const SearchModal(),
                    );
                  },
            ),

          if (showSettingsIcon)
            IconButton(
              key: settingsKey,
              icon: const Icon(Icons.settings),
              onPressed:
                  onSettingsTap ??
                  () {
                    showSettingsModal(context);
                  },
            ),

          // CENTER: Title
          Expanded(
            child: Text(
              title,
              key: titleKey,
              style: AppTheme.headingStyle,
              textAlign: TextAlign.center,
            ),
          ),

          // RIGHT: Life Ring (MOB)
          IconButton(
            key: mobKey,
            icon: Icon(
              MdiIcons.lifebuoy,
              size: 40, // Set to match previous image size
              color:
                  Colors
                      .red, // Optional: makes it bright red for emergency visibility
            ),
            tooltip: 'Man Overboard',
            onPressed: () {
              logger.i('üÜò MOB button tapped');
              showMOBModal(context);
            },
          ),
        ],
      ),
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}










File: lib/widgets/group_picker_dropdown.dart
// üìÑ lib/widgets/group_picker_dropdown.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupPickerDropdown extends StatelessWidget {
  final String label; // e.g., 'Module' or 'Chapter'
  final String selectedId;
  final List<String> ids;
  final Map<String, String> idToTitle;
  final ValueChanged<String> onChanged;

  const GroupPickerDropdown({
    super.key,
    required this.label,
    required this.selectedId,
    required this.ids,
    required this.idToTitle,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return DropdownButtonHideUnderline(
      child: DropdownButton<String>(
        value: selectedId,
        icon: const Icon(Icons.arrow_drop_down),
        borderRadius: BorderRadius.circular(12),
        style: AppTheme.scaledTextTheme.bodyLarge,
        dropdownColor: Colors.white,
        onChanged: (value) {
          if (value != null) onChanged(value);
        },
        items:
            ids.map((id) {
              return DropdownMenuItem<String>(
                value: id,
                child: Text(idToTitle[id] ?? id),
              );
            }).toList(),
      ),
    );
  }
}










File: lib/widgets/navigation_buttons.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class NavigationButtons extends StatefulWidget {
  final bool isPreviousEnabled;
  final bool isNextEnabled;
  final VoidCallback onPrevious;
  final VoidCallback onNext;
  final Widget? customNextButton;

  const NavigationButtons({
    super.key,
    required this.isPreviousEnabled,
    required this.isNextEnabled,
    required this.onPrevious,
    required this.onNext,
    this.customNextButton, // ‚úÖ new
  });

  @override
  State<NavigationButtons> createState() => _NavigationButtonsState();
}

class _NavigationButtonsState extends State<NavigationButtons> {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 6, sigmaY: 6),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.0),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                SizedBox(
                  height: 48,
                  child: ElevatedButton.icon(
                    onPressed:
                        widget.isPreviousEnabled ? widget.onPrevious : null,
                    icon: const Icon(Icons.arrow_back),
                    label: const Text('Previous'),
                    style: AppTheme.navigationButton,
                  ),
                ),
                SizedBox(
                  height: 48,
                  child:
                      widget.customNextButton ??
                      ElevatedButton(
                        onPressed: widget.isNextEnabled ? widget.onNext : null,
                        style: AppTheme.navigationButton,
                        child: Row(
                          children: const [
                            Text('Next'),
                            SizedBox(width: 8),
                            Icon(Icons.arrow_forward),
                          ],
                        ),
                      ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}










File: lib/widgets/group_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final bool isSelected;

  const GroupButton({
    super.key,
    required this.label,
    required this.onTap,
    this.isSelected = false,
  });

  @override
  Widget build(BuildContext context) {
    final backgroundColor =
        isSelected
            ? AppTheme.groupButtonSelected
            : AppTheme.groupButtonUnselected;

    return FractionallySizedBox(
      widthFactor: 0.6,
      child: ElevatedButton(
        onPressed: onTap,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          padding: AppTheme.groupButtonPadding,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
          ),
        ),
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle,
        ),
      ),
    );
  }
}










File: lib/widgets/settings_modal.dart
// lib/widgets/settings_modal.dart

import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/resume_manager.dart'; // ‚úÖ Needed for reset
import 'package:bcc5/utils/settings_manager.dart';
import 'package:bcc5/utils/radio_helper.dart';

void showSettingsModal(BuildContext context) {
  showDialog(
    context: context,
    barrierDismissible: true,
    builder: (BuildContext context) {
      return Dialog(
        insetPadding: const EdgeInsets.fromLTRB(16, 40, 16, 40),
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: LayoutBuilder(
          builder: (context, constraints) {
            return SizedBox(
              height: constraints.maxHeight,
              width: constraints.maxWidth,
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Settings', style: AppTheme.headingStyle),
                        const SizedBox(height: 12),
                        const Divider(),
                      ],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Expanded(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: ListView(
                        children: [
                          _settingSwitch('Dark Mode', false),

                          // üìú Boat Name w/ Phonetic Preview
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Boat Name',
                                  style: AppTheme.textTheme.bodyLarge,
                                ),
                                const SizedBox(height: 4),
                                FutureBuilder<String>(
                                  future: SettingsManager.getBoatName(),
                                  builder: (context, snapshot) {
                                    final controller = TextEditingController(
                                      text: snapshot.data ?? '',
                                    );
                                    return StatefulBuilder(
                                      builder: (context, setModalState) {
                                        return Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            TextField(
                                              controller: controller,
                                              decoration: const InputDecoration(
                                                border: OutlineInputBorder(),
                                                hintText: 'Enter boat name...',
                                              ),
                                              onChanged: (value) async {
                                                await SettingsManager.setBoatName(
                                                  value,
                                                );
                                                setModalState(() {});
                                              },
                                            ),
                                            const SizedBox(height: 6),
                                            Text(
                                              'Phonetic: ${formatPhonetic(controller.text)}',
                                              style: AppTheme
                                                  .textTheme
                                                  .bodySmall!
                                                  .copyWith(
                                                    color: Colors.grey[700],
                                                  ),
                                            ),
                                          ],
                                        );
                                      },
                                    );
                                  },
                                ),
                              ],
                            ),
                          ),

                          _settingSwitch('Show Tour Wizard', true),

                          _settingButton(context, 'Legal & Privacy Docs'),
                          _settingDropdown('Units', ['Meters', 'Feet'], 'Feet'),
                          _settingDropdown('Wave Height', [
                            'Feet',
                            'Meters',
                          ], 'Feet'),
                          _settingDropdown('Temperature', [
                            'Fahrenheit',
                            'Celsius',
                          ], 'Fahrenheit'),

                          StatefulBuilder(
                            builder: (context, setState) {
                              return FutureBuilder<GPSDisplayFormat>(
                                future: SettingsManager.getGPSDisplayFormat(),
                                builder: (context, snapshot) {
                                  final current =
                                      snapshot.data ??
                                      GPSDisplayFormat.marineCompact;
                                  return _settingEnumDropdown(
                                    'GPS Format',
                                    {
                                      'DMM (Marine Style)':
                                          GPSDisplayFormat.marineCompact,
                                      'DMS (Older Charts)':
                                          GPSDisplayFormat.marineFull,
                                      'DD (Decimal)': GPSDisplayFormat.decimal,
                                    },
                                    current,
                                    (newFormat) async {
                                      await SettingsManager.setGPSDisplayFormat(
                                        newFormat,
                                      );
                                      setState(() {});
                                    },
                                  );
                                },
                              );
                            },
                          ),

                          const Divider(height: 24),
                          const SizedBox(height: 8),
                          Text(
                            'üö® Emergency Info',
                            style: AppTheme.textTheme.titleMedium,
                          ),
                          const SizedBox(height: 4),

                          FutureBuilder<String>(
                            future: SettingsManager.getVesselType(),
                            builder: (context, snapshot) {
                              final current = snapshot.data ?? '';
                              final controller = TextEditingController(
                                text: current,
                              );
                              final options = [
                                'Sailing Vessel',
                                'Motor Vessel',
                                'Catamaran',
                                'Other',
                              ];

                              return Padding(
                                padding: const EdgeInsets.symmetric(
                                  vertical: 4,
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text('Vessel Type'),
                                    const SizedBox(height: 4),
                                    DropdownButtonFormField<String>(
                                      value:
                                          options.contains(current)
                                              ? current
                                              : 'Other',
                                      items:
                                          options
                                              .map(
                                                (type) => DropdownMenuItem(
                                                  value: type,
                                                  child: Text(type),
                                                ),
                                              )
                                              .toList(),
                                      onChanged: (value) {
                                        if (value == 'Other') {
                                          controller.text = '';
                                        } else {
                                          controller.text = value!;
                                          SettingsManager.setVesselType(value);
                                        }
                                      },
                                    ),
                                    const SizedBox(height: 6),
                                    if (controller.text.isEmpty ||
                                        controller.text == 'Other')
                                      TextField(
                                        controller: controller,
                                        decoration: const InputDecoration(
                                          hintText: 'Enter vessel type',
                                          border: OutlineInputBorder(),
                                        ),
                                        onChanged:
                                            (value) =>
                                                SettingsManager.setVesselType(
                                                  value,
                                                ),
                                      ),
                                  ],
                                ),
                              );
                            },
                          ),

                          _settingTextField(
                            label: 'Vessel Length',
                            initialValueFuture:
                                SettingsManager.getVesselLength(),
                            onChanged: SettingsManager.setVesselLength,
                          ),
                          _settingTextField(
                            label:
                                'Vessel Description (e.g., ‚Äúsail number 56788‚Äù)',
                            initialValueFuture:
                                SettingsManager.getVesselDescription(),
                            onChanged: SettingsManager.setVesselDescription,
                          ),
                          _settingIntField(
                            label: 'Souls Onboard (Adults)',
                            initialValueFuture:
                                SettingsManager.getSoulsAdults(),
                            onChanged: SettingsManager.setSoulsAdults,
                          ),
                          _settingIntField(
                            label: 'Souls Onboard (Children)',
                            initialValueFuture:
                                SettingsManager.getSoulsChildren(),
                            onChanged: SettingsManager.setSoulsChildren,
                          ),
                          _settingTextField(
                            label: 'MMSI (optional)',
                            initialValueFuture: SettingsManager.getMMSI(),
                            onChanged: SettingsManager.setMMSI,
                          ),
                          _settingTextField(
                            label: 'Emergency Contact Phone',
                            initialValueFuture:
                                SettingsManager.getEmergencyContact(),
                            onChanged: SettingsManager.setEmergencyContact,
                          ),
                          _settingTextField(
                            label: "Captain's Phone",
                            initialValueFuture:
                                SettingsManager.getCaptainPhone(),
                            onChanged: SettingsManager.setCaptainPhone,
                          ),
                          const SizedBox(height: 12),

                          // üß™ DEV Reset Resume Point
                          ElevatedButton(
                            style: AppTheme.navigationButton,
                            onPressed: () async {
                              await ResumeManager.clearResumePoint();
                              if (!context.mounted) return;
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('‚úÖ Resume point cleared'),
                                ),
                              );
                            },
                            child: const Text('Reset Resume Point'),
                          ),

                          const SizedBox(height: 12),
                          ElevatedButton(
                            style: AppTheme.navigationButton,
                            onPressed: () => Navigator.of(context).pop(),
                            child: const Text('Close Settings'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        ),
      );
    },
  );
}

// üîò Switch Row
Widget _settingSwitch(String label, bool value) {
  return SwitchListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    value: value,
    onChanged: (_) {},
    contentPadding: const EdgeInsets.symmetric(horizontal: 0),
  );
}

// üìÇ Static Dropdown for legacy settings (read-only)
Widget _settingDropdown(String label, List<String> options, String selected) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 4),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: AppTheme.textTheme.bodyLarge),
        DropdownButton<String>(
          value: selected,
          items:
              options
                  .map((o) => DropdownMenuItem(value: o, child: Text(o)))
                  .toList(),
          onChanged: (_) {},
        ),
      ],
    ),
  );
}

// üß≠ Dynamic Enum Dropdown
Widget _settingEnumDropdown<T>(
  String label,
  Map<String, T> options,
  T selected,
  void Function(T) onChanged,
) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 4),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: AppTheme.textTheme.bodyLarge),
        DropdownButton<T>(
          value: selected,
          items:
              options.entries
                  .map(
                    (e) =>
                        DropdownMenuItem<T>(value: e.value, child: Text(e.key)),
                  )
                  .toList(),
          onChanged: (val) {
            if (val != null) onChanged(val);
          },
        ),
      ],
    ),
  );
}

// üìÑ Legal Docs Button
Widget _settingButton(BuildContext context, String label) {
  return ListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    trailing: const Icon(Icons.chevron_right),
    onTap: () {
      showDialog(
        context: context,
        builder:
            (_) => AlertDialog(
              title: const Text('Legal & Privacy Documents'),
              content: const Text('This would display legal info...'),
              actions: [
                Padding(
                  padding: EdgeInsets.zero,
                  child: SizedBox(
                    height: 44, // ‚¨ÖÔ∏è Tight fixed height
                    width: double.infinity,
                    child: TextButton(
                      style: TextButton.styleFrom(
                        backgroundColor: AppTheme.primaryRed,
                        foregroundColor: Colors.white,
                        padding: EdgeInsets.zero,
                        shape: const RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                      ),
                      onPressed: () => Navigator.of(context).pop(),
                      child: const Text(
                        'Close',
                        style: TextStyle(fontSize: 16),
                      ),
                    ),
                  ),
                ),
              ],
            ),
      );
    },
  );
}

// üî§ Text field with Future initial value
Widget _settingTextField({
  required String label,
  required Future<String> initialValueFuture,
  required void Function(String) onChanged,
}) {
  return FutureBuilder<String>(
    future: initialValueFuture,
    builder: (context, snapshot) {
      final controller = TextEditingController(text: snapshot.data ?? '');
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: TextField(
          controller: controller,
          decoration: InputDecoration(labelText: label),
          onChanged: onChanged,
        ),
      );
    },
  );
}

// üî¢ Integer-only input field
Widget _settingIntField({
  required String label,
  required Future<int> initialValueFuture,
  required void Function(int) onChanged,
}) {
  return FutureBuilder<int>(
    future: initialValueFuture,
    builder: (context, snapshot) {
      final controller = TextEditingController(
        text: (snapshot.data ?? 0).toString(),
      );
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: TextField(
          controller: controller,
          decoration: InputDecoration(labelText: label),
          keyboardType: TextInputType.number,
          onChanged: (value) {
            final parsed = int.tryParse(value);
            if (parsed != null) onChanged(parsed);
          },
        ),
      );
    },
  );
}










File: lib/widgets/flip_card_widget.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';

class FlipCardWidget extends StatelessWidget {
  final List<ContentBlock> front;
  final List<ContentBlock> back;
  final bool showFront;
  final Animation<double> animation; // Required for flip, even if unused here

  const FlipCardWidget({
    super.key,
    required this.front,
    required this.back,
    required this.showFront,
    required this.animation,
  });

  @override
  Widget build(BuildContext context) {
    final visibleContent = showFront ? front : back;

    return Semantics(
      label: showFront ? 'Flashcard front' : 'Flashcard back',
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16),
        child: SingleChildScrollView(
          child: DefaultTextStyle.merge(
            style: const TextStyle(fontSize: 19),
            child: ContentBlockRenderer(blocks: visibleContent),
          ),
        ),
      ),
    );
  }
}










File: lib/widgets/learning_path_progress_bar.dart
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class LearningPathProgressBar extends StatelessWidget {
  final String pathName;

  const LearningPathProgressBar({super.key, required this.pathName});

  @override
  Widget build(BuildContext context) {
    if (pathName.isEmpty) return const SizedBox.shrink();

    logger.i('üß≠ LearningPathProgressBar: $pathName');

    return Container(
      width: double.infinity,
      color: Colors.red[50],
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Center(
        child: Text(
          pathName.toTitleCase(),
          style: AppTheme.scaledTextTheme.labelLarge?.copyWith(
            color: AppTheme.primaryRed,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}
