









File: lib/navigation/main_scaffold.dart
import 'package:flutter/material.dart';
import '../screens/home/landing_screen.dart';
import '../screens/lessons/lesson_module_screen.dart';
import '../screens/parts/part_zone_screen.dart';
import '../screens/flashcards/flashcard_category_screen.dart';
import '../screens/tools/tools_screen.dart';
import '../utils/logger.dart';
// import '../theme/app_theme.dart';

class MainScaffold extends StatelessWidget {
  final int branchIndex;
  final Widget child;

  const MainScaffold({
    super.key,
    required this.branchIndex,
    required this.child,
  });

  void _onItemTapped(BuildContext context, int index) {
    if (index == branchIndex) {
      logger.i('🔁 BNB tapped same tab: $index — no navigation');
      return;
    }

    logger.i('🧭 BNB tapped tab $index — switching screen');

    Widget newScreen;
    switch (index) {
      case 0:
        newScreen = const LandingScreen();
        break;
      case 1:
        newScreen = const LessonModuleScreen();
        break;
      case 2:
        newScreen = const PartZoneScreen();
        break;
      case 3:
        newScreen = const FlashcardCategoryScreen();
        break;
      case 4:
        newScreen = const ToolsScreen();
        break;
      default:
        newScreen = const LandingScreen();
    }

    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (_) => MainScaffold(branchIndex: index, child: newScreen),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    logger.i('🔷 Building MainScaffold, tab index: $branchIndex');

    return Scaffold(
      body: child,
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: branchIndex,
        onTap: (index) => _onItemTapped(context, index),

        // backgroundColor: AppTheme.primaryBlue, // ✅ Themed!
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(
            icon: Icon(Icons.menu_book),
            label: 'Modules',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Parts'),
          BottomNavigationBarItem(icon: Icon(Icons.style), label: 'Flashcards'),
          BottomNavigationBarItem(icon: Icon(Icons.build), label: 'Tools'),
        ],
        type: BottomNavigationBarType.fixed,
      ),
    );
  }
}










File: lib/navigation/app_router.dart










File: lib/navigation/scaffold_helpers.dart
import 'package:flutter/material.dart';
import 'main_scaffold.dart';

/// Wraps any screen with the MainScaffold layout,
/// ensuring the BottomNavigationBar remains visible.
///
/// [branchIndex] determines which BNB tab is highlighted.
/// [child] is the content screen to render inside the scaffold.
Widget withBNB({required int branchIndex, required Widget child}) {
  return MainScaffold(branchIndex: branchIndex, child: child);
}










File: lib/utils/id_parser.dart
// 🟠 lib/utils/id_parser.dart

/// Extracts the [type] from a content ID, e.g. 'lesson' from 'lesson_docking_1.00'
String getTypeFromId(String id) {
  final parts = id.split('_');
  return parts.isNotEmpty ? parts[0] : 'unknown';
}

/// Extracts the [group] from a content ID, e.g. 'docking' from 'lesson_docking_1.00'
String getGroupFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 2 ? parts[1] : 'unknown';
}

/// Extracts the [sequence number] from a content ID, e.g. '1.00' from 'lesson_docking_1.00'
String getSequenceFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 3 ? parts[2] : 'unknown';
}










File: lib/utils/logger.dart
import 'package:logger/logger.dart';

final logger = Logger(
  printer: PrettyPrinter(
    methodCount: 1,
    colors: true,
    printEmojis: true,
    dateTimeFormat: DateTimeFormat.none, // ✅ Modern replacement for printTime
  ),
);










File: lib/screens/home/landing_screen.dart
import 'package:flutter/material.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart'; // If needed for styling

class LandingScreen extends StatelessWidget {
  const LandingScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBarWidget(
        title: 'Welcome Aboard',
        showBackButton: false,
        showSearchIcon: true,
        showSettingsIcon: true,
      ),
      body: Center(
        child: Text('Landing screen body here', style: AppTheme.bodyTextStyle),
      ),
    );
  }
}










File: lib/screens/tools/tools_screen.dart
import 'package:flutter/material.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';

class ToolsScreen extends StatelessWidget {
  const ToolsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    logger.i('🟦 Entered ToolsScreen');

    return MainScaffold(
      branchIndex: 4,
      child: const Column(
        children: [
          CustomAppBarWidget(
            title: 'Tools',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(child: Center(child: Text('Tools Screen'))),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_category_screen.dart
import 'package:flutter/material.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';

class FlashcardCategoryScreen extends StatelessWidget {
  const FlashcardCategoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    logger.i('🟦 Entered FlashcardCategoryScreen');

    return MainScaffold(
      branchIndex: 3,
      child: const Column(
        children: [
          CustomAppBarWidget(
            title: 'Flashcards',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(child: Center(child: Text('Flashcard Category Screen'))),
        ],
      ),
    );
  }
}










File: lib/screens/learning_paths/path_chapter_screen.dart
import 'package:flutter/material.dart';

class PathChapterScreen extends StatelessWidget {
  const PathChapterScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(body: Center(child: Text('Path Chapter Screen')));
  }
}










File: lib/screens/common/content_detail_screen.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import '../../utils/logger.dart';

class ContentDetailScreen extends StatelessWidget {
  final String title;
  final List<ContentBlock> content;
  final VoidCallback? onPrevious;
  final VoidCallback? onNext;
  final VoidCallback? onBack;

  const ContentDetailScreen({
    super.key,
    required this.title,
    required this.content,
    this.onPrevious,
    this.onNext,
    this.onBack,
  });

  @override
  Widget build(BuildContext context) {
    logger.i('🟪 Displaying ContentDetailScreen: $title');

    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        backgroundColor: Colors.blueGrey[50],
        leading:
            onBack != null
                ? IconButton(
                  icon: const Icon(Icons.arrow_back),
                  onPressed: () {
                    logger.i('🔙 AppBar back tapped on $title');
                    onBack?.call();
                  },
                )
                : null,
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: content.length,
              separatorBuilder: (_, __) => const SizedBox(height: 16),
              itemBuilder: (context, index) {
                final block = content[index];
                return _renderBlock(context, block);
              },
            ),
          ),
          const Divider(height: 1),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              if (onPrevious != null)
                TextButton.icon(
                  onPressed: onPrevious,
                  icon: const Icon(Icons.arrow_back),
                  label: const Text('Previous'),
                ),
              if (onNext != null)
                TextButton.icon(
                  onPressed: onNext,
                  icon: const Icon(Icons.arrow_forward),
                  label: const Text('Next'),
                ),
            ],
          ),
          const SizedBox(height: 8),
        ],
      ),
    );
  }

  Widget _renderBlock(BuildContext context, ContentBlock block) {
    switch (block.type) {
      case ContentBlockType.heading:
        return Text(
          block.text ?? '',
          style: Theme.of(context).textTheme.headlineSmall,
        );
      case ContentBlockType.text:
        return Text(
          block.text ?? '',
          style: Theme.of(context).textTheme.bodyLarge,
        );
      case ContentBlockType.code:
        return Container(
          padding: const EdgeInsets.all(12),
          color: Colors.black87,
          child: Text(
            block.text ?? '',
            style: const TextStyle(
              color: Colors.greenAccent,
              fontFamily: 'monospace',
            ),
          ),
        );
      case ContentBlockType.bulletList:
        final bullets = block.bulletList ?? [];
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children:
              bullets.map((item) {
                return Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('• ', style: TextStyle(fontSize: 16)),
                    Expanded(child: Text(item)),
                  ],
                );
              }).toList(),
        );
      case ContentBlockType.image:
        return Image.asset(
          block.imagePath ?? 'assets/images/fallback_image.jpeg',
          fit: BoxFit.cover,
          errorBuilder: (_, __, ___) => const Placeholder(fallbackHeight: 150),
        );
    }
  }
}










File: lib/screens/common/content_navigator.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'content_detail_screen.dart';
import '../../utils/logger.dart';

class ContentScreenNavigator extends StatefulWidget {
  final String title;
  final List<String> sequenceTitles;
  final Map<String, List<ContentBlock>> contentMap;
  final int startIndex;

  const ContentScreenNavigator({
    super.key,
    required this.title,
    required this.sequenceTitles,
    required this.contentMap,
    required this.startIndex,
  });

  @override
  State<ContentScreenNavigator> createState() => _ContentScreenNavigatorState();
}

class _ContentScreenNavigatorState extends State<ContentScreenNavigator> {
  late int _currentIndex;

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.startIndex;
    logger.i('🟧 Entered ContentScreenNavigator at index $_currentIndex');
  }

  void _goToPrevious() {
    if (_currentIndex > 0) {
      setState(() {
        _currentIndex--;
        logger.i(
          '⬅️ Navigated to previous content: ${widget.sequenceTitles[_currentIndex]}',
        );
      });
    }
  }

  void _goToNext() {
    if (_currentIndex < widget.sequenceTitles.length - 1) {
      setState(() {
        _currentIndex++;
        logger.i(
          '➡️ Navigated to next content: ${widget.sequenceTitles[_currentIndex]}',
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final title = widget.sequenceTitles[_currentIndex];
    final content = widget.contentMap[title] ?? [];

    logger.i('🟨 Rendering content: $title');

    return ContentDetailScreen(
      title: title,
      content: content,
      onBack: () {
        logger.i('🔙 Back from content: $title');
        Navigator.pop(context);
      },
      onPrevious: _currentIndex > 0 ? _goToPrevious : null,
      onNext:
          _currentIndex < widget.sequenceTitles.length - 1 ? _goToNext : null,
    );
  }
}










File: lib/screens/parts/part_item_screen.dart
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/id_parser.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart'; // 🟠 Added

class PartItemScreen extends StatelessWidget {
  final int branchIndex;

  const PartItemScreen({super.key, required this.branchIndex});

  String _extractZoneFromId(String id) {
    final group = getGroupFromId(id);
    return group[0].toUpperCase() + group.substring(1); // e.g., "hull" → "Hull"
  }

  @override
  Widget build(BuildContext context) {
    final zoneExtra =
        GoRouterState.of(context).extra as Map<String, dynamic>? ?? {};
    final selectedZone = zoneExtra['zone'] as String?;

    final List<PartItem> filteredParts =
        selectedZone != null
            ? allParts
                .where((p) => _extractZoneFromId(p.id) == selectedZone)
                .toList()
            : allParts;

    logger.i('🟦 Displaying PartItemScreen (Zone: $selectedZone)');

    return MainScaffold(
      branchIndex: 2,
      child: Column(
        children: [
          const CustomAppBarWidget(
            title: 'Parts',
            showBackButton: true,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: GridView.builder(
                shrinkWrap: true,
                itemCount: filteredParts.length,
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  mainAxisSpacing: 4,
                  crossAxisSpacing: 4,
                  childAspectRatio: 2.8,
                ),
                itemBuilder: (context, index) {
                  final part = filteredParts[index];

                  return ItemButton(
                    label: part.title,
                    onTap: () {
                      logger.i('🟥 Tapped part: ${part.title}');
                      context.push(
                        '/content',
                        extra: {
                          'title': part.title,
                          'content': part.content,
                          'backDestination': '/parts/items',
                          'backExtra': {'zone': selectedZone},
                        },
                      );
                    },
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/screens/parts/part_zone_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart'; // 🟠 Added

class PartZoneScreen extends StatelessWidget {
  const PartZoneScreen({super.key});

  final List<String> zones = const [
    'Deck',
    'Hull',
    'Rigging',
    'Sails',
    'Interior',
  ];

  @override
  Widget build(BuildContext context) {
    logger.i('🟩 Displaying PartZoneScreen');

    return MainScaffold(
      branchIndex: 2,
      child: Column(
        children: [
          const CustomAppBarWidget(
            title: 'Parts',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: ListView(
                children:
                    zones
                        .map(
                          (zone) => Padding(
                            padding: const EdgeInsets.symmetric(vertical: 8),
                            child: GroupButton(
                              label: zone,
                              onTap: () {
                                logger.i('🟦 Tapped zone: $zone');
                                context.push(
                                  '/parts/items',
                                  extra: {'zone': zone},
                                );
                              },
                            ),
                          ),
                        )
                        .toList(),
              ),
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/screens/lessons/lesson_item_screen.dart
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart'; // 🟠 Added
import 'package:bcc5/utils/logger.dart';

class LessonItemScreen extends StatelessWidget {
  final String module;

  const LessonItemScreen({super.key, required this.module});

  @override
  Widget build(BuildContext context) {
    logger.i('📘 LessonItemScreen loaded for module: $module');
    const int branchIndex = 1;
    final lessons = LessonRepositoryIndex.getLessonsForModule(module);

    return PopScope(
      canPop: true,
      onPopInvokedWithResult: (didPop, context) {
        if (didPop == true && context is BuildContext) {
          logger.i('🔙 Back button pressed on LessonItemScreen');
          context.go('/lessons');
        }
      },
      child: MainScaffold(
        branchIndex: branchIndex,
        child: Column(
          children: [
            const CustomAppBarWidget(
              title: 'Lessons',
              showBackButton: true,
              showSearchIcon: true,
              showSettingsIcon: true,
            ),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: GridView.builder(
                  shrinkWrap: true,
                  itemCount: lessons.length,
                  physics: const NeverScrollableScrollPhysics(),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 4,
                    mainAxisSpacing: 4,
                    childAspectRatio: 2.8,
                  ),
                  itemBuilder: (context, index) {
                    final lesson = lessons[index];
                    return ItemButton(
                      label: lesson.title,
                      onTap: () {
                        logger.i('📘 Tapped lesson: ${lesson.id}');
                        context.push(
                          '/content',
                          extra: {
                            'contentId': lesson.id,
                            'contentType': 'lesson',
                            'backDestination': '/lessons',
                            'backExtra': {
                              'module': module,
                              'branchIndex': branchIndex,
                            },
                            'sequenceList': lessons,
                            'branchIndex': index,
                          },
                        );
                      },
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}










File: lib/screens/lessons/lesson_module_screen.dart
import 'package:bcc5/screens/lessons/lesson_item_screen.dart';
import 'package:flutter/material.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart'; // 🟠 Added
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/utils/logger.dart';

class LessonModuleScreen extends StatelessWidget {
  const LessonModuleScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final moduleNames = LessonRepositoryIndex.getModuleNames();
    logger.i('🟦 Entered LessonModuleScreen');

    return Scaffold(
      body: Column(
        children: [
          const CustomAppBarWidget(
            title: 'Choose a Module',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: moduleNames.length,
              separatorBuilder: (_, __) => const SizedBox(height: 12),
              itemBuilder: (context, index) {
                final moduleName = moduleNames[index];
                return GroupButton(
                  label: moduleName,
                  onTap: () {
                    logger.i('📘 Tapped Module: $moduleName');
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder:
                            (_) => MainScaffold(
                              branchIndex: 1,
                              child: LessonItemScreen(module: moduleName),
                            ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/main.dart
import 'package:flutter/material.dart';
import 'app.dart';

void main() {
  runApp(const Bcc5App());
}










File: lib/theme/app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  // 🔵 Primary Colors
  static const Color primaryBlue = Color(0xFF163FE8); // System-wide blue
  static const Color primaryRed = Color(0xFFCC0000); // Accent/alert color
  static const Color backgroundColor = Colors.white;
  static const Color darkBackground = Color(0xFF121212);

  // 🧠 Semantic Color Aliases
  static const Color infoColor = primaryBlue;
  static const Color errorColor = primaryRed;
  static const Color successColor = Colors.green;
  static const Color warningColor = Colors.orange;
  static const Color disabledGray = Colors.grey;

  // 🌤️ Light Theme
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    scaffoldBackgroundColor: backgroundColor,
    colorScheme: ColorScheme.fromSeed(seedColor: primaryBlue),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      foregroundColor: Colors.white,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: Colors.white,
      unselectedItemColor: Colors.white70,
      selectedIconTheme: IconThemeData(size: 26),
      unselectedIconTheme: IconThemeData(size: 22),
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
      showUnselectedLabels: true,
    ),
    textTheme: textTheme,
  );

  // 🌑 Dark Theme
  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: darkBackground,
    colorScheme: ColorScheme.dark(primary: primaryBlue, secondary: primaryRed),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: Colors.white,
      unselectedItemColor: Colors.white70,
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
    ),
    textTheme: textTheme,
  );

  // ✍️ Typography
  static const TextStyle headingStyle = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle subheadingStyle = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle bodyTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.normal,
    color: Colors.black87,
  );

  static const TextStyle buttonTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle captionStyle = TextStyle(
    fontSize: 14,
    color: Colors.grey,
  );

  static const TextTheme textTheme = TextTheme(
    headlineLarge: headingStyle,
    headlineMedium: subheadingStyle,
    bodyLarge: bodyTextStyle,
    labelLarge: buttonTextStyle,
    bodySmall: captionStyle,
  );

  // 📏 Radius, Padding, Margins
  static const double buttonCornerRadius = 12.0;
  static const double cardCornerRadius = 16.0;
  static const double screenPadding = 16.0;

  static const EdgeInsetsGeometry groupButtonPadding = EdgeInsets.symmetric(
    vertical: 14,
    horizontal: 24,
  );

  static const EdgeInsetsGeometry itemButtonPadding = EdgeInsets.symmetric(
    vertical: 10,
    horizontal: 12,
  );

  static const EdgeInsets cardPadding = EdgeInsets.all(12);
}










File: lib/data/models/content_block.dart
enum ContentBlockType { heading, text, code, bulletList, image }

class ContentBlock {
  final ContentBlockType type;
  final String? text;
  final List<String>? bulletList;
  final String? imagePath;

  const ContentBlock._({
    required this.type,
    this.text,
    this.bulletList,
    this.imagePath,
  });

  // Heading block
  factory ContentBlock.heading(String text) =>
      ContentBlock._(type: ContentBlockType.heading, text: text);

  // Text block
  factory ContentBlock.text(String text) =>
      ContentBlock._(type: ContentBlockType.text, text: text);

  // Code block
  factory ContentBlock.code(String codeText) =>
      ContentBlock._(type: ContentBlockType.code, text: codeText);

  // Bullet list block
  factory ContentBlock.bullets(List<String> bullets) =>
      ContentBlock._(type: ContentBlockType.bulletList, bulletList: bullets);

  // Image block
  factory ContentBlock.image(String imagePath) =>
      ContentBlock._(type: ContentBlockType.image, imagePath: imagePath);

  // Optional convenience getter
  List<String>? get bullets => bulletList;
}










File: lib/data/models/lesson_model.dart
import 'content_block.dart';

class Lesson {
  final String id;
  final String moduleId;
  final String title;
  final List<ContentBlock> content;
  final List<String> keywords;
  final List<String> flashcardIds;
  final bool isPaid;

  Lesson({
    required this.id,
    required this.moduleId,
    required this.title,
    required this.content,
    required this.keywords,
    required this.flashcardIds,
    required this.isPaid,
  });
}










File: lib/data/models/part_model.dart
// 🟠 part_model.dart

import 'package:bcc5/data/models/content_block.dart';

class PartItem {
  final String id; // e.g., part_hull_1.00
  final String title;
  final List<ContentBlock> content; // interleaved text and images
  final List<String> flashcardIds;
  final List<String> keywords;
  final bool isPaid;

  const PartItem({
    required this.id,
    required this.title,
    required this.content,
    this.flashcardIds = const [],
    this.keywords = const [],
    this.isPaid = false,
  });
}

class PartZone {
  final String name; // e.g., "Hull", "Deck"
  final List<PartItem> items;

  const PartZone({required this.name, required this.items});
}










File: lib/app.dart
import 'package:flutter/material.dart';
import 'theme/app_theme.dart';
import 'navigation/main_scaffold.dart';
import 'screens/home/landing_screen.dart';

class Bcc5App extends StatelessWidget {
  const Bcc5App({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BCC5 Sailing App',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      home: const MainScaffold(branchIndex: 0, child: LandingScreen()),
    );
  }
}










File: lib/widgets/item_button.dart
import 'package:bcc5/theme/app_theme.dart';
import 'package:flutter/material.dart';

class ItemButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final Color color;
  final double borderRadius;
  final EdgeInsetsGeometry padding;

  const ItemButton({
    super.key,
    required this.label,
    required this.onTap,
    this.color = AppTheme.primaryRed, // 🟠 Default to red (DetailButton style)
    this.borderRadius = 12.0, // 🟠 Default rounded rectangle
    this.padding = const EdgeInsets.symmetric(
      vertical: 12,
      horizontal: 8,
    ), // 🟠 Default compact padding
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap, // 🟠 Clean tap handler
      child: Container(
        padding: padding,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        alignment: Alignment.center,
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle.copyWith(color: Colors.white),
        ),
      ),
    );
  }
}










File: lib/widgets/disabled_item_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class DisabledItemButton extends StatelessWidget {
  final String label;

  const DisabledItemButton({super.key, required this.label});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: AppTheme.itemButtonPadding,
      decoration: BoxDecoration(
        color: Colors.grey.shade400,
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
      alignment: Alignment.center,
      child: Text(
        label,
        textAlign: TextAlign.center,
        style: AppTheme.buttonTextStyle.copyWith(
          color: Colors.white.withAlpha(153), // ✅ No error
        ),
      ),
    );
  }
}










File: lib/widgets/custom_app_bar_widget.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class CustomAppBarWidget extends StatelessWidget
    implements PreferredSizeWidget {
  final String title;
  final bool showBackButton;
  final bool showSearchIcon;
  final bool showSettingsIcon;

  const CustomAppBarWidget({
    super.key,
    required this.title,
    this.showBackButton = false,
    this.showSearchIcon = true,
    this.showSettingsIcon = true,
  });

  @override
  Widget build(BuildContext context) {
    return AppBar(
      leading:
          showBackButton
              ? IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed: () => Navigator.of(context).pop(),
              )
              : null,
      centerTitle: true,
      title: Text(title, style: AppTheme.headingStyle),
      backgroundColor: AppTheme.primaryBlue,
      elevation: 0,
      actions: [
        if (showSearchIcon)
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: () {
              // TO-DO: Navigate to search screen
            },
          ),
        if (showSettingsIcon)
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              // TO-DO: Navigate to settings screen
            },
          ),
      ],
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}










File: lib/widgets/group_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final bool isSelected;

  const GroupButton({
    super.key,
    required this.label,
    required this.onTap,
    this.isSelected = false,
  });

  @override
  Widget build(BuildContext context) {
    final backgroundColor =
        isSelected
            ? AppTheme.primaryBlue.withAlpha(229) // 🟠 Selected: more opaque
            : AppTheme.primaryBlue.withAlpha(
              153,
            ); // 🟠 Unselected: more transparent

    return FractionallySizedBox(
      widthFactor: 0.6, // 🟠 Consistent width
      child: ElevatedButton(
        onPressed: onTap,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          padding: AppTheme.groupButtonPadding,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
          ),
        ),
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle,
        ),
      ),
    );
  }
}
