









File: lib/navigation/main_scaffold.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../utils/logger.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class MainScaffold extends StatelessWidget {
  final int branchIndex;
  final Widget child;
  final PreferredSizeWidget? appBar;

  const MainScaffold({
    super.key,
    required this.branchIndex,
    required this.child,
    this.appBar,
  });

  void _onItemTapped(BuildContext context, int index) {
    if (index == branchIndex) return;

    logger.i('üß≠ BNB tapped tab $index ‚Äî switching via GoRouter');

    final routes = ['/', '/lessons', '/parts', '/tools', '/flashcards'];
    final destination = routes[index];

    context.go(
      destination,
      extra: {
        'transitionKey': UniqueKey(),
        'detailRoute': DetailRoute.branch,
        'slideFrom': SlideDirection.none,
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    logger.d('üî∑ Building MainScaffold, tab index: $branchIndex');

    return Scaffold(
      appBar: appBar,
      body: child,
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: branchIndex,
        onTap: (index) => _onItemTapped(context, index),
        type: BottomNavigationBarType.fixed,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.anchor_outlined),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.public_outlined),
            label: 'Modules',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.sailing_outlined),
            label: 'Parts',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.build), label: 'Tools'),
          BottomNavigationBarItem(
            icon: Icon(Icons.quiz_outlined),
            label: 'Flashcards',
          ),
        ],
      ),
    );
  }
}










File: lib/navigation/app_router.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/screens/home/landing_screen.dart';
import 'package:bcc5/screens/lessons/lesson_module_screen.dart';
import 'package:bcc5/screens/lessons/lesson_item_screen.dart';
import 'package:bcc5/screens/lessons/lesson_detail_screen.dart';
import 'package:bcc5/screens/parts/part_zone_screen.dart';
import 'package:bcc5/screens/parts/part_item_screen.dart';
import 'package:bcc5/screens/parts/part_detail_screen.dart';
import 'package:bcc5/screens/tools/tool_bag_screen.dart';
import 'package:bcc5/screens/tools/tool_item_screen.dart';
import 'package:bcc5/screens/tools/tool_detail_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_category_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_item_screen.dart';
import 'package:bcc5/screens/flashcards/flashcard_detail_screen.dart';
import 'package:bcc5/screens/paths/path_chapter_screen.dart';
import 'package:bcc5/screens/paths/path_item_screen.dart';
import 'package:bcc5/utils/transition_manager.dart';

final appRouter = GoRouter(
  initialLocation: '/',
  routes: [
    // üèÅ Landing
    GoRoute(
      path: '/',
      name: 'landing',
      pageBuilder: (context, state) {
        logger.i('üèÅ Entering LandingScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          child: const MainScaffold(branchIndex: 0, child: LandingScreen()),
        );
      },
    ),

    // üß≠ Learning Paths
    GoRoute(
      path: '/learning-paths/:pathName',
      name: 'learning-path',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        logger.i('üß≠ Navigating to PathChapterScreen for "$pathName"');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          child: MainScaffold(
            branchIndex: 0,
            child: PathChapterScreen(pathName: pathName),
          ),
        );
      },
    ),
    GoRoute(
      path: '/learning-paths/:pathName/items',
      name: 'learning-path-items',
      pageBuilder: (context, state) {
        final pathName =
            state.pathParameters['pathName']?.replaceAll('-', ' ') ?? 'Unknown';
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final chapterId = extras['chapterId'] as String?;
        if (chapterId == null) {
          logger.e('‚ùå Missing chapterId for path $pathName');
          return TransitionManager.buildCustomTransition(
            context: context,
            state: state,
            transitionKey: state.pageKey,
            child: const MainScaffold(branchIndex: 0, child: LandingScreen()),
          );
        }
        logger.i('üìò Navigating to PathItemScreen: $pathName / $chapterId');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(
            branchIndex: 0,
            child: PathChapterScreen(pathName: pathName),
          ),
        );
      },
    ),

    // üìò Lessons
    GoRoute(
      path: '/lessons',
      name: 'lessons',
      pageBuilder: (context, state) {
        logger.i('üìò Entering LessonModuleScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(
            branchIndex: 0,
            child: PathItemScreen(pathName: pathName, chapterId: chapterId),
          ),
        );
      },
    ),
    GoRoute(
      path: '/lessons/items',
      name: 'lesson-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final module = extras['module'] as String?;
        if (module == null) {
          logger.e('‚ùå Missing module parameter for LessonItemScreen');
          return TransitionManager.buildCustomTransition(
            context: context,
            state: state,
            transitionKey: state.pageKey,
            child: const MainScaffold(
              branchIndex: 1,
              child: LessonModuleScreen(),
            ),
          );
        }
        logger.i('üìò Navigating to LessonItemScreen for module: $module');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(
            branchIndex: 1,
            child: LessonItemScreen(module: module),
          ),
        );
      },
    ),
    GoRoute(
      path: '/lessons/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final sequenceIds = extras['sequenceIds'] as List<String>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;

        final renderItems = buildRenderItems(ids: sequenceIds);

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: LessonDetailScreen(
            renderItems: renderItems,
            currentIndex: currentIndex,
            branchIndex: branchIndex,
            backDestination: backDestination,
            backExtra: backExtra,
            detailRoute: detailRoute,
          ),
        );
      },
    ),

    // üß© Parts
    GoRoute(
      path: '/parts',
      name: 'parts',
      pageBuilder: (context, state) {
        logger.i('üß© Entering PartZoneScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: const MainScaffold(branchIndex: 2, child: PartZoneScreen()),
        );
      },
    ),
    GoRoute(
      path: '/parts/items',
      name: 'part-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final zone = extras['zone'] as String? ?? '';
        logger.i('üß© Navigating to PartItemScreen for zone: $zone');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(
            branchIndex: 2,
            child: PartItemScreen(zone: zone),
          ),
        );
      },
    ),
    GoRoute(
      path: '/parts/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final sequenceIds = extras['sequenceIds'] as List<String>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;

        final renderItems = buildRenderItems(ids: sequenceIds);

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: PartDetailScreen(
            renderItems: renderItems,
            currentIndex: currentIndex,
            branchIndex: branchIndex,
            backDestination: backDestination,
            backExtra: backExtra,
            detailRoute: detailRoute,
          ),
        );
      },
    ),

    // üõ†Ô∏è Tools
    GoRoute(
      path: '/tools',
      name: 'tools',
      pageBuilder: (context, state) {
        logger.i('üõ†Ô∏è Entering ToolsScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(branchIndex: 3, child: ToolBagScreen()),
        );
      },
    ),
    GoRoute(
      path: '/tools/items',
      name: 'tool-items',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final toolbag = extras['toolbag'] as String? ?? '';
        logger.i('üõ†Ô∏è Navigating to ToolItemScreen for toolbag: $toolbag');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: MainScaffold(
            branchIndex: 3,
            child: ToolItemScreen(toolbag: toolbag),
          ),
        );
      },
    ),
    GoRoute(
      path: '/tools/detail',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>;
        final sequenceIds = extras['sequenceIds'] as List<String>;
        final currentIndex = extras['currentIndex'] as int;
        final branchIndex = extras['branchIndex'] as int;
        final backDestination = extras['backDestination'] as String;
        final backExtra = extras['backExtra'] as Map<String, dynamic>?;
        final detailRoute = extras['detailRoute'] as DetailRoute;

        final renderItems = buildRenderItems(ids: sequenceIds);

        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey,
          child: ToolDetailScreen(
            renderItems: renderItems,
            currentIndex: currentIndex,
            branchIndex: branchIndex,
            backDestination: backDestination,
            backExtra: backExtra,
            detailRoute: detailRoute,
          ),
        );
      },
    ),

    // üÉè Flashcards
    GoRoute(
      path: '/flashcards',
      name: 'flashcards',
      pageBuilder: (context, state) {
        logger.i('üìá Entering FlashcardCategoryScreen');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey, // ‚úÖ added here
          child: const MainScaffold(
            branchIndex: 4,
            child: FlashcardCategoryScreen(),
          ),
        );
      },
    ),
    GoRoute(
      path: '/flashcards/items',
      name: 'flashcardItems',
      pageBuilder: (context, state) {
        final extras = state.extra as Map<String, dynamic>? ?? {};
        final category = extras['category'] as String? ?? 'all';
        logger.i(
          'üìá Navigating to FlashcardItemScreen for category: $category',
        );
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey, // ‚úÖ added here
          child: MainScaffold(
            branchIndex: 4,
            child: FlashcardItemScreen(category: category),
          ),
        );
      },
    ),
    GoRoute(
      path: '/flashcards/detail',
      pageBuilder: (context, state) {
        final extra = state.extra as Map<String, dynamic>;
        logger.i('üÉè Entering FlashcardDetailScreen with extra: $extra');
        return TransitionManager.buildCustomTransition(
          context: context,
          state: state,
          transitionKey: state.pageKey, // ‚úÖ inserted here
          child: MainScaffold(
            branchIndex: extra['branchIndex'] ?? 4,
            child: FlashcardDetailScreen(
              key: ValueKey(extra['currentIndex'] ?? extra['startIndex'] ?? 0),
              renderItems: extra['renderItems'],
              currentIndex: extra['currentIndex'] ?? extra['startIndex'] ?? 0,
              branchIndex: extra['branchIndex'] ?? 4,
              backDestination: extra['backDestination'] ?? '/',
              backExtra: extra['backExtra'] as Map<String, dynamic>?,
              detailRoute: extra['detailRoute'],
              transitionKey: extra['transitionKey'],
            ),
          ),
        );
      },
    ),
  ],
);










File: lib/navigation/detail_route.dart
// lib/navigation/detail_route.dart

enum DetailRoute { path, branch, search }










File: lib/navigation/scaffold_helpers.dart
import 'package:flutter/material.dart';
import 'main_scaffold.dart';

/// Wraps any screen with the MainScaffold layout,
/// ensuring the BottomNavigationBar remains visible.
///
/// [branchIndex] determines which BNB tab is highlighted.
/// [child] is the content screen to render inside the scaffold.
Widget withBNB({required int branchIndex, required Widget child}) {
  return MainScaffold(branchIndex: branchIndex, child: child);
}










File: lib/bcc5_app.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/app_router.dart';

class Bcc5App extends StatelessWidget {
  const Bcc5App({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'BCC5 Sailing App',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      // darkTheme: AppTheme.darkTheme, // Optional: enable when needed
      // themeMode: ThemeMode.system,   // Optional: system-based theming
      routerConfig: appRouter,
    );
  }
}










File: lib/utils/id_parser.dart
// üü† lib/utils/id_parser.dart

/// Extracts the [type] from a content ID, e.g. 'lesson' from 'lesson_docking_1.00'
String getTypeFromId(String id) {
  final parts = id.split('_');
  return parts.isNotEmpty ? parts[0] : 'unknown';
}

/// Extracts the [group] from a content ID, e.g. 'docking' from 'lesson_docking_1.00'
String getGroupFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 2 ? parts[1] : 'unknown';
}

/// Extracts the [sequence number] from a content ID, e.g. '1.00' from 'lesson_docking_1.00'
String getSequenceFromId(String id) {
  final parts = id.split('_');
  return parts.length >= 3 ? parts[2] : 'unknown';
}










File: lib/utils/transition_manager.dart
import 'package:bcc5/utils/logger.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import '../navigation/detail_route.dart';
import '../theme/slide_direction.dart';

class TransitionManager {
  static void goToDetailScreen({
    required BuildContext context,
    required RenderItemType screenType,
    required List<RenderItem> renderItems,
    required int currentIndex,
    required int branchIndex,
    required String backDestination,
    required Map<String, dynamic>? backExtra,
    required DetailRoute detailRoute,
    SlideDirection direction = SlideDirection.none,
  }) {
    final route = _getRouteForScreenType(screenType);
    final transitionKey = UniqueKey().toString();

    logger.i(
      '[TransitionManager] goToDetailScreen ‚Üí '
      'type: $screenType | route: $route | index: $currentIndex\n'
      '‚Üí detailRoute: $detailRoute | direction: $direction\n'
      '‚Üí backDestination: $backDestination | transitionKey: $transitionKey',
    );

    context.go(
      route,
      extra: {
        'renderItems': renderItems,
        'currentIndex': currentIndex,
        'branchIndex': branchIndex,
        'backDestination': backDestination,
        'backExtra': backExtra,
        'detailRoute': detailRoute,
        'transitionKey': transitionKey,
        'slideFrom': direction,
      },
    );
  }

  static String _getRouteForScreenType(RenderItemType type) {
    switch (type) {
      case RenderItemType.lesson:
        return '/lessons/detail';
      case RenderItemType.part:
        return '/parts/detail';
      case RenderItemType.tool:
        return '/tools/detail';
      case RenderItemType.flashcard:
        return '/flashcards/detail';
    }
  }

  /// Route-level transition builder for GoRouter `pageBuilder`
  static CustomTransitionPage buildCustomTransition({
    required BuildContext context,
    required GoRouterState state,
    required ValueKey<String> transitionKey,
    required Widget child,
  }) {
    final extra = state.extra;

    final detailRoute =
        extra is Map<String, dynamic> && extra['detailRoute'] is DetailRoute
            ? extra['detailRoute'] as DetailRoute
            : (() {
              logger.w(
                '[TransitionManager] ‚ùó Missing detailRoute in .extra ‚Äî defaulting to DetailRoute.branch',
              );
              return DetailRoute.branch;
            })();

    final slideFrom =
        extra is Map<String, dynamic> && extra['slideFrom'] is SlideDirection
            ? extra['slideFrom'] as SlideDirection
            : SlideDirection.none;

    logger.i(
      '[TransitionManager] buildCustomTransition ‚Üí '
      'detailRoute: $detailRoute | slideFrom: $slideFrom',
    );

    return CustomTransitionPage(
      key: transitionKey, // ‚úÖ fixed
      child: child,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        switch (detailRoute) {
          case DetailRoute.branch:
          case DetailRoute.search:
            return buildInstantTransition(child);
          case DetailRoute.path:
            return buildSlideTransition(child, animation, slideFrom);
        }
      },
    );
  }
}

/// Used for in-group transitions (Next/Previous)
Widget buildScaleFadeTransition(
  Widget child,
  Animation<double> animation,
  Animation<double> secondaryAnimation,
) {
  return ScaleTransition(
    scale: Tween<double>(begin: 0.95, end: 1.0).animate(animation),
    child: FadeTransition(opacity: animation, child: child),
  );
}

/// Used for instant appearance (default)
Widget buildInstantTransition(Widget child) {
  return child;
}

/// Used for initial entry into detail screen via path/search
Widget buildSlideTransition(
  Widget child,
  Animation<double> animation,
  SlideDirection direction,
) {
  late final Offset beginOffset;
  switch (direction) {
    case SlideDirection.right:
      beginOffset = const Offset(1.0, 0.0);
      break;
    case SlideDirection.left:
      beginOffset = const Offset(-1.0, 0.0);
      break;
    case SlideDirection.down:
      beginOffset = const Offset(0.0, 1.0);
      break;
    case SlideDirection.up:
      beginOffset = const Offset(0.0, -1.0);
      break;
    case SlideDirection.none:
      return child;
  }

  return SlideTransition(
    position: Tween<Offset>(
      begin: beginOffset,
      end: Offset.zero,
    ).animate(animation),
    child: child,
  );
}










File: lib/utils/logger.dart
import 'package:logger/logger.dart';

final logger = Logger(
  printer: PrettyPrinter(
    methodCount: 1,
    colors: true,
    printEmojis: true,
    dateTimeFormat: DateTimeFormat.none, // ‚úÖ Modern replacement for printTime
  ),
);










File: lib/utils/render_item_helpers.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/utils/logger.dart';

List<RenderItem> buildRenderItems({required List<String> ids}) {
  logger.i('üõ†Ô∏è buildRenderItems ‚Üí ids: $ids');

  final items = <RenderItem>[];
  final invalidIds = <String>[];

  for (final id in ids) {
    final item = getContentObject(id);
    if (item != null) {
      // logger.d('‚úÖ Built RenderItem ‚Üí id: ${item.id}, type: ${item.type}');
      items.add(item);
    } else {
      logger.w('‚ùå Failed to resolve RenderItem for id: $id');
      invalidIds.add(id);
    }
  }

  logger.d(
    'üì¶ buildRenderItems summary:\n'
    '  ‚Ä¢ valid: ${items.length}\n'
    '  ‚Ä¢ invalid: ${invalidIds.length}',
  );

  if (invalidIds.isNotEmpty) {
    logger.w('‚ö†Ô∏è Invalid RenderItem IDs: $invalidIds');
  }

  return items;
}

RenderItem? getContentObject(String id) {
  if (id.startsWith('lesson_')) {
    final lesson = LessonRepositoryIndex.getLessonById(id);
    if (lesson != null) {
      return RenderItem(
        type: RenderItemType.lesson,
        id: lesson.id,
        title: lesson.title,
        content: lesson.content,
        flashcards: lesson.flashcards,
      );
    }
  }

  if (id.startsWith('part_')) {
    final part = PartRepositoryIndex.getPartById(id);
    if (part != null) {
      return RenderItem(
        type: RenderItemType.part,
        id: part.id,
        title: part.title,
        content: part.content,
        flashcards: part.flashcards,
      );
    }
  }

  if (id.startsWith('tool_')) {
    final tool = ToolRepositoryIndex.getToolById(id);
    if (tool != null) {
      return RenderItem(
        type: RenderItemType.tool,
        id: tool.id,
        title: tool.title,
        content: tool.content,
        flashcards: tool.flashcards,
      );
    }
  }

  if (id.startsWith('flashcard_')) {
    final flashcard =
        LessonRepositoryIndex.getFlashcardById(id) ??
        PartRepositoryIndex.getFlashcardById(id) ??
        ToolRepositoryIndex.getFlashcardById(id);

    if (flashcard != null) {
      return RenderItem(
        type: RenderItemType.flashcard,
        id: flashcard.id,
        title: flashcard.title,
        content: flashcard.sideA + ContentBlock.dividerList() + flashcard.sideB,
        flashcards: [flashcard],
      );
    }
  }

  logger.w('‚ùå getContentObject ‚Üí no match for id: $id');
  return null;
}










File: lib/utils/string_extensions.dart
extension TitleCaseExtension on String {
  String toTitleCase() {
    return split(' ')
        .map(
          (word) =>
              word.isEmpty
                  ? word
                  : word[0].toUpperCase() + word.substring(1).toLowerCase(),
        )
        .join(' ');
  }
}










File: lib/screens/home/landing_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';

class LandingScreen extends StatelessWidget {
  const LandingScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        const CustomAppBarWidget(
          title: 'Welcome Aboard',
          showBackButton: false,
          showSearchIcon: true,
          showSettingsIcon: true,
        ),
        Expanded(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(
              vertical: 24,
              horizontal: AppTheme.screenPadding,
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // üìù General Intro Text
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    'Sailing Routes',
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 20),

                // üìò Competent Crew Intro Text
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    "Competent Crew: New crew start here to learn how to be safe, helpful, and enjoy.",
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(height: 28),

                // üöÄ Path Buttons
                _buildPathButton(
                  context,
                  'Competent Crew',
                  AppTheme.highlightedGroupButtonStyle,
                  () {
                    logger.i('üìò Navigating to Competent Crew Path');
                    context.go('/learning-paths/competent-crew');
                  },
                ),
                const SizedBox(height: 28),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    "Knock the rust off these topics if your sea-legs are gone.",
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),

                const SizedBox(height: 16),
                _buildPathButton(
                  context,
                  'Knock the Rust Off',
                  _groupButtonStyle(),
                  () {
                    logger.i('üìò Navigating to Knock the Rust Off Path');
                    context.go('/learning-paths/knock-the-rust-off');
                  },
                ),
                const SizedBox(height: 16),
                _buildPathButton(context, 'Docking', _groupButtonStyle(), () {
                  logger.i('üìò Navigating to Docking Path');
                  context.go('/learning-paths/docking');
                }),
                const SizedBox(height: 16),

                // üß™ TEMP: Anchoring ‚Üí Transition Demo
                _buildPathButton(context, 'Anchoring', _groupButtonStyle(), () {
                  logger.i(
                    'üé¨ Navigating to Transition Demo via Anchoring button',
                  );
                  context.go('/transition-demo'); // üëà temporarily rerouted
                }),

                const SizedBox(height: 36),

                // üìç BNB-related Hint
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Text(
                    'Self-guided expeditions begin below.',
                    style: AppTheme.subheadingStyle.copyWith(
                      color: AppTheme.primaryBlue,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathButton(
    BuildContext context,
    String label,
    ButtonStyle style,
    VoidCallback onTap,
  ) {
    return ElevatedButton(
      onPressed: onTap,
      style: style,
      child: Text(label, style: AppTheme.buttonTextStyle),
    );
  }

  ButtonStyle _groupButtonStyle() {
    return ElevatedButton.styleFrom(
      backgroundColor: AppTheme.groupButtonSelected,
      padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 24),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
    );
  }
}










File: lib/screens/tools/tool_bag_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/logger.dart';

class ToolBagScreen extends StatelessWidget {
  const ToolBagScreen({super.key});

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final toolbags = ToolRepositoryIndex.getToolbagNames();
    logger.i('üü¶ Displaying ToolsScreen');

    return Stack(
      fit: StackFit.expand,
      children: [
        // Background (optional: can add if needed)
        // Opacity(
        //   opacity: 0.2,
        //   child: Image.asset(
        //     'assets/images/some_background.png',
        //     fit: BoxFit.cover,
        //   ),
        // ),

        // AppBar
        const Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Tools',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
        ),

        // "Choose a Toolbag" title
        Positioned(
          top: appBarOffset + 24,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Choose a Toolbag',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // Button list
        Positioned.fill(
          top: appBarOffset + 100,
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: ListView.builder(
              itemCount: toolbags.length,
              itemBuilder: (context, index) {
                final toolbag = toolbags[index];
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: GroupButton(
                    label: toolbag[0].toUpperCase() + toolbag.substring(1),
                    onTap: () {
                      logger.i('üõ†Ô∏è Selected toolbag: $toolbag');
                      final timestamp = DateTime.now().millisecondsSinceEpoch;
                      context.push(
                        '/tools/items',
                        extra: {
                          'toolbag': toolbag,
                          'transitionKey': 'tool_items_${toolbag}_$timestamp',
                        },
                      );
                    },
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_item_screen.dart
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart'; // ‚úÖ PATCHED

class ToolItemScreen extends StatelessWidget {
  final String toolbag;

  const ToolItemScreen({super.key, required this.toolbag});

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    logger.i('üõ†Ô∏è Displaying ToolItemScreen (Toolbag: $toolbag)');

    if (toolbag.isEmpty) {
      logger.w(
        '‚ö†Ô∏è ToolItemScreen received empty toolbag ‚Äî using fallback title.',
      );
    }

    final List<ToolItem> tools = ToolRepositoryIndex.getToolsForBag(toolbag);
    final List<String> sequenceIds = tools.map((t) => t.id).toList();

    return Stack(
      fit: StackFit.expand,
      children: [
        // üîµ AppBar
        Column(
          children: [
            CustomAppBarWidget(
              title:
                  (toolbag.isNotEmpty)
                      ? '${toolbag[0].toUpperCase()}${toolbag.substring(1)} Tools'
                      : 'Tools',
              showBackButton: true,
              showSearchIcon: true,
              showSettingsIcon: true,
              onBack: () {
                logger.i('üîô AppBar back from ToolItemScreen');
                context.go('/tools');
              },
            ),
            const SizedBox(height: 90), // leaves space for "Choose a Rule"
            Expanded(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: GridView.builder(
                  itemCount: tools.length,
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 4,
                    mainAxisSpacing: 4,
                    childAspectRatio: 2.8,
                  ),
                  itemBuilder: (context, index) {
                    final tool = tools[index];
                    final timestamp = DateTime.now().millisecondsSinceEpoch;

                    return ItemButton(
                      label: tool.title,
                      onTap: () {
                        logger.i('üõ†Ô∏è Tapped tool: ${tool.id}');
                        context.push(
                          '/tools/detail',
                          extra: {
                            'renderItems': buildRenderItems(ids: sequenceIds),
                            'currentIndex': index,
                            'branchIndex': 3,
                            'backDestination': '/tools/items',
                            'backExtra': {'toolbag': toolbag},
                            'transitionKey': 'tool_${tool.id}_$timestamp',
                            'detailRoute': DetailRoute.branch, // ‚úÖ PATCHED
                          },
                        );
                      },
                    );
                  },
                ),
              ),
            ),
          ],
        ),

        // üß≠ Screen Instruction: "Choose a Rule"
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withAlpha(217),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Choose a Rule',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/tools/tool_detail_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

class ToolDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const ToolDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<ToolDetailScreen> createState() => _ToolDetailScreenState();
}

class _ToolDetailScreenState extends State<ToolDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.tool) {
      logger.w('‚ö†Ô∏è Redirecting from non-tool type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.tool) {
      return const Scaffold(body: SizedBox());
    }

    final toolTitle = item.title;
    final toolbagTitle =
        (widget.backExtra?['toolbag'] as String?)?.toTitleCase() ?? 'Tool';

    logger.i('üõ†Ô∏è ToolDetailScreen: $toolTitle');
    logger.i('üìÑ Content blocks: ${item.content.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, toolTitle, toolbagTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String toolTitle,
    String toolbagTitle,
  ) {
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/navigation_lights.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: toolbagTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                    },
                  );
                },
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: Text(
                  toolTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on ToolDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on ToolDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_detail_screen.dart
import 'dart:math' as math;
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/flip_card_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/transition_manager.dart';

class FlashcardDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const FlashcardDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<FlashcardDetailScreen> createState() => _FlashcardDetailScreenState();
}

class _FlashcardDetailScreenState extends State<FlashcardDetailScreen>
    with SingleTickerProviderStateMixin {
  late int currentIndex;
  late AnimationController _controller;
  late Animation<double> _flipAnimation;
  bool showFront = true;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    if (widget.renderItems.isEmpty) {
      logger.e('‚ùå FlashcardDetailScreen received empty renderItems');
    } else {
      final item = widget.renderItems[currentIndex];
      logger.i(
        'üü© FlashcardDetailScreen Loaded:\n'
        '  ‚îú‚îÄ index: $currentIndex\n'
        '  ‚îú‚îÄ id: ${item.id}\n'
        '  ‚îú‚îÄ type: ${item.type}\n'
        '  ‚îú‚îÄ renderItems.length: ${widget.renderItems.length}\n'
        '  ‚îú‚îÄ branchIndex: ${widget.branchIndex}\n'
        '  ‚îú‚îÄ backDestination: ${widget.backDestination}\n'
        '  ‚îî‚îÄ backExtra: ${widget.backExtra}',
      );

      if (item.type != RenderItemType.flashcard) {
        logger.w(
          '‚ö†Ô∏è Redirecting from non-flashcard type: ${item.id} (${item.type})',
        );
        WidgetsBinding.instance.addPostFrameCallback((_) {
          TransitionManager.goToDetailScreen(
            context: context,
            screenType: item.type,
            renderItems: widget.renderItems,
            currentIndex: currentIndex,
            branchIndex: widget.branchIndex,
            backDestination: widget.backDestination,
            backExtra: widget.backExtra,
            detailRoute: widget.detailRoute,
            direction: SlideDirection.none,
          );
        });
      }
    }

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );

    _flipAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOut));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void flipCard() {
    logger.i(showFront ? 'üîÉ Flipping to back' : 'üîÉ Flipping to front');
    setState(() {
      showFront = !showFront;
      _controller.isCompleted || _controller.velocity > 0
          ? _controller.reverse()
          : _controller.forward();
    });
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚õî Invalid navigation attempt: $newIndex');
      return;
    }

    final target = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: target.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.renderItems.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.flashcard || item.flashcards.isEmpty) {
      return const Scaffold(
        body: Center(child: Text('No flashcard content available')),
      );
    }

    final flashcard = item.flashcards.first;
    final title = flashcard.title;
    final sideA = flashcard.sideA;
    final sideB = flashcard.sideB;
    final category =
        (widget.backExtra?['category'] as String?)?.toTitleCase() ??
        'Flashcards';

    logger.i(
      'üñºÔ∏è Rendering Flashcard:\n'
      '  ‚îú‚îÄ title: $title\n'
      '  ‚îú‚îÄ sideA: ${sideA.length} blocks\n'
      '  ‚îî‚îÄ sideB: ${sideB.length} blocks',
    );

    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/sailboat_cartoon.jpg',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: category,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                    },
                  );
                },
              ),
              const SizedBox(height: 16),
              Text(
                title,
                style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                  color: AppTheme.primaryBlue,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              Expanded(
                child: Center(
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      Image.asset(
                        'assets/images/index_card.png',
                        width: 360,
                        height: 420,
                        fit: BoxFit.fill,
                      ),
                      SizedBox(
                        width: 360,
                        height: 420,
                        child: AnimatedBuilder(
                          animation: _flipAnimation,
                          builder: (context, child) {
                            final isFront = _flipAnimation.value < 0.5;
                            return Transform(
                              alignment: Alignment.center,
                              transform: Matrix4.rotationY(
                                _flipAnimation.value * math.pi,
                              ),
                              child:
                                  isFront
                                      ? Padding(
                                        padding: const EdgeInsets.only(top: 32),
                                        child: FlipCardWidget(
                                          front: sideA,
                                          back: sideB,
                                          showFront: true,
                                          animation: _flipAnimation,
                                        ),
                                      )
                                      : Transform(
                                        alignment: Alignment.center,
                                        transform: Matrix4.rotationY(math.pi),
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                            top: 32,
                                          ),
                                          child: FlipCardWidget(
                                            front: sideA,
                                            back: sideB,
                                            showFront: false,
                                            animation: _flipAnimation,
                                          ),
                                        ),
                                      ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: ElevatedButton(
                  onPressed: flipCard,
                  style: AppTheme.navigationButton,
                  child: Text(showFront ? 'Flip Over' : 'Flip Back'),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () => _navigateTo(currentIndex - 1),
                onNext: () => _navigateTo(currentIndex + 1),
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/flashcards/flashcard_category_screen.dart
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';

class FlashcardCategoryScreen extends StatelessWidget {
  const FlashcardCategoryScreen({super.key});

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    logger.i('üü¶ Entered FlashcardCategoryScreen');

    final categories = getAllCategories();
    final sorted = [
      ...categories.where((c) => c == 'all' || c == 'random'),
      ...categories.where((c) => c != 'all' && c != 'random'),
    ];
    logger.i('üìá Sorted flashcard categories: $sorted');

    return Stack(
      fit: StackFit.expand,
      children: [
        const Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Flashcards',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
        ),
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withAlpha(217),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Choose a Group',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),
        Positioned.fill(
          top: appBarOffset + 100,
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Center(
              child: Wrap(
                spacing: 12,
                runSpacing: 12,
                children:
                    sorted.map((category) {
                      final isSpecial =
                          category == 'all' || category == 'random';
                      final style =
                          isSpecial
                              ? AppTheme.highlightedGroupButtonStyle
                              : ElevatedButton.styleFrom(
                                backgroundColor: AppTheme.groupButtonUnselected,
                                padding: AppTheme.groupButtonPadding,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(
                                    AppTheme.buttonCornerRadius,
                                  ),
                                ),
                              );

                      return SizedBox(
                        width: 160,
                        child: ElevatedButton(
                          onPressed: () {
                            logger.i('üü• Tapped flashcard category: $category');
                            final timestamp =
                                DateTime.now().millisecondsSinceEpoch;
                            context.push(
                              '/flashcards/items',
                              extra: {
                                'category': category,
                                'transitionKey':
                                    'flashcards_items_${category}_$timestamp',
                              },
                            );
                          },

                          style: style,
                          child: Text(
                            category[0].toUpperCase() + category.substring(1),
                            style: AppTheme.buttonTextStyle,
                            textAlign: TextAlign.center,
                          ),
                        ),
                      );
                    }).toList(),
              ),
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/flashcards/flashcard_item_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/repositories/flashcards/flashcard_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart'; // ‚úÖ needed for buildRenderItems
import 'package:bcc5/navigation/detail_route.dart'; // ‚úÖ PATCHED

class FlashcardItemScreen extends StatelessWidget {
  final String category;

  const FlashcardItemScreen({super.key, required this.category});

  static const double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    logger.i('üü¶ Entered FlashcardItemScreen for category: $category');

    final List<Flashcard> flashcards = getFlashcardsForCategory(category);
    final renderItems = buildRenderItems(
      ids: flashcards.map((fc) => fc.id).toList(),
    );

    logger.i(
      'üìò Loaded ${flashcards.length} flashcards for category: $category',
    );

    final titleCaseCategory = category.toTitleCase();

    if (flashcards.isEmpty) {
      return Column(
        children: [
          CustomAppBarWidget(
            title: titleCaseCategory,
            showBackButton: true,
            showSearchIcon: true,
            showSettingsIcon: true,
            onBack: () {
              logger.i('üîô AppBar back from FlashcardItemScreen');
              context.go('/flashcards');
            },
          ),
          const Expanded(
            child: Center(
              child: Text('No flashcards found for this category.'),
            ),
          ),
        ],
      );
    }

    return Stack(
      fit: StackFit.expand,
      children: [
        // üîµ AppBar
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: titleCaseCategory,
            showBackButton: true,
            showSearchIcon: true,
            showSettingsIcon: true,
            onBack: () {
              logger.i('üîô AppBar back from FlashcardItemScreen');
              context.go('/flashcards');
            },
          ),
        ),

        // üß≠ Instruction Text
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withAlpha(217),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Choose a Flashcard',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // üß© Flashcard Grid
        Positioned.fill(
          top: appBarOffset + 100,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: flashcards.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final card = flashcards[index];
                logger.i('üìó Rendering flashcard: ${card.title}');
                return ItemButton(
                  label: card.title,
                  onTap: () {
                    logger.i('üüß Tapped flashcard: ${card.title}');
                    final timestamp = DateTime.now().millisecondsSinceEpoch;
                    context.push(
                      '/flashcards/detail',
                      extra: {
                        'renderItems': renderItems,
                        'currentIndex': index,
                        'branchIndex': 4,
                        'backDestination': '/flashcards/items',
                        'backExtra': {'category': category},
                        'transitionKey': 'flashcard_detail_${index}_$timestamp',
                        'detailRoute': DetailRoute.branch, // ‚úÖ PATCHED
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/paths/path_item_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';

class PathItemScreen extends StatelessWidget {
  final String pathName;
  final String chapterId;

  const PathItemScreen({
    super.key,
    required this.pathName,
    required this.chapterId,
  });

  @override
  Widget build(BuildContext context) {
    logger.i(
      'üìò Building PathItemScreen for path "$pathName", chapter "$chapterId"',
    );

    final chapter = PathRepositoryIndex.getChapterById(pathName, chapterId);

    if (chapter == null) {
      logger.e(
        '‚ùå Could not find chapter for id: "$chapterId" in path: "$pathName"',
      );
      return const Center(child: Text('Chapter not found'));
    }

    final items = chapter.items;
    final sequenceIds = items.map((e) => e.pathItemId).toList();
    final renderItems = buildRenderItems(ids: sequenceIds);

    logger.i('üü© Found chapter "${chapter.title}" with ${items.length} items');

    return Column(
      children: [
        CustomAppBarWidget(
          title: chapter.title,
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          onBack: () {
            logger.i(
              'üîô Back tapped ‚Äî returning to PathChapterScreen for "$pathName"',
            );
            context.go(
              '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}',
            );
          },
        ),
        const SizedBox(height: 16),
        Text(
          'Choose a Topic',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: items.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final pathItem = items[index];
                final id = pathItem.pathItemId;
                final title = renderItems[index].title;

                logger.i(
                  'üì¶ Rendering button for pathItem: $id ‚Äî "$title" (index $index)',
                );

                return ItemButton(
                  label: title,
                  onTap: () {
                    logger.i('üü¶ Tapped PathItem: $title (index $index)');

                    if (renderItems.isEmpty) {
                      logger.e('‚ùå renderItems is empty ‚Äî navigation aborted');
                      return;
                    }

                    final timestamp = DateTime.now().millisecondsSinceEpoch;
                    final extra = {
                      'renderItems': renderItems,
                      'currentIndex': index,
                      'branchIndex': 0,
                      'backDestination':
                          '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                      'backExtra': {
                        'pathName': pathName,
                        'chapterId': chapterId,
                      },
                      'transitionKey': 'path_${id}_$timestamp',
                      'detailRoute': DetailRoute.path,
                      'slideFrom': SlideDirection.right,
                    };

                    if (id.startsWith('lesson_')) {
                      logger.i('üìò Routing to LessonDetailScreen for $id');
                      context.push('/lessons/detail', extra: extra);
                    } else if (id.startsWith('part_')) {
                      logger.i('üß© Routing to PartDetailScreen for $id');
                      context.push('/parts/detail', extra: extra);
                    } else if (id.startsWith('tool_')) {
                      logger.i('üõ†Ô∏è Routing to ToolDetailScreen for $id');
                      context.push('/tools/detail', extra: extra);
                    } else if (id.startsWith('flashcard_')) {
                      logger.i('üÉè Routing to FlashcardDetailScreen for $id');
                      context.push('/flashcards/detail', extra: extra);
                    } else {
                      logger.e('‚ùì Unknown content type for ID: $id');
                    }
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/paths/path_chapter_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/paths/path_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart'; // ‚úÖ Needed for AppTheme.primaryBlue
import 'package:bcc5/utils/string_extensions.dart'; // needed for title case

class PathChapterScreen extends StatelessWidget {
  final String pathName;

  const PathChapterScreen({super.key, required this.pathName});

  @override
  Widget build(BuildContext context) {
    logger.i('üü¢ Entered PathChapterScreen for "$pathName"');

    final chapters = PathRepositoryIndex.getChaptersForPath(pathName);
    final titles = PathRepositoryIndex.getChapterTitles(pathName);
    logger.i('üìö Found ${titles.length} chapters for "$pathName"');

    return Column(
      children: [
        CustomAppBarWidget(
          title: pathName.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
        ),
        const SizedBox(height: 16),
        Text(
          'Navigate these in any order you want - circle back to any chapter at any time.',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child:
              titles.isEmpty
                  ? const Center(child: Text('No chapters found.'))
                  : ListView.separated(
                    padding: const EdgeInsets.all(16),
                    itemCount: titles.length,
                    separatorBuilder: (_, __) => const SizedBox(height: 12),
                    itemBuilder: (context, index) {
                      if (index >= chapters.length) {
                        logger.w(
                          '‚ö†Ô∏è Index $index out of range for chapters in "$pathName"',
                        );
                        return const SizedBox.shrink();
                      }

                      final title = titles[index];
                      final chapter = chapters[index];

                      return GroupButton(
                        label: title,
                        onTap: () {
                          logger.i('üìó Tapped Chapter: $title (${chapter.id})');
                          final timestamp =
                              DateTime.now().millisecondsSinceEpoch;
                          context.push(
                            '/learning-paths/${pathName.replaceAll(' ', '-').toLowerCase()}/items',
                            extra: {
                              'pathName': pathName,
                              'chapterId': chapter.id,
                              'transitionKey':
                                  'path_items_${chapter.id}_$timestamp',
                            },
                          );
                        },
                      );
                    },
                  ),
        ),
      ],
    );
  }
}










File: lib/screens/common/content_detail_screen.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/navigation/main_scaffold.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';

class ContentDetailScreen extends StatelessWidget {
  final RenderItem item;
  final VoidCallback? onPrevious;
  final VoidCallback? onNext;
  final VoidCallback? onBack;
  final int branchIndex;

  const ContentDetailScreen({
    super.key,
    required this.item,
    this.onPrevious,
    this.onNext,
    this.onBack,
    this.branchIndex = 0,
  });

  @override
  Widget build(BuildContext context) {
    logger.i('üü™ Displaying ContentDetailScreen: ${item.title}');
    logger.i('üìÑ ContentBlock count: ${item.content.length}');

    return MainScaffold(
      branchIndex: branchIndex,
      child: Column(
        children: [
          CustomAppBarWidget(
            title: item.title,
            showBackButton: true,
            showSearchIcon: true,
            showSettingsIcon: true,
            onBack:
                onBack ??
                () {
                  logger.i('üîô Fallback back on ContentDetailScreen');
                  if (Navigator.of(context).canPop()) {
                    Navigator.of(context).pop();
                  } else {
                    context.go('/');
                  }
                },
          ),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: item.content.length,
              separatorBuilder: (_, __) => const SizedBox(height: 16),
              itemBuilder: (context, index) {
                final block = item.content[index];
                logger.i('üì¶ Rendering block [$index] ‚Üí ${block.type}');
                return _renderBlock(context, block);
              },
            ),
          ),
          ClipRect(
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12,
                ),
                decoration: BoxDecoration(color: Colors.white.withAlpha(76)),
                child: Row(
                  children: [
                    ConstrainedBox(
                      constraints: const BoxConstraints(minWidth: 160),
                      child: ElevatedButton.icon(
                        onPressed:
                            onPrevious != null
                                ? () {
                                  logger.i(
                                    '‚¨ÖÔ∏è Previous tapped on ContentDetailScreen',
                                  );
                                  onPrevious!();
                                }
                                : null,
                        icon: const Icon(Icons.arrow_back),
                        label: const Text('Previous'),
                        style:
                            onPrevious != null
                                ? AppTheme.navigationButtonStyle
                                : AppTheme.disabledNavigationButtonStyle,
                      ),
                    ),
                    const Spacer(),
                    ConstrainedBox(
                      constraints: const BoxConstraints(minWidth: 160),
                      child: ElevatedButton(
                        onPressed:
                            onNext != null
                                ? () {
                                  logger.i(
                                    '‚û°Ô∏è Next tapped on ContentDetailScreen',
                                  );
                                  onNext!();
                                }
                                : null,
                        style:
                            onNext != null
                                ? AppTheme.navigationButtonStyle
                                : AppTheme.disabledNavigationButtonStyle,
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: const [
                            Text('Next'),
                            SizedBox(width: 8),
                            Icon(Icons.arrow_forward),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _renderBlock(BuildContext context, ContentBlock block) {
    switch (block.type) {
      case ContentBlockType.heading:
        return Text(
          block.text ?? '',
          style: AppTheme.scaledTextTheme.headlineMedium,
        );
      case ContentBlockType.text:
        return Text(
          block.text ?? '',
          style: AppTheme.scaledTextTheme.bodyLarge,
        );
      case ContentBlockType.code:
        return Container(
          padding: const EdgeInsets.all(12),
          color: Colors.black87,
          child: Text(
            block.text ?? '',
            style: const TextStyle(
              color: Colors.greenAccent,
              fontFamily: 'monospace',
            ),
          ),
        );
      case ContentBlockType.bulletList:
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children:
              block.bulletList!
                  .map(
                    (item) => Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(fontSize: 16)),
                        Expanded(
                          child: Text(
                            item,
                            style: AppTheme.scaledTextTheme.bodyLarge,
                          ),
                        ),
                      ],
                    ),
                  )
                  .toList(),
        );
      case ContentBlockType.image:
        return Image.asset(
          block.imagePath ?? 'assets/images/fallback_image.jpeg',
          fit: BoxFit.cover,
          errorBuilder: (_, __, ___) => const Placeholder(fallbackHeight: 150),
        );
      case ContentBlockType.divider:
        return const Divider(thickness: 2);
    }
  }
}










File: lib/screens/parts/part_item_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/navigation/detail_route.dart'; // <-- required for DetailRoute

class PartItemScreen extends StatelessWidget {
  final String zone;

  const PartItemScreen({super.key, required this.zone});

  @override
  Widget build(BuildContext context) {
    final List<PartItem> filteredParts = PartRepositoryIndex.getPartsForZone(
      zone.toLowerCase(),
    );

    final List<String> sequenceIds = filteredParts.map((p) => p.id).toList();

    logger.i('üü¶ Displaying PartItemScreen (Zone: $zone)');

    return Column(
      children: [
        CustomAppBarWidget(
          title: '$zone Parts',
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          onBack: () {
            logger.i('üîô AppBar back from PartItemScreen');
            context.go('/parts');
          },
        ),
        const SizedBox(height: 16),
        Text(
          'Choose a Part',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
        ),
        const SizedBox(height: 12),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              itemCount: filteredParts.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 4,
                crossAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final part = filteredParts[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: part.title,
                  onTap: () {
                    logger.i('üü• Tapped part: ${part.id}');
                    context.push(
                      '/parts/detail',
                      extra: {
                        'renderItems': buildRenderItems(ids: sequenceIds),
                        'currentIndex': index,
                        'branchIndex': 2,
                        'backDestination': '/parts/items',
                        'backExtra': {'zone': zone},
                        'transitionKey': 'part_${part.id}_$timestamp',
                        'detailRoute': DetailRoute.branch, // <-- ‚úÖ PATCHED
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/parts/part_detail_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

class PartDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const PartDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<PartDetailScreen> createState() => _PartDetailScreenState();
}

class _PartDetailScreenState extends State<PartDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.part) {
      logger.w('‚ö†Ô∏è Redirecting from non-part type: ${item.id} (${item.type})');
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final targetItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: targetItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.part) {
      return const Scaffold(body: SizedBox());
    }

    final partTitle = item.title;
    final zoneTitle =
        (widget.backExtra?['zone'] as String?)?.toTitleCase() ?? 'Part';

    logger.i('üß© PartDetailScreen: $partTitle');
    logger.i('üìÑ Content blocks: ${item.content.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, partTitle, zoneTitle),
    );
  }

  Widget _buildScaffold(RenderItem item, String partTitle, String zoneTitle) {
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/deck_parts_montage.webp',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: zoneTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                    },
                  );
                },
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: Text(
                  partTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on PartDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on PartDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/parts/part_zone_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/theme/app_theme.dart';

class PartZoneScreen extends StatelessWidget {
  const PartZoneScreen({super.key});

  final List<String> zones = const [
    'Sails',
    'Rigging',
    'Deck',
    'Interior',
    'Hull',
  ];

  final Map<String, Offset> zonePositions = const {
    'Deck': Offset(0.17, 0.57),
    'Hull': Offset(0.39, 0.69),
    'Rigging': Offset(0.6, 0.49),
    'Sails': Offset(0.32, 0.49),
    'Interior': Offset(0.7, 0.63),
  };

  final Map<String, String> zoneDescriptions = const {
    'Sails': 'Sails -- Wind-catching cloth',
    'Rigging': 'Rigging -- Cables & spars for the sails',
    'Deck': 'Deck -- Top surface of the boat',
    'Interior': 'Interior -- Cabin and below-deck area',
    'Hull': 'Hull -- Main body of the boat',
  };

  final double appBarOffset = 80.0;

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;

    logger.i('üü© Displaying PartZoneScreen with layout polish');

    return Stack(
      fit: StackFit.expand,
      children: [
        // ‚õµ Background
        Opacity(
          opacity: 0.8,
          child: Image.asset(
            'assets/images/boat_overview_tall.png',
            fit: BoxFit.cover,
          ),
        ),

        // üîµ AppBar
        const Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: CustomAppBarWidget(
            title: 'Parts',
            showBackButton: false,
            showSearchIcon: true,
            showSettingsIcon: true,
          ),
        ),

        // üß≠ Screen Instruction: "Choose a Zone" with background box
        Positioned(
          top: appBarOffset + 32,
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                'Choose a Zone',
                style: AppTheme.subheadingStyle.copyWith(
                  color: AppTheme.primaryBlue,
                ),
              ),
            ),
          ),
        ),

        // üßæ Zone Legend Box
        Positioned(
          top: appBarOffset + 120, // spacing under title
          left: 32,
          right: 32,
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.85),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment:
                  CrossAxisAlignment.center, // üëà changed from start to center
              children:
                  zones.map((zone) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2),
                      child: Text(
                        zoneDescriptions[zone]!,
                        textAlign:
                            TextAlign
                                .center, // üëà ensures multiline wraps stay centered
                        style: AppTheme.textTheme.bodyLarge?.copyWith(
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    );
                  }).toList(),
            ),
          ),
        ),

        // üìç Positioned Buttons
        ...zones.map((zone) {
          final offset = zonePositions[zone]!;
          final left = offset.dx * screenSize.width;
          final top = offset.dy * screenSize.height + appBarOffset;

          return Positioned(
            left: left,
            top: top,
            child: TextButton(
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 10,
                  vertical: 8,
                ),
                backgroundColor: AppTheme.groupButtonUnselected,
                foregroundColor: Colors.white,
                minimumSize: const Size(0, 40),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              onPressed: () {
                logger.i('üü¶ Tapped zone: $zone');
                final timestamp = DateTime.now().millisecondsSinceEpoch;
                context.push(
                  '/parts/items',
                  extra: {
                    'zone': zone,
                    'transitionKey':
                        'part_items_${zone.toLowerCase()}_$timestamp',
                  },
                );
              },

              child: Text(zone, style: const TextStyle(fontSize: 15)),
            ),
          );
        }),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_detail_screen.dart
import 'package:bcc5/navigation/detail_route.dart';
import 'package:bcc5/theme/slide_direction.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:animations/animations.dart';

import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/navigation_buttons.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/transition_manager.dart';

class LessonDetailScreen extends StatefulWidget {
  final List<RenderItem> renderItems;
  final int currentIndex;
  final int branchIndex;
  final String backDestination;
  final Map<String, dynamic>? backExtra;
  final DetailRoute detailRoute;
  final String transitionKey;

  const LessonDetailScreen({
    super.key,
    required this.renderItems,
    required this.currentIndex,
    required this.branchIndex,
    required this.backDestination,
    required this.backExtra,
    required this.detailRoute,
    required this.transitionKey,
  });

  @override
  State<LessonDetailScreen> createState() => _LessonDetailScreenState();
}

class _LessonDetailScreenState extends State<LessonDetailScreen> {
  late int currentIndex;

  @override
  void initState() {
    super.initState();
    currentIndex = widget.currentIndex;

    final item = widget.renderItems[currentIndex];
    if (item.type != RenderItemType.lesson) {
      logger.w(
        '‚ö†Ô∏è Redirecting from non-lesson type: ${item.id} (${item.type})',
      );
      WidgetsBinding.instance.addPostFrameCallback((_) {
        TransitionManager.goToDetailScreen(
          context: context,
          screenType: item.type,
          renderItems: widget.renderItems,
          currentIndex: currentIndex,
          branchIndex: widget.branchIndex,
          backDestination: widget.backDestination,
          backExtra: widget.backExtra,
          detailRoute: widget.detailRoute,
          direction: SlideDirection.none,
        );
      });
    }
  }

  void _navigateTo(int newIndex) {
    if (newIndex < 0 || newIndex >= widget.renderItems.length) {
      logger.w('‚ö†Ô∏è Navigation index out of bounds: $newIndex');
      return;
    }

    final nextItem = widget.renderItems[newIndex];
    TransitionManager.goToDetailScreen(
      context: context,
      screenType: nextItem.type,
      renderItems: widget.renderItems,
      currentIndex: newIndex,
      branchIndex: widget.branchIndex,
      backDestination: widget.backDestination,
      backExtra: widget.backExtra,
      detailRoute: widget.detailRoute,
      direction: SlideDirection.none,
    );
  }

  @override
  Widget build(BuildContext context) {
    final item = widget.renderItems[currentIndex];

    if (item.type != RenderItemType.lesson) {
      return const Scaffold(body: SizedBox());
    }

    final moduleTitle =
        (widget.backExtra?['module'] as String?)?.toTitleCase() ?? 'Lesson';
    final lessonTitle = item.title;

    logger.i('üìò LessonDetailScreen: $lessonTitle');
    logger.i('üß© Content blocks: ${item.content.length}');
    logger.i('üß† Flashcards: ${item.flashcards.length}');

    return PageTransitionSwitcher(
      duration: const Duration(milliseconds: 250),
      transitionBuilder: buildScaleFadeTransition,
      child: _buildScaffold(item, moduleTitle, lessonTitle),
    );
  }

  Widget _buildScaffold(
    RenderItem item,
    String moduleTitle,
    String lessonTitle,
  ) {
    return Scaffold(
      key: ValueKey(widget.transitionKey),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Opacity(
            opacity: 0.2,
            child: Image.asset(
              'assets/images/boat_overview_new.png',
              fit: BoxFit.cover,
            ),
          ),
          Column(
            children: [
              CustomAppBarWidget(
                title: moduleTitle,
                showBackButton: true,
                showSearchIcon: true,
                showSettingsIcon: true,
                onBack: () {
                  logger.i('üîô Back tapped ‚Üí ${widget.backDestination}');
                  context.go(
                    widget.backDestination,
                    extra: {
                      ...?widget.backExtra,
                      'transitionKey': UniqueKey().toString(),
                      'slideFrom': SlideDirection.left,
                    },
                  );
                },
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: Text(
                  lessonTitle,
                  style: AppTheme.scaledTextTheme.headlineMedium?.copyWith(
                    color: AppTheme.primaryBlue,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: ContentBlockRenderer(
                    key: ValueKey(item.id),
                    blocks: item.content,
                  ),
                ),
              ),
              NavigationButtons(
                isPreviousEnabled: currentIndex > 0,
                isNextEnabled: currentIndex < widget.renderItems.length - 1,
                onPrevious: () {
                  logger.i('‚¨ÖÔ∏è Previous tapped on LessonDetailScreen');
                  _navigateTo(currentIndex - 1);
                },
                onNext: () {
                  logger.i('‚û°Ô∏è Next tapped on LessonDetailScreen');
                  _navigateTo(currentIndex + 1);
                },
              ),
            ],
          ),
        ],
      ),
    );
  }
}










File: lib/screens/lessons/lesson_item_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/widgets/item_button.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart';
import 'package:bcc5/navigation/detail_route.dart'; // ‚úÖ for DetailRoute

class LessonItemScreen extends StatelessWidget {
  final String module;

  const LessonItemScreen({super.key, required this.module});

  @override
  Widget build(BuildContext context) {
    logger.i('üìò LessonItemScreen loaded for module: $module');
    final lessons = LessonRepositoryIndex.getLessonsForModule(module);
    final lessonIds = lessons.map((l) => l.id).toList();
    final renderItems = buildRenderItems(ids: lessonIds);

    return Column(
      children: [
        CustomAppBarWidget(
          title: module.toTitleCase(),
          showBackButton: true,
          showSearchIcon: true,
          showSettingsIcon: true,
          onBack: () {
            logger.i('üîô AppBar back from LessonItemScreen');
            context.go('/lessons');
          },
        ),
        const SizedBox(height: 16),
        Text(
          'Choose a Lesson',
          style: AppTheme.subheadingStyle.copyWith(color: AppTheme.primaryBlue),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 16),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: GridView.builder(
              itemCount: lessons.length,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                crossAxisSpacing: 4,
                mainAxisSpacing: 4,
                childAspectRatio: 2.8,
              ),
              itemBuilder: (context, index) {
                final lesson = lessons[index];
                final timestamp = DateTime.now().millisecondsSinceEpoch;

                return ItemButton(
                  label: lesson.title,
                  onTap: () {
                    logger.i('üìò Tapped lesson: ${lesson.id}');
                    context.push(
                      '/lessons/detail',
                      extra: {
                        'renderItems': renderItems,
                        'currentIndex': index,
                        'branchIndex': 1,
                        'detailRoute': DetailRoute.branch, // ‚úÖ new
                        'backDestination': '/lessons/items',
                        'backExtra': {'module': module, 'branchIndex': 1},
                        'transitionKey': 'lesson_${lesson.id}_$timestamp',
                      },
                    );
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }
}










File: lib/screens/lessons/lesson_module_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import 'package:bcc5/widgets/group_button.dart';
import 'package:bcc5/widgets/custom_app_bar_widget.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/utils/logger.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/utils/string_extensions.dart'; // ‚úÖ for toTitleCase

class LessonModuleScreen extends StatelessWidget {
  const LessonModuleScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final moduleNames = LessonRepositoryIndex.getModuleNames();
    logger.i('üü¶ Entered LessonModuleScreen');

    return Scaffold(
      appBar: const CustomAppBarWidget(
        title: 'Lessons',
        showBackButton: false,
        showSearchIcon: true,
        showSettingsIcon: true,
      ),
      body: Column(
        children: [
          const SizedBox(height: 16),
          Text(
            'Choose a Module',
            style: AppTheme.subheadingStyle.copyWith(
              color: AppTheme.primaryBlue,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.all(16),
              itemCount: moduleNames.length,
              separatorBuilder: (_, __) => const SizedBox(height: 12),
              itemBuilder: (context, index) {
                final moduleName = moduleNames[index];
                final label = moduleName.toTitleCase(); // ‚úÖ Title Case

                return GroupButton(
                  label: label,
                  onTap: () {
                    logger.i('üìò Tapped Module: $moduleName');
                    final timestamp = DateTime.now().millisecondsSinceEpoch;
                    context.push(
                      '/lessons/items',
                      extra: {
                        'module': moduleName,
                        'transitionKey': 'lesson_items_${index}_$timestamp',
                      },
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/main.dart
import 'package:flutter/material.dart';
import 'package:bcc5/bcc5_app.dart'; // Updated import

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const Bcc5App());
}










File: lib/theme/slide_direction.dart
enum SlideDirection { right, left, up, down, none }










File: lib/theme/app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryBlue = Color(0xFF163FE8);
  static const Color primaryRed = Color.fromARGB(255, 255, 0, 0);
  static const Color backgroundColor = Colors.white;
  static const Color darkBackground = Color(0xFF121212);

  static const Color infoColor = primaryBlue;
  static const Color errorColor = primaryRed;
  static const Color successColor = Colors.green;
  static const Color warningColor = Colors.orange;
  static const Color disabledGray = Colors.grey;

  static const double textScaleMultiplier = 1.5;

  static const TextStyle headingStyle = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle subheadingStyle = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle bodyTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.normal,
    color: Colors.black87,
  );

  static const TextStyle buttonTextStyle = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: Colors.white,
  );

  static const TextStyle captionStyle = TextStyle(
    fontSize: 14,
    color: Colors.grey,
  );

  static const TextTheme textTheme = TextTheme(
    headlineLarge: headingStyle,
    headlineMedium: subheadingStyle,
    bodyLarge: bodyTextStyle,
    labelLarge: buttonTextStyle,
    bodySmall: captionStyle,
  );

  static final TextTheme scaledTextTheme = TextTheme(
    headlineLarge: headingStyle.copyWith(
      fontSize: headingStyle.fontSize! * textScaleMultiplier,
    ),
    headlineMedium: subheadingStyle.copyWith(
      fontSize: subheadingStyle.fontSize! * textScaleMultiplier,
    ),
    bodyLarge: bodyTextStyle.copyWith(
      fontSize: bodyTextStyle.fontSize! * textScaleMultiplier,
    ),
    labelLarge: buttonTextStyle.copyWith(
      fontSize: buttonTextStyle.fontSize! * textScaleMultiplier,
    ),
    bodySmall: captionStyle.copyWith(
      fontSize: captionStyle.fontSize! * textScaleMultiplier,
    ),
  );

  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    scaffoldBackgroundColor: backgroundColor,
    colorScheme: ColorScheme.fromSeed(seedColor: primaryBlue),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      foregroundColor: Colors.white,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: primaryRed,
      unselectedItemColor: Colors.white70,
      selectedIconTheme: IconThemeData(size: 26),
      unselectedIconTheme: IconThemeData(size: 22),
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
      showUnselectedLabels: true,
    ),
    textTheme: textTheme,
  );

  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: darkBackground,
    colorScheme: ColorScheme.dark(primary: primaryBlue, secondary: primaryRed),
    appBarTheme: const AppBarTheme(
      backgroundColor: primaryBlue,
      centerTitle: true,
      elevation: 0,
      titleTextStyle: headingStyle,
      iconTheme: IconThemeData(color: Colors.white),
    ),
    bottomNavigationBarTheme: const BottomNavigationBarThemeData(
      backgroundColor: primaryBlue,
      selectedItemColor: Colors.white,
      unselectedItemColor: Colors.white70,
      selectedLabelStyle: buttonTextStyle,
      unselectedLabelStyle: buttonTextStyle,
    ),
    textTheme: textTheme,
  );

  static const double buttonCornerRadius = 12.0;
  static const double cardCornerRadius = 16.0;
  static const double screenPadding = 16.0;

  static const EdgeInsetsGeometry groupButtonPadding = EdgeInsets.symmetric(
    vertical: 14,
    horizontal: 24,
  );

  static const EdgeInsetsGeometry itemButtonPadding = EdgeInsets.symmetric(
    vertical: 10,
    horizontal: 12,
  );

  static const EdgeInsets cardPadding = EdgeInsets.all(12);

  static final ButtonStyle navigationButtonStyle = ElevatedButton.styleFrom(
    backgroundColor: primaryRed,
    foregroundColor: Colors.white,
    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
    textStyle: buttonTextStyle,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(buttonCornerRadius),
    ),
  );

  static final ButtonStyle disabledNavigationButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: Colors.grey.shade400,
        foregroundColor: Colors.white.withAlpha(153),
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        textStyle: buttonTextStyle,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static final ButtonStyle highlightedGroupButtonStyle =
      ElevatedButton.styleFrom(
        backgroundColor: primaryRed,
        padding: groupButtonPadding,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(buttonCornerRadius),
        ),
      );

  static Color get groupButtonSelected => primaryBlue.withAlpha(229);
  static Color get groupButtonUnselected => primaryBlue.withAlpha(153);

  static ButtonStyle get navigationButton => navigationButtonStyle;
  static ButtonStyle get disabledNavigationButton =>
      disabledNavigationButtonStyle;
}










File: lib/data/models/content_block.dart
enum ContentBlockType { heading, text, code, bulletList, image, divider }

class ContentBlock {
  final ContentBlockType type;
  final String? text;
  final List<String>? bulletList;
  final String? imagePath;

  const ContentBlock._({
    required this.type,
    this.text,
    this.bulletList,
    this.imagePath,
  });

  // Heading block
  factory ContentBlock.heading(String text) =>
      ContentBlock._(type: ContentBlockType.heading, text: text);

  // Text block
  factory ContentBlock.text(String text) =>
      ContentBlock._(type: ContentBlockType.text, text: text);

  // Code block
  factory ContentBlock.code(String codeText) =>
      ContentBlock._(type: ContentBlockType.code, text: codeText);

  // Bullet list block
  factory ContentBlock.bullets(List<String> bullets) =>
      ContentBlock._(type: ContentBlockType.bulletList, bulletList: bullets);

  // Image block
  factory ContentBlock.image(String imagePath) =>
      ContentBlock._(type: ContentBlockType.image, imagePath: imagePath);

  // Divider block
  factory ContentBlock.divider() =>
      ContentBlock._(type: ContentBlockType.divider);

  // Optional: utility for combining sides with divider
  static List<ContentBlock> dividerList() => [ContentBlock.divider()];

  // Optional convenience getter
  List<String>? get bullets => bulletList;
}










File: lib/data/models/tool_model.dart
// üìÑ lib/data/models/tool_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  const ToolItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });
}










File: lib/data/models/lesson_model.dart
// üìÑ lib/data/models/lesson_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class Lesson {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<String> keywords;
  final List<Flashcard> flashcards;
  final bool isPaid;

  const Lesson({
    required this.id,
    required this.title,
    required this.content,
    required this.keywords,
    required this.flashcards,
    required this.isPaid,
  });
}










File: lib/data/models/part_model.dart
// üü† part_model.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class PartItem {
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;
  final List<String> keywords;
  final bool isPaid;

  const PartItem({
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
    this.keywords = const [],
    this.isPaid = false,
  });
}

class PartZone {
  final String name; // e.g., "Hull", "Deck"
  final List<PartItem> items;

  const PartZone({required this.name, required this.items});
}










File: lib/data/models/path_model.dart
// üìÑ lib/data/models/path_model.dart

class PathItem {
  final String pathItemId; // e.g., "lesson_dock_1.00", "part_deck_3.00"

  const PathItem({required this.pathItemId});
}

class LearningPathChapter {
  final String id; // e.g., "path_competentCrew_1.00"
  final String title;
  final List<PathItem> items;

  const LearningPathChapter({
    required this.id,
    required this.title,
    required this.items,
  });
}










File: lib/data/models/flashcard_model.dart
// üìÑ lib/data/models/flashcard_model.dart

import 'package:bcc5/data/models/content_block.dart';

class Flashcard {
  final String id;
  final String title;
  final List<ContentBlock> sideA;
  final List<ContentBlock> sideB;
  final bool isPaid;
  final bool showAFirst;

  Flashcard({
    required this.id,
    required this.title,
    List<ContentBlock>? sideA,
    List<ContentBlock>? sideB,
    required this.isPaid,
    required this.showAFirst,
  }) : sideA = sideA ?? [],
       sideB = sideB ?? [];
}










File: lib/data/models/render_item.dart
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

enum RenderItemType { lesson, part, tool, flashcard }

class RenderItem {
  final RenderItemType type;
  final String id;
  final String title;
  final List<ContentBlock> content;
  final List<Flashcard> flashcards;

  RenderItem({
    required this.type,
    required this.id,
    required this.title,
    required this.content,
    required this.flashcards,
  });

  /// Whether this item has any usable content or flashcards
  bool get isResolved => content.isNotEmpty || flashcards.isNotEmpty;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RenderItem && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;
}










File: lib/widgets/item_button.dart
import 'package:bcc5/theme/app_theme.dart';
import 'package:flutter/material.dart';

class ItemButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final Color color;
  final double borderRadius;
  final EdgeInsetsGeometry padding;

  const ItemButton({
    super.key,
    required this.label,
    required this.onTap,
    this.color = AppTheme.primaryRed, // üü† Default to red (DetailButton style)
    this.borderRadius = 12.0, // üü† Default rounded rectangle
    this.padding = const EdgeInsets.symmetric(
      vertical: 12,
      horizontal: 8,
    ), // üü† Default compact padding
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap, // üü† Clean tap handler
      child: Container(
        padding: padding,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        alignment: Alignment.center,
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle.copyWith(color: Colors.white),
        ),
      ),
    );
  }
}










File: lib/widgets/content_block_renderer.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/theme/app_theme.dart';

class ContentBlockRenderer extends StatelessWidget {
  final List<ContentBlock> blocks;

  const ContentBlockRenderer({super.key, required this.blocks});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: 16), // add bottom spacing
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: blocks.map((block) => _renderBlock(context, block)).toList(),
      ),
    );
  }

  Widget _renderBlock(BuildContext context, ContentBlock block) {
    switch (block.type) {
      case ContentBlockType.heading:
        return Padding(
          padding: const EdgeInsets.only(top: 12, bottom: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.headlineMedium,
          ),
        );

      case ContentBlockType.text:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Text(
            block.text ?? '',
            style: AppTheme.scaledTextTheme.bodyLarge,
          ),
        );

      case ContentBlockType.code:
        return Container(
          margin: const EdgeInsets.symmetric(vertical: 4),
          padding: const EdgeInsets.all(8),
          color: Colors.grey.shade200,
          child: Text(
            block.text ?? '',
            style: const TextStyle(fontFamily: 'monospace'),
          ),
        );

      case ContentBlockType.bulletList:
        final bullets = block.bullets ?? [];
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children:
              bullets.map((b) {
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 2),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('‚Ä¢ ', style: TextStyle(fontSize: 16)),
                      Expanded(child: Text(b)),
                    ],
                  ),
                );
              }).toList(),
        );

      case ContentBlockType.image:
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Image.asset(
            block.imagePath ?? 'assets/images/fallback_image.jpeg',
            fit: BoxFit.cover,
          ),
        );

      case ContentBlockType.divider:
        return const Divider(thickness: 2);
    }
  }
}










File: lib/widgets/search_modal.dart
// üìÑ lib/widgets/search_modal.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/data/models/render_item.dart';
import 'package:bcc5/utils/render_item_helpers.dart';
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
// üö´ No need to import flashcards until keyword support is added

class SearchResult {
  final String id;
  final String title;
  final RenderItemType type;

  SearchResult({required this.id, required this.title, required this.type});
}

class SearchModal extends StatefulWidget {
  const SearchModal({super.key});

  @override
  State<SearchModal> createState() => _SearchModalState();
}

class _SearchModalState extends State<SearchModal> {
  final TextEditingController _controller = TextEditingController();
  late List<SearchResult> _allResults;
  List<SearchResult> _filteredResults = [];

  @override
  void initState() {
    super.initState();
    _allResults = _buildSearchIndex();
    _filteredResults = _allResults;
  }

  List<SearchResult> _buildSearchIndex() {
    final results = <SearchResult>[];

    for (final lesson in LessonRepositoryIndex.getAllLessons()) {
      for (final keyword in lesson.keywords) {
        results.add(
          SearchResult(
            id: lesson.id,
            title: keyword,
            type: RenderItemType.lesson,
          ),
        );
      }
    }

    for (final part in PartRepositoryIndex.getAllParts()) {
      for (final keyword in part.keywords) {
        results.add(
          SearchResult(id: part.id, title: keyword, type: RenderItemType.part),
        );
      }
    }

    // üöß Flashcard keywords not yet available in model
    // Future-proof logic:
    // for (final flashcard in FlashcardRepository.getAllFlashcards()) {
    //   for (final keyword in flashcard.keywords ?? []) {
    //     results.add(SearchResult(
    //       id: flashcard.id,
    //       title: keyword,
    //       type: RenderItemType.flashcard,
    //     ));
    //   }
    // }

    return results;
  }

  void _onSearchChanged(String query) {
    setState(() {
      _filteredResults =
          _allResults
              .where((r) => r.title.toLowerCase().contains(query.toLowerCase()))
              .toList();
    });
  }

  void _navigateToResult(SearchResult result) {
    final renderItems = buildRenderItems(ids: [result.id]);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final extra = {
      'renderItems': renderItems,
      'currentIndex': 0,
      'branchIndex': 0,
      'backDestination': '/',
      'transitionKey': 'search_${result.id}_$timestamp',
    };

    switch (result.type) {
      case RenderItemType.lesson:
        context.go('/lessons/detail', extra: extra);
        break;
      case RenderItemType.part:
        context.go('/parts/detail', extra: extra);
        break;
      case RenderItemType.tool:
        context.go('/tools/detail', extra: extra);
        break;
      case RenderItemType.flashcard:
        context.go('/flashcards/detail', extra: extra);
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      backgroundColor: Colors.white,
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _controller,
              onChanged: _onSearchChanged,
              decoration: const InputDecoration(
                labelText: 'Search...',
                border: OutlineInputBorder(),
              ),
            ),
          ),
          Expanded(
            child: ListView.separated(
              itemCount: _filteredResults.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (context, index) {
                final result = _filteredResults[index];
                return ListTile(
                  title: Text(result.title),
                  subtitle: Text(result.type.name),
                  onTap: () => _navigateToResult(result),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}










File: lib/widgets/disabled_item_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class DisabledItemButton extends StatelessWidget {
  final String label;

  const DisabledItemButton({super.key, required this.label});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: AppTheme.itemButtonPadding,
      decoration: BoxDecoration(
        color: Colors.grey.shade400,
        borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
      ),
      alignment: Alignment.center,
      child: Text(
        label,
        textAlign: TextAlign.center,
        style: AppTheme.buttonTextStyle.copyWith(
          color: Colors.white.withAlpha(153), // ‚úÖ No error
        ),
      ),
    );
  }
}










File: lib/widgets/custom_app_bar_widget.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:bcc5/theme/app_theme.dart';
import 'package:bcc5/widgets/search_modal.dart'; // üîç Search Modal
import 'package:bcc5/widgets/settings_modal.dart'; // ‚öôÔ∏è Settings Modal

class CustomAppBarWidget extends StatelessWidget
    implements PreferredSizeWidget {
  final String title;
  final bool showBackButton;
  final bool showSearchIcon;
  final bool showSettingsIcon;
  final VoidCallback? onBack;
  final VoidCallback? onSearchTap;
  final VoidCallback? onSettingsTap;

  const CustomAppBarWidget({
    super.key,
    required this.title,
    this.showBackButton = false,
    this.showSearchIcon = true,
    this.showSettingsIcon = true,
    this.onBack,
    this.onSearchTap,
    this.onSettingsTap,
  });

  @override
  Widget build(BuildContext context) {
    return AppBar(
      backgroundColor: AppTheme.primaryBlue,
      centerTitle: true,
      elevation: 0,
      leading:
          showBackButton
              ? IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed:
                    onBack ??
                    () {
                      if (Navigator.of(context).canPop()) {
                        Navigator.of(context).pop();
                      } else {
                        context.go('/');
                      }
                    },
              )
              : const SizedBox(width: kToolbarHeight),
      title: Text(title, style: AppTheme.headingStyle),
      actions: [
        if (showSearchIcon)
          IconButton(
            icon: const Icon(Icons.search),
            onPressed:
                onSearchTap ??
                () {
                  showDialog(
                    context: context,
                    builder: (_) => const SearchModal(),
                  );
                },
          ),
        if (showSettingsIcon)
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed:
                onSettingsTap ??
                () {
                  showSettingsModal(context);
                },
          ),
      ],
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}










File: lib/widgets/navigation_buttons.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class NavigationButtons extends StatefulWidget {
  final bool isPreviousEnabled;
  final bool isNextEnabled;
  final VoidCallback onPrevious;
  final VoidCallback onNext;

  const NavigationButtons({
    super.key,
    required this.isPreviousEnabled,
    required this.isNextEnabled,
    required this.onPrevious,
    required this.onNext,
  });

  @override
  State<NavigationButtons> createState() => _NavigationButtonsState();
}

class _NavigationButtonsState extends State<NavigationButtons> {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 6, sigmaY: 6),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.0),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                SizedBox(
                  height: 48,
                  child: ElevatedButton.icon(
                    onPressed:
                        widget.isPreviousEnabled ? widget.onPrevious : null,
                    icon: const Icon(Icons.arrow_back),
                    label: const Text('Previous'),
                    style: AppTheme.navigationButton,
                  ),
                ),
                SizedBox(
                  height: 48,
                  child: ElevatedButton(
                    onPressed: widget.isNextEnabled ? widget.onNext : null,
                    style: AppTheme.navigationButton,
                    child: Row(
                      children: const [
                        Text('Next'),
                        SizedBox(width: 8),
                        Icon(Icons.arrow_forward),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}










File: lib/widgets/group_button.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

class GroupButton extends StatelessWidget {
  final String label;
  final VoidCallback onTap;
  final bool isSelected;

  const GroupButton({
    super.key,
    required this.label,
    required this.onTap,
    this.isSelected = false,
  });

  @override
  Widget build(BuildContext context) {
    final backgroundColor =
        isSelected
            ? AppTheme.groupButtonSelected
            : AppTheme.groupButtonUnselected;

    return FractionallySizedBox(
      widthFactor: 0.6,
      child: ElevatedButton(
        onPressed: onTap,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          padding: AppTheme.groupButtonPadding,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppTheme.buttonCornerRadius),
          ),
        ),
        child: Text(
          label,
          textAlign: TextAlign.center,
          style: AppTheme.buttonTextStyle,
        ),
      ),
    );
  }
}










File: lib/widgets/settings_modal.dart
import 'package:flutter/material.dart';
import 'package:bcc5/theme/app_theme.dart';

void showSettingsModal(BuildContext context) {
  showDialog(
    context: context,
    barrierDismissible: true,
    builder: (BuildContext context) {
      return Dialog(
        insetPadding: const EdgeInsets.fromLTRB(16, 80, 16, 80),
        backgroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Text('Settings', style: AppTheme.headingStyle),
              const SizedBox(height: 12),
              const Divider(),

              // üìú Scrollable List of Settings
              Expanded(
                child: ListView(
                  children: [
                    _settingSwitch('Dark Mode', false),
                    _settingSwitch('Show Tour Wizard', true),
                    _settingSwitch('Enable Paid Content', false),
                    _settingButton(context, 'Legal & Privacy Docs'),
                    _settingDropdown('Units', ['Meters', 'Feet'], 'Feet'),
                    _settingDropdown('Wave Height', ['Feet', 'Meters'], 'Feet'),
                    _settingDropdown('Temperature', [
                      'Fahrenheit',
                      'Celsius',
                    ], 'Fahrenheit'),

                    // Additional dummy settings
                    _settingSwitch('Enable Sound Effects', true),
                    _settingSwitch('Auto-Download Lessons', false),
                    _settingSwitch('Offline Mode', false),
                    _settingSwitch('Sync Across Devices', true),
                    _settingSwitch('Show Hints During Navigation', true),
                    _settingDropdown('Language', [
                      'English',
                      'Spanish',
                      'French',
                    ], 'English'),
                    _settingSwitch('Enable Animations', true),
                    _settingSwitch('Beta Features', false),
                  ],
                ),
              ),

              const Divider(height: 24),
              ElevatedButton(
                style: AppTheme.navigationButton,
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Close Settings'),
              ),
            ],
          ),
        ),
      );
    },
  );
}

// üîò Switch Row
Widget _settingSwitch(String label, bool value) {
  return SwitchListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    value: value,
    onChanged: (_) {},
    contentPadding: const EdgeInsets.symmetric(horizontal: 0),
  );
}

// üìÇ Dropdown Selector
Widget _settingDropdown(String label, List<String> options, String selected) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 4),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: AppTheme.textTheme.bodyLarge),
        DropdownButton<String>(
          value: selected,
          items:
              options
                  .map((o) => DropdownMenuItem(value: o, child: Text(o)))
                  .toList(),
          onChanged: (_) {},
        ),
      ],
    ),
  );
}

// üìÑ Legal Docs Button
Widget _settingButton(BuildContext context, String label) {
  return ListTile(
    title: Text(label, style: AppTheme.textTheme.bodyLarge),
    trailing: const Icon(Icons.chevron_right),
    onTap: () {
      showDialog(
        context: context,
        builder:
            (_) => AlertDialog(
              title: const Text('Legal & Privacy Documents'),
              content: const Text('This would display legal info...'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Close'),
                ),
              ],
            ),
      );
    },
  );
}










File: lib/widgets/flip_card_widget.dart
import 'package:flutter/material.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/widgets/content_block_renderer.dart';

class FlipCardWidget extends StatelessWidget {
  final List<ContentBlock> front;
  final List<ContentBlock> back;
  final bool showFront;
  final Animation<double> animation; // Required for flip, even if unused here

  const FlipCardWidget({
    super.key,
    required this.front,
    required this.back,
    required this.showFront,
    required this.animation,
  });

  @override
  Widget build(BuildContext context) {
    final visibleContent = showFront ? front : back;

    return Semantics(
      label: showFront ? 'Flashcard front' : 'Flashcard back',
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16),
        child: SingleChildScrollView(
          child: DefaultTextStyle.merge(
            style: const TextStyle(fontSize: 19),
            child: ContentBlockRenderer(blocks: visibleContent),
          ),
        ),
      ),
    );
  }
}
