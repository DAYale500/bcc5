









File: lib/data/repositories/tools/tool_procedures_repository.dart
// ðŸ“„ lib/data/repositories/tools/tool_procedures_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolProceduresRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_procedures_1.00',
      title: 'Man Overboard Recovery',
      content: [
        ContentBlock.text('Steps to follow immediately:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Shout "Man Overboard"\n2. Assign spotter\n3. Press MOB button\n4. Retrieve safely',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_procedures_1.00',
          title: 'Man Overboard â€“ First Step',
          sideA: [
            ContentBlock.text(
              'Whatâ€™s the first step when someone goes overboard?',
            ),
          ],
          sideB: [
            ContentBlock.text('Shout "Man Overboard" and assign a spotter.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_procedures_1.01',
          title: 'Recovery Tools',
          sideA: [ContentBlock.text('Recovery tools to use?')],
          sideB: [ContentBlock.text('LifeSling or ladder.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_procedures_2.00',
      title: 'Engine Failure Response',
      content: [
        ContentBlock.text('Troubleshoot your engine:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Shift to neutral\n2. Check kill switch\n3. Restart once\n4. Anchor or radio',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_procedures_2.00',
          title: 'Engine Failure Checklist',
          sideA: [ContentBlock.text('What to check first in engine failure?')],
          sideB: [ContentBlock.text('Neutral, kill switch, fuel, battery.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_repository_index.dart
// ðŸ“„ lib/data/repositories/tools/tool_repository_index.dart

import 'package:bcc5/data/models/tool_model.dart';

import 'tool_procedures_repository.dart';
import 'tool_references_repository.dart';
// import 'tool_checklists_repository.dart';
// import 'tool_ditchbag_repository.dart';
// import 'tool_grabbag_repository.dart';
// import 'tool_thumbrules_repository.dart';

class ToolRepositoryIndex {
  static final Map<String, List<ToolItem>> _toolbags = {
    'procedures': ToolProceduresRepository.toolItems,
    'references': ToolReferencesRepository.toolItems,
    // 'checklists': ToolChecklistsRepository.toolItems,
    // 'grabbag': ToolGrabbagRepository.toolItems,
    // 'ditchbag': ToolDitchbagRepository.toolItems,
    // 'thumbrules': ToolThumbrulesRepository.toolItems,
  };

  static List<ToolItem> getToolsForBag(String toolbag) =>
      _toolbags[toolbag] ?? [];

  static ToolItem? getToolById(String id) {
    for (final items in _toolbags.values) {
      for (final item in items) {
        if (item.id == id) return item;
      }
    }
    return null;
  }

  static List<String> getToolbagNames() => _toolbags.keys.toList();

  static void assertAllToolIdsValid() {
    _toolbags.forEach((bag, items) {
      for (final item in items) {
        assert(
          item.id.startsWith('tool_${bag}_'),
          'Invalid ID in $bag: ${item.id}',
        );
      }
    });
  }
}










File: lib/data/repositories/tools/tool_thumbrules_repository.dart
import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';

class ToolThumbrulesRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_thumbrules_1.00',
      title: 'Rule of 12ths (Tide Estimation)',
      content: [
        ContentBlock.text('Estimate tidal rise/fall hourly:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Tide moves:\n'
          '- 1/12 in 1st hour\n'
          '- 2/12 in 2nd\n'
          '- 3/12 in 3rd (then mirrors down)\n'
          'Use for anchoring & under-keel clearance.',
        ),
        // Optionally add flashcards later
      ],
      flashcards: [],
    ),
    ToolItem(
      id: 'tool_thumbrules_2.00',
      title: '6-Minute Rule (Speed/Distance)',
      content: [
        ContentBlock.text('Speed (knots) Ã· 10 = Distance in 6 minutes (NM).'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Example: 6 knots Ã· 10 = 0.6 NM traveled in 6 minutes.',
        ),
      ],
      flashcards: [],
    ),
  ];

  static void assertToolIdsMatchPrefix() {
    for (final item in toolItems) {
      assert(item.id.startsWith('tool_thumbrules_'), 'Invalid ID: ${item.id}');
    }
  }
}










File: lib/data/repositories/tools/tool_calculators_repository.dart
// ðŸ“„ lib/data/repositories/tools/tool_calculators_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolCalculatorsRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_calculators_1.00',
      title: 'Hull Speed Calculator',
      content: [
        ContentBlock.text(
          'Use this formula to calculate theoretical hull speed:',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Hull Speed (knots) = 1.34 Ã— âˆšLWL (ft)\n\nExample: 25ft LWL â†’ 1.34 Ã— âˆš25 = 6.7 knots',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_calculators_1.00',
          title: 'Hull Speed Formula',
          sideA: [ContentBlock.text('How do you calculate hull speed?')],
          sideB: [ContentBlock.text('Hull Speed = 1.34 Ã— âˆšLWL')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_calculators_2.00',
      title: 'Fuel Consumption Estimator',
      content: [
        ContentBlock.text('Estimate range based on engine fuel burn rate:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Range (nm) = Fuel Amount (gal) Ã· Burn Rate (gal/hr) Ã— Speed (knots)',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_calculators_2.00',
          title: 'Fuel Range Formula',
          sideA: [
            ContentBlock.text('How to estimate cruising range from fuel?'),
          ],
          sideB: [ContentBlock.text('Range = Fuel Ã· Burn Rate Ã— Speed')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_checklists_repository.dart
// ðŸ“„ lib/data/repositories/tools/tool_checklists_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolChecklistsRepository {
  static final toolItems = <ToolItem>[
    ToolItem(
      id: 'tool_checklists_1.00',
      title: 'Pre-Departure Checklist',
      content: [
        ContentBlock.text('Ensure your boat is ready before leaving the dock.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Check weather\n2. Fuel & water\n3. Safety gear\n4. Float plan',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_checklists_1.00',
          title: 'Pre-Departure Essentials',
          sideA: [ContentBlock.text('What do you check before departure?')],
          sideB: [
            ContentBlock.text(
              'Weather, fuel, safety gear, float plan, comms, and crew briefing.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_checklists_2.00',
      title: 'Arrival Checklist',
      content: [
        ContentBlock.text('Wrap things up efficiently at the end of a sail.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Secure boat\n2. Log trip\n3. Stow gear\n4. Rinse & tidy',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_checklists_2.00',
          title: 'Arrival Tasks',
          sideA: [ContentBlock.text('What are key arrival checklist items?')],
          sideB: [
            ContentBlock.text(
              'Secure lines, log trip, rinse gear, stow sails.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_grabbag_repository.dart
import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolGrabbagRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_grabbag_1.00',
      title: 'Headlamp Basics',
      content: [
        ContentBlock.text(
          'Use a red-light headlamp at night to preserve night vision.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Check battery levels before departure.'),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_grabbag_1.00',
          title: 'Night Vision Tip',
          sideA: [
            ContentBlock.text('What kind of headlamp preserves night vision?'),
          ],
          sideB: [ContentBlock.text('A red-light headlamp.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_grabbag_2.00',
      title: 'Backup Navigation Tools',
      content: [
        ContentBlock.text('Always keep paper charts and a handheld compass.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Battery-powered GPS can fail; analog tools are essential.',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_grabbag_2.00',
          title: 'Analog Navigation',
          sideA: [
            ContentBlock.text(
              'What are two essential analog nav tools to carry?',
            ),
          ],
          sideB: [ContentBlock.text('Paper charts and a handheld compass.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_ditchbag_repository.dart
// ðŸ“„ lib/data/repositories/tools/tool_ditchbag_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolDitchbagRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_ditchbag_1.00',
      title: 'Ditch Bag Essentials',
      content: [
        ContentBlock.text('Critical items to include in your ditch bag:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          '1. Waterproof VHF radio\n2. EPIRB/PLB\n3. Flares\n4. Water & rations\n5. First aid kit',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_ditchbag_1.00',
          title: 'Ditch Bag Contents',
          sideA: [
            ContentBlock.text('Name 3 essential items for your ditch bag.'),
          ],
          sideB: [
            ContentBlock.text('VHF, flares, EPIRB/PLB, food/water, first aid.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/tools/tool_references_repository.dart
// ðŸ“„ lib/data/repositories/tools/tool_references_repository.dart

import 'package:bcc5/data/models/tool_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class ToolReferencesRepository {
  static final List<ToolItem> toolItems = [
    ToolItem(
      id: 'tool_references_1.00',
      title: 'Light and Sound Signals',
      content: [
        ContentBlock.text('Reference for navigation lights and sound signals:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'â€¢ One short blast = Port turn\n'
          'â€¢ Two = Starboard\n'
          'â€¢ Five = Danger/Confusion',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_references_1.00',
          title: 'One Short Blast',
          sideA: [ContentBlock.text('What does one short blast mean?')],
          sideB: [ContentBlock.text('Turn to port.')],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_references_1.01',
          title: 'Five Short Blasts',
          sideA: [
            ContentBlock.text('What is the meaning of five short blasts?'),
          ],
          sideB: [ContentBlock.text('Danger or confusion.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    ToolItem(
      id: 'tool_references_2.00',
      title: 'Day Shapes and Flags',
      content: [
        ContentBlock.text('Common day shapes used on vessels:'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'â€¢ Ball-Diamond-Ball = Restricted\n'
          'â€¢ Single Ball = Anchored\n'
          'â€¢ Cone (down) = Motor Sailing',
        ),
      ],
      flashcards: [
        Flashcard(
          id: 'flashcard_tool_references_2.00',
          title: 'Ball-Diamond-Ball',
          sideA: [ContentBlock.text('What does Ball-Diamond-Ball indicate?')],
          sideB: [ContentBlock.text('Restricted in ability to maneuver.')],
          isPaid: false,
          showAFirst: true,
        ),
        Flashcard(
          id: 'flashcard_tool_references_2.01',
          title: 'Anchored Day Shape',
          sideA: [ContentBlock.text('What day shape is used for anchoring?')],
          sideB: [ContentBlock.text('Single black ball.')],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/flashcards/flashcard_repository.dart.bak
// ðŸ“„ lib/data/repositories/flashcards/flashcard_repository.dart

import 'package:bcc5/data/models/flashcard_model.dart';
import 'package:bcc5/data/models/content_block.dart';

List<FlashcardItem> getFlashcardsForCategory(String category) {
  return List.generate(10, (i) {
    return FlashcardItem(
      id: 'flashcard_${category}_$i',
      title: 'Flashcard ${i + 1} - $category',
      content: [
        ContentBlock.text('This is flashcard ${i + 1} for $category.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Here is more helpful info.'),
      ],
    );
  });
}










File: lib/data/repositories/flashcards/flashcard_category_repository.dart
import 'package:bcc5/data/repositories/lessons/lesson_repository_index.dart';
import 'package:bcc5/data/repositories/parts/part_repository_index.dart';
import 'package:bcc5/data/repositories/tools/tool_repository_index.dart';

class FlashcardCategoryRepository {
  static List<String> getLessonCategories() =>
      LessonRepositoryIndex.getModuleNames();

  static List<String> getPartCategories() =>
      allPartRepositories.keys.map((key) => key.toLowerCase()).toList();

  static List<String> getToolCategories() =>
      ToolRepositoryIndex.getToolbagNames();

  static List<String> getAllCategories() => [
    ...getLessonCategories(),
    ...getPartCategories(),
    ...getToolCategories(),
    'all',
    'random',
  ];
}










File: lib/data/repositories/paths/path_repository_index.dart
import 'package:bcc5/data/models/path_model.dart';
import 'package:bcc5/data/repositories/paths/competent_crew_repository.dart';
import 'package:bcc5/utils/logger.dart';

class PathRepositoryIndex {
  static final Map<String, List<LearningPathChapter>> _pathMap = {
    'competent crew': CompetentCrewRepository.getChapters(),
    // more paths...
  };

  static List<LearningPathChapter> getChaptersForPath(String pathName) =>
      _pathMap[pathName.toLowerCase()] ?? [];

  static List<String> getChapterTitles(String pathName) =>
      getChaptersForPath(pathName.toLowerCase()).map((c) => c.title).toList();

  static LearningPathChapter? getChapterById(
    String pathName,
    String chapterId,
  ) {
    try {
      return getChaptersForPath(
        pathName.toLowerCase(),
      ).firstWhere((chapter) => chapter.id == chapterId);
    } catch (_) {
      return null;
    }
  }

  static List<String> getPathNames() => _pathMap.keys.toList();

  static List<PathItem> getAllPathItems(String pathName) =>
      getChaptersForPath(pathName).expand((chapter) => chapter.items).toList();

  static void logAvailablePathKeys() {
    logger.i('ðŸ§© Available path keys: ${_pathMap.keys}');
  }
}










File: lib/data/repositories/paths/competent_crew_repository.dart
// ðŸ“„ lib/data/repositories/learning_paths/competent_crew_repository.dart

import 'package:bcc5/data/models/path_model.dart';

class CompetentCrewRepository {
  static final List<LearningPathChapter> _chapters = [
    LearningPathChapter(
      id: 'path_competentCrew_1.00',
      title: '1: Prepare in Advance',
      items: [
        PathItem(pathItemId: 'part_deck_2.00'),
        PathItem(pathItemId: 'lesson_dock_1.00'),
        PathItem(pathItemId: 'lesson_dock_3.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_2.00',
      title: '2: Arrive at the Marina',
      items: [
        PathItem(pathItemId: 'part_deck_3.00'),
        PathItem(pathItemId: 'lesson_dock_4.00'),
        PathItem(pathItemId: 'lesson_dock_5.00'),
        PathItem(pathItemId: 'lesson_dock_6.00'),
        PathItem(pathItemId: 'lesson_dock_7.00'),
        PathItem(pathItemId: 'lesson_dock_8.00'),
        PathItem(pathItemId: 'lesson_dock_9.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_3.00'),
        PathItem(pathItemId: 'flashcard_lesson_dock_4.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_3.00',
      title: '3: Get Settled Onboard',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_4.00',
      title: '4: Getting Underway',
      items: [
        PathItem(pathItemId: 'lesson_navi_1.00'),
        PathItem(pathItemId: 'lesson_navi_2.00'),
        PathItem(pathItemId: 'lesson_navi_3.00'),
        PathItem(pathItemId: 'lesson_navi_4.00'),
        PathItem(pathItemId: 'lesson_navi_5.00'),
        PathItem(pathItemId: 'lesson_navi_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_navi_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_navi_2.00'),
        PathItem(pathItemId: 'lesson_safe_1.00'),
        PathItem(pathItemId: 'lesson_safe_2.00'),
        PathItem(pathItemId: 'lesson_safe_3.00'),
        PathItem(pathItemId: 'lesson_safe_4.00'),
        PathItem(pathItemId: 'lesson_safe_5.00'),
        PathItem(pathItemId: 'lesson_safe_6.00'),
        PathItem(pathItemId: 'lesson_safe_7.00'),
        PathItem(pathItemId: 'flashcard_lesson_safe_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_safe_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_5.00',
      title: '5: Allhands Responsibilities',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
    LearningPathChapter(
      id: 'path_competentCrew_6.00',
      title: '6: Sailing at Last',
      items: [
        PathItem(pathItemId: 'lesson_emer_1.00'),
        PathItem(pathItemId: 'lesson_emer_2.00'),
        PathItem(pathItemId: 'lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_emer_4.00'),
        PathItem(pathItemId: 'lesson_emer_5.00'),
        PathItem(pathItemId: 'lesson_emer_6.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_2.00'),
        PathItem(pathItemId: 'flashcard_lesson_emer_3.00'),
        PathItem(pathItemId: 'lesson_knot_1.00'),
        PathItem(pathItemId: 'lesson_knot_2.00'),
        PathItem(pathItemId: 'lesson_knot_3.00'),
        PathItem(pathItemId: 'lesson_knot_4.00'),
        PathItem(pathItemId: 'lesson_knot_5.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_1.00'),
        PathItem(pathItemId: 'flashcard_lesson_knot_2.00'),
      ],
    ),
  ];

  static List<LearningPathChapter> getChapters() => _chapters;
}










File: lib/data/repositories/parts/part_deck_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

final List<PartItem> deckParts = [
  PartItem(
    id: 'part_deck_1.00',
    title: 'Deck Cleats',
    keywords: ['cleat', 'tie', 'dock'],
    isPaid: false,
    content: [
      ContentBlock.text('Deck cleats are used for securing lines on the boat.'),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text(
        'They are usually mounted on the deck near mooring points.',
      ),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_deck_1.00',
        title: 'FC: Cleat Use',
        sideA: [ContentBlock.text('What is the purpose of a deck cleat?')],
        sideB: [
          ContentBlock.text('To secure lines like dock lines or fenders.'),
        ],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_deck_2.00',
    title: 'Winches',
    keywords: ['winch', 'line handling', 'tension'],
    isPaid: false,
    content: [
      ContentBlock.text(
        'Winches provide mechanical advantage for tightening lines.',
      ),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('Used for trimming sails and controlling tension.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_deck_2.00',
        title: 'FC: Winch Function',
        sideA: [ContentBlock.text('Why are winches important on a sailboat?')],
        sideB: [
          ContentBlock.text('They help manage line tension when sailing.'),
        ],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_deck_3.00',
    title: 'Lifelines',
    keywords: ['safety', 'fence', 'rail'],
    isPaid: false,
    content: [
      ContentBlock.text('Lifelines help prevent crew from falling overboard.'),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('They run along the edges of the deck for safety.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_deck_3.00',
        title: 'FC: Lifeline Role',
        sideA: [ContentBlock.text('What is the function of lifelines?')],
        sideB: [ContentBlock.text('To provide a safety barrier on deck.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_deck_4.00',
    title: 'Stanchions',
    keywords: ['post', 'lifeline support'],
    isPaid: false,
    content: [
      ContentBlock.text('Stanchions are vertical posts supporting lifelines.'),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('They are mounted securely along the deck perimeter.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_deck_4.00',
        title: 'FC: Stanchion Function',
        sideA: [ContentBlock.text('What are stanchions used for?')],
        sideB: [ContentBlock.text('To support and anchor lifelines.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_deck_5.00',
    title: 'Deck Hatches',
    keywords: ['hatch', 'ventilation'],
    isPaid: false,
    content: [
      ContentBlock.text(
        'Deck hatches provide access and ventilation below deck.',
      ),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text(
        'They often include seals and locks for watertightness.',
      ),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_deck_5.00',
        title: 'FC: Hatch Use',
        sideA: [ContentBlock.text('Why are deck hatches important?')],
        sideB: [ContentBlock.text('They provide light, air, and access.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
];










File: lib/data/repositories/parts/part_sails_repository.dart
// import 'package:bcc5/data/models/part_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// final List<PartItem> sailsParts = [
//   PartItem(
//     id: 'part_sails_1.00',
//     title: 'Mainsail',
//     keywords: ['main', 'power'],
//     content: [
//       ContentBlock.text('The mainsail is the primary sail on most sailboats.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text(
//         'It provides power when sailing upwind or across the wind.',
//       ),
//     ],
//   ),
//   PartItem(
//     id: 'part_sails_2.00',
//     title: 'Jib',
//     keywords: ['headsail', 'front'],
//     content: [
//       ContentBlock.text('The jib is a headsail located in front of the mast.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It works together with the mainsail for efficiency.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_sails_3.00',
//     title: 'Spinnaker',
//     keywords: ['downwind', 'balloon'],
//     content: [
//       ContentBlock.text(
//         'The spinnaker is a large sail used for downwind sailing.',
//       ),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It is lightweight and shaped like a parachute.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_sails_4.00',
//     title: 'Boom Vang',
//     keywords: ['control', 'boom'],
//     content: [
//       ContentBlock.text('The boom vang controls downward force on the boom.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It helps shape the mainsail when sailing downwind.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_sails_5.00',
//     title: 'Reefing Lines',
//     keywords: ['reduce sail', 'safety'],
//     content: [
//       ContentBlock.text(
//         'Reefing lines are used to reduce sail area in strong wind.',
//       ),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('They allow safe sailing by minimizing overpower.'),
//     ],
//   ),
// ];










File: lib/data/repositories/parts/part_hull_repository.dart
import 'package:bcc5/data/models/part_model.dart';
import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

final List<PartItem> hullParts = [
  PartItem(
    id: 'part_hull_1.00',
    title: 'Keel',
    keywords: ['stability', 'ballast'],
    isPaid: false,
    content: [
      ContentBlock.text(
        'The keel provides stability and prevents sideways drift.',
      ),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('It also adds weight low in the hull for balance.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_hull_1.00',
        title: 'FC: Keel Function',
        sideA: [ContentBlock.text('What does the keel do?')],
        sideB: [ContentBlock.text('It adds stability and reduces leeway.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_hull_2.00',
    title: 'Rudder',
    keywords: ['steering', 'control'],
    isPaid: false,
    content: [
      ContentBlock.text('The rudder is used to steer the boat.'),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('It is controlled by the wheel or tiller.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_hull_2.00',
        title: 'FC: Rudder Role',
        sideA: [ContentBlock.text('What is the rudder for?')],
        sideB: [ContentBlock.text('To steer the boat.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_hull_3.00',
    title: 'Hull Skin',
    keywords: ['structure', 'shell'],
    isPaid: false,
    content: [
      ContentBlock.text('The hull skin is the outer structure of the boat.'),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('It protects against water and provides shape.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_hull_3.00',
        title: 'FC: Hull Skin',
        sideA: [ContentBlock.text('What is the hull skin?')],
        sideB: [ContentBlock.text('The watertight shell of the boat.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_hull_4.00',
    title: 'Through-Hulls',
    keywords: ['plumbing', 'drainage'],
    isPaid: false,
    content: [
      ContentBlock.text(
        'Through-hulls allow water or waste to pass in/out of the boat.',
      ),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text('They must be sealed properly to prevent leaks.'),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_hull_4.00',
        title: 'FC: Through-Hulls',
        sideA: [ContentBlock.text('What are through-hulls used for?')],
        sideB: [ContentBlock.text('For plumbing in and out of the hull.')],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
  PartItem(
    id: 'part_hull_5.00',
    title: 'Bilge',
    keywords: ['drain', 'lowest point'],
    isPaid: false,
    content: [
      ContentBlock.text(
        'The bilge is the lowest interior space where water collects.',
      ),
      ContentBlock.image('assets/images/fallback_image.jpeg'),
      ContentBlock.text(
        'Pumps remove water from this area to keep the boat dry.',
      ),
    ],
    flashcards: [
      Flashcard(
        id: 'flashcard_part_hull_5.00',
        title: 'FC: Bilge Purpose',
        sideA: [ContentBlock.text('What is the bilge?')],
        sideB: [
          ContentBlock.text('The lowest part of the boat that collects water.'),
        ],
        isPaid: false,
        showAFirst: true,
      ),
    ],
  ),
];










File: lib/data/repositories/parts/part_repository_index.dart
import 'package:bcc5/data/models/part_model.dart';
import 'part_deck_repository.dart';
import 'part_hull_repository.dart';
// import 'part_rigging_repository.dart';
// import 'part_sails_repository.dart';
// import 'part_interior_repository.dart';

final Map<String, List<PartItem>> allPartRepositories = {
  'Deck': deckParts,
  'Hull': hullParts,
  // 'Rigging': riggingParts,
  // 'Sails': sailsParts,
  // 'Interior': interiorParts,
};

final List<PartItem> allParts = [
  ...deckParts,
  ...hullParts,
  // ...riggingParts,
  // ...sailsParts,
  // ...interiorParts,
];










File: lib/data/repositories/parts/part_interior_repository.dart
// import 'package:bcc5/data/models/part_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// final List<PartItem> interiorParts = [
//   PartItem(
//     id: 'part_interior_1.00',
//     title: 'Galley',
//     keywords: ['kitchen', 'cooking'],
//     content: [
//       ContentBlock.text('The galley is the cooking area aboard the boat.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It includes a stove, sink, and storage for food.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_interior_2.00',
//     title: 'Head',
//     keywords: ['bathroom', 'toilet'],
//     content: [
//       ContentBlock.text('The head is the marine toilet and washroom area.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('Proper use and maintenance are essential aboard.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_interior_3.00',
//     title: 'Nav Station',
//     keywords: ['navigation', 'chart table'],
//     content: [
//       ContentBlock.text(
//         'The nav station is where charts and electronics are used.',
//       ),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text(
//         'It is a workspace for planning routes and monitoring instruments.',
//       ),
//     ],
//   ),
//   PartItem(
//     id: 'part_interior_4.00',
//     title: 'Berths',
//     keywords: ['bed', 'sleep'],
//     content: [
//       ContentBlock.text('Berths are sleeping areas for crew members.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('They vary in size and comfort depending on the boat.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_interior_5.00',
//     title: 'Cabin Sole',
//     keywords: ['floor', 'walking'],
//     content: [
//       ContentBlock.text('The cabin sole is the floor of the interior cabin.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It may lift up to reveal storage or bilge access.'),
//     ],
//   ),
// ];










File: lib/data/repositories/parts/part_rigging_repository.dart
// import 'package:bcc5/data/models/part_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// final List<PartItem> riggingParts = [
//   PartItem(
//     id: 'part_rigging_1.00',
//     title: 'Standing Rigging',
//     keywords: ['mast', 'support', 'wires'],
//     content: [
//       ContentBlock.text('Standing rigging supports the mast.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It includes stays and shrouds that remain in place.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_rigging_2.00',
//     title: 'Running Rigging',
//     keywords: ['lines', 'sails'],
//     content: [
//       ContentBlock.text('Running rigging is used to raise and trim sails.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('These lines are adjustable and operated frequently.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_rigging_3.00',
//     title: 'Turnbuckles',
//     keywords: ['tension', 'adjustment'],
//     content: [
//       ContentBlock.text('Turnbuckles adjust tension in standing rigging.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('They are threaded devices used for fine tuning.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_rigging_4.00',
//     title: 'Chainplates',
//     keywords: ['attachment', 'structure'],
//     content: [
//       ContentBlock.text('Chainplates anchor the rigging to the hull.'),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('They transfer rigging loads to the boatâ€™s structure.'),
//     ],
//   ),
//   PartItem(
//     id: 'part_rigging_5.00',
//     title: 'Mast Boot',
//     keywords: ['seal', 'leak prevention'],
//     content: [
//       ContentBlock.text(
//         'The mast boot seals the base of the mast at the deck.',
//       ),
//       ContentBlock.image('assets/images/fallback_image.jpeg'),
//       ContentBlock.text('It helps prevent water from leaking below.'),
//     ],
//   ),
// ];










File: lib/data/repositories/lessons/lesson_systems_repository.dart
// import 'package:bcc5/data/models/lesson_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// class SystemsLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_systems_1.00',
//       moduleId: 'systems',
//       title: 'Battery Basics',
//       content: [
//         ContentBlock.heading('12V DC Systems'),
//         ContentBlock.text('Most boats use 12-volt DC electrical systems.'),
//         ContentBlock.image('assets/images/battery_system.jpeg'),
//         ContentBlock.bullets([
//           'Check voltage before and after trips.',
//           'Know location of battery switches.',
//           'Donâ€™t overload circuits.',
//         ]),
//       ],
//       keywords: ['systems', 'battery', 'electrical'],
//       flashcardIds: ['fc_systems_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_repository_index.dart
import 'lesson_docking_repository.dart';
import 'lesson_emergencies_repository.dart';
// import 'lesson_knots_repository.dart';
// import 'lesson_navigation_repository.dart';
// import 'lesson_safety_repository.dart';
// import 'lesson_seamanship_repository.dart';
// import 'lesson_systems_repository.dart';
// import 'lesson_teamwork_repository.dart';
// import 'lesson_terminology_repository.dart';
import 'package:bcc5/utils/id_parser.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class LessonRepositoryIndex {
  static final Map<String, List<Lesson>> _modules = {
    'docking': DockingLessonRepository.lessons,
    'emergencies': EmergenciesLessonRepository.lessons,
    // 'knots': KnotsLessonRepository.lessons,
    // 'navigation': NavigationLessonRepository.lessons,
    // 'safety': SafetyLessonRepository.lessons,
    // 'seamanship': SeamanshipLessonRepository.lessons,
    // 'systems': SystemsLessonRepository.lessons,
    // 'teamwork': TeamworkLessonRepository.lessons,
    // 'terminology': TerminologyLessonRepository.lessons,
  };

  static List<String> getModuleNames() => _modules.keys.toList();

  static List<Lesson> getLessonsForModule(String moduleId) =>
      _modules[moduleId] ?? [];

  static Lesson? getLessonById(String lessonId) {
    for (final lessons in _modules.values) {
      for (final lesson in lessons) {
        if (lesson.id == lessonId) return lesson;
      }
    }
    return null;
  }

  static String? getModuleForLessonId(String lessonId) {
    for (final entry in _modules.entries) {
      if (entry.value.any((lesson) => lesson.id == lessonId)) {
        return entry.key;
      }
    }
    return null;
  }

  void assertLessonIdsMatchModules(List<Lesson> lessons) {
    for (final lesson in lessons) {
      final parsedGroup = getGroupFromId(lesson.id);
      assert(
        lesson.id.startsWith('lesson_${parsedGroup}_'),
        'Lesson ID mismatch: ${lesson.id} should match group $parsedGroup',
      );
    }
  }
}










File: lib/data/repositories/lessons/lesson_navigation_repository.dart
// import 'package:bcc5/data/models/content_block.dart';
// import 'package:bcc5/data/models/lesson_model.dart';

// class NavigationLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_navigation_1.00',
//       moduleId: 'navigation',
//       title: 'Using a Compass',
//       content: [
//         ContentBlock.heading('Basic Compass Use'),
//         ContentBlock.text(
//           'A compass shows direction relative to magnetic north.',
//         ),
//         ContentBlock.image('assets/images/compass.jpeg'),
//         ContentBlock.bullets([
//           'Hold it flat and level.',
//           'Avoid interference from metal.',
//           'Use in conjunction with charts.',
//         ]),
//       ],
//       keywords: ['navigation', 'compass', 'direction'],
//       flashcardIds: ['fc_navigation_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_emergencies_repository.dart
// ðŸ“„ lib/data/repositories/lessons/lesson_emergencies_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/lesson_model.dart';
import 'package:bcc5/data/models/flashcard_model.dart';

class EmergenciesLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: 'lesson_emer_1.00',
      title: 'Man Overboard Basics',
      content: [
        ContentBlock.text(
          'Learn how to respond swiftly and safely when someone falls overboard. Every second matters during a man overboard scenario.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew coordination and preparedness are key to a successful recovery. Assigning clear roles reduces panic.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Practice man overboard drills regularly to ensure readiness under pressure.',
        ),
      ],
      keywords: ['man overboard', 'emergency', 'safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_1.00',
          title: 'FC: Man Overboard Basics',
          sideA: [
            ContentBlock.text(
              'What is the first action to take in a man overboard situation?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Alert the crew, assign a spotter, and prepare for recovery.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_2.00',
      title: 'Man Overboard Procedure',
      content: [
        ContentBlock.text(
          'IMMEDIATE ACTIONS for MOB: Alert the crew and assign a spotter.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Throw a flotation device and maintain visual contact. Circle around carefully.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Recover the person from the water safely, using equipment if needed.',
        ),
      ],
      keywords: ['man overboard', 'MOB', 'rescue', 'recovery'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_2.00',
          title: 'FC: Man Overboard Procedure',
          sideA: [
            ContentBlock.text(
              'What should the crew do immediately in a man overboard situation?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Throw a flotation device, assign a spotter, turn the boat for recovery.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_3.00',
      title: 'Basic First Aid for Minor Injuries',
      content: [
        ContentBlock.text(
          'Be prepared to treat small injuries like cuts, bruises, or seasickness. A stocked first aid kit is essential.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Apply antiseptic and bandages promptly to avoid infection. Hydration helps with seasickness.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Keep first aid supplies accessible and review their use before setting sail.',
        ),
      ],
      keywords: ['first aid', 'injury', 'safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_3.00',
          title: 'FC: Basic First Aid',
          sideA: [
            ContentBlock.text('What are common minor injuries on a sailboat?'),
          ],
          sideB: [
            ContentBlock.text('Small cuts, bruises, seasickness, sunburns.'),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_4.00',
      title: 'Safety Equipment',
      content: [
        ContentBlock.text(
          'Know where all safety equipment is located on board. Time is critical in an emergency.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Familiarize yourself with how to use life jackets, fire extinguishers, and radios.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Conduct safety walkthroughs at the beginning of each trip.',
        ),
      ],
      keywords: ['PFD', 'life sling', 'radio', 'fire extinguisher'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_4.00',
          title: 'FC: Safety Equipment',
          sideA: [
            ContentBlock.text(
              'What are essential pieces of safety equipment on a sailboat?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Life jackets, throwable flotation devices, VHF radio, fire extinguisher.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_5.00',
      title: 'Advanced Safety',
      content: [
        ContentBlock.text(
          'Advanced safety techniques include using tethers and storm preparations.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Be proactive: identify risks early and communicate with the crew.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Participate in training for emergency signaling and abandon-ship scenarios.',
        ),
      ],
      keywords: ['advanced safety', 'safety protocols', 'crew safety'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_5.00',
          title: 'FC: Advanced Safety',
          sideA: [
            ContentBlock.text(
              'What are advanced safety measures every sailor should know?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Tether use, emergency signaling, handling extreme weather.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
    Lesson(
      id: 'lesson_emer_6.00',
      title: 'Advanced Emergency Procedures',
      content: [
        ContentBlock.text(
          'Emergencies require calm thinking, clear communication, and quick action.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Understand your emergency plan and assign roles in advance.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Practice drills to stay sharp and reduce panic in real scenarios.',
        ),
      ],
      keywords: ['emergency procedures', 'response', 'emergency response'],
      isPaid: false,
      flashcards: [
        Flashcard(
          id: 'flashcard_lesson_emer_6.00',
          title: 'FC: Advanced Emergency Procedures',
          sideA: [
            ContentBlock.text(
              'What are the steps to follow during a boat emergency?',
            ),
          ],
          sideB: [
            ContentBlock.text(
              'Assess the situation, communicate clearly, follow emergency protocols.',
            ),
          ],
          isPaid: false,
          showAFirst: true,
        ),
      ],
    ),
  ];
}










File: lib/data/repositories/lessons/lesson_safety_repository.dart
// import 'package:bcc5/data/models/content_block.dart';
// import 'package:bcc5/data/models/lesson_model.dart';

// class SafetyLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_safety_1.00',
//       moduleId: 'safety',
//       title: 'Lifejacket Basics',
//       content: [
//         ContentBlock.heading('When to Wear a Lifejacket'),
//         ContentBlock.text('Lifejackets save lives â€” wear them proactively.'),
//         ContentBlock.image('assets/images/lifejacket.jpeg'),
//         ContentBlock.bullets([
//           'Anytime on deck in rough seas.',
//           'At night or in cold weather.',
//           'If you cannot swim.',
//         ]),
//       ],
//       keywords: ['safety', 'lifejacket', 'PFD'],
//       flashcardIds: ['fc_safety_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_knots_repository.dart
// import 'package:bcc5/data/models/content_block.dart';
// import 'package:bcc5/data/models/lesson_model.dart';

// class KnotsLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_knots_1.00',
//       moduleId: 'knots',
//       title: 'Tying a Bowline',
//       content: [
//         ContentBlock.heading('Why Use a Bowline'),
//         ContentBlock.text(
//           'It creates a strong, non-slipping loop at the end of a rope.',
//         ),
//         ContentBlock.image('assets/images/bowline_knot.jpeg'),
//         ContentBlock.bullets([
//           'The rabbit comes out of the hole...',
//           '...goes around the tree...',
//           '...and back into the hole.',
//         ]),
//       ],
//       keywords: ['knots', 'bowline', 'loop'],
//       flashcardIds: ['fc_knots_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_seamanship_repository.dart
// import 'package:bcc5/data/models/lesson_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// class SeamanshipLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_seamanship_1.00',
//       moduleId: 'seamanship',
//       title: 'Line Handling Skills',
//       content: [
//         ContentBlock.heading('Why It Matters'),
//         ContentBlock.text(
//           'Proper line handling prevents accidents and damage.',
//         ),
//         ContentBlock.image('assets/images/line_handling.jpeg'),
//         ContentBlock.bullets([
//           'Coil lines neatly to avoid tangles.',
//           'Never step into a loop.',
//           'Wear gloves when handling under load.',
//         ]),
//       ],
//       keywords: ['seamanship', 'line', 'handling'],
//       flashcardIds: ['fc_seamanship_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_teamwork_repository.dart
// import 'package:bcc5/data/models/lesson_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// class TeamworkLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_teamwork_1.00',
//       moduleId: 'teamwork',
//       title: 'Clear Communication',
//       content: [
//         ContentBlock.heading('Why It Matters'),
//         ContentBlock.text(
//           'Onboard communication prevents confusion and injury.',
//         ),
//         ContentBlock.image('assets/images/communication.jpeg'),
//         ContentBlock.bullets([
//           'Use hand signals when noisy.',
//           'Assign clear roles before docking.',
//           'Practice commands ahead of time.',
//         ]),
//       ],
//       keywords: ['teamwork', 'communication', 'roles'],
//       flashcardIds: ['fc_teamwork_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_terminology_repository.dart
// import 'package:bcc5/data/models/lesson_model.dart';
// import 'package:bcc5/data/models/content_block.dart';

// class TerminologyLessonRepository {
//   static final lessons = <Lesson>[
//     Lesson(
//       id: 'lesson_terminology_1.00',
//       moduleId: 'terminology',
//       title: 'Port vs. Starboard',
//       content: [
//         ContentBlock.heading('Sides of the Boat'),
//         ContentBlock.text('Facing forward, port is left, starboard is right.'),
//         ContentBlock.image('assets/images/port_starboard.jpeg'),
//         ContentBlock.bullets([
//           'Port has four letters, so does left.',
//           'Red = Port = Odd Numbered Buoys.',
//           'Green = Starboard = Even Numbered Buoys.',
//         ]),
//       ],
//       keywords: ['terminology', 'port', 'starboard'],
//       flashcardIds: ['fc_terminology_1'],
//       isPaid: false,
//     ),
//   ];
// }










File: lib/data/repositories/lessons/lesson_docking_repository.dart
// ðŸ“„ lib/data/repositories/lessons/lesson_docking_repository.dart

import 'package:bcc5/data/models/content_block.dart';
import 'package:bcc5/data/models/lesson_model.dart';

class DockingLessonRepository {
  static final lessons = <Lesson>[
    Lesson(
      id: 'lesson_dock_1.00',
      title: 'L1: Handling Dock Lines',
      content: [
        ContentBlock.text(
          'Learn how to approach the dock methodically to ensure smooth arrivals.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use dock lines effectively to secure the boat in variable conditions.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew coordination and preparation makes docking safer and easier.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_2.00',
      title: 'L2: Anchoring - Setting Up',
      content: [
        ContentBlock.text(
          'Anchoring starts with understanding the seabed and wind direction.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use visual cues and depth sounders to choose a safe location.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Scope and anchor type are critical to holding strength.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_3.00',
      title: 'Basics of Side Ties',
      content: [
        ContentBlock.text(
          'Side ties are useful when rafting up with other boats.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Proper fender placement protects both vessels from contact damage.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Choose knots that are secure but easy to untie under load.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_4.00',
      title: 'Returning to Dock - Docking Procedure',
      content: [
        ContentBlock.text(
          'Slow and controlled movements are key when entering a slip.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Crew should be briefed and in position before final approach.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Use visual alignment with dock features to stay centered.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_5.00',
      title: 'Basic Deck Safety and Boom Awareness',
      content: [
        ContentBlock.text(
          'Always maintain three points of contact while on deck.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Watch the boom\'s position to avoid surprise jibes.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Secure loose lines and gear to prevent trip hazards.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_6.00',
      title: 'How to Assist in Docking',
      content: [
        ContentBlock.text(
          'Crew should be stationed and aware of their docking role.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Lines should be coiled and ready to deploy quickly.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Communication between helm and crew is essential for timing.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_7.00',
      title: 'How to Assist in Anchoring',
      content: [
        ContentBlock.text(
          'Listen carefully to helm commands and anticipate needs.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Ensure the anchor is free to drop and flaked correctly.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Watch for signs of dragging or improper setting.'),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_8.00',
      title: 'Lowering the Anchor Safely',
      content: [
        ContentBlock.text(
          'Approach into the wind and stop the boat before dropping anchor.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text('Let the rode out steadily to avoid tangles.'),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Observe how the anchor sets and adjust scope if necessary.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
    Lesson(
      id: 'lesson_dock_9.00',
      title: 'Raising the Anchor Safely',
      content: [
        ContentBlock.text(
          'Coordinate engine movement with winch operation to reduce strain.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Ensure crew hands are clear of the windlass during retrieval.',
        ),
        ContentBlock.image('assets/images/fallback_image.jpeg'),
        ContentBlock.text(
          'Secure the anchor and check it\'s seated properly before departure.',
        ),
      ],
      keywords: [],
      isPaid: false,
      flashcards: [],
    ),
  ];
}
